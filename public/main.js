/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={"./app/animations/Highlight.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js");class i extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t})}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.fromTo(this.element,{autoAlpha:0,scale:1.2},{autoAlpha:1,duration:1.5,ease:"expo.out",scale:1})}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){}}},"./app/animations/Label.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js"),i=r("./app/utils/text.js"),o=r("./node_modules/lodash/each.js"),a=r.n(o);class l extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t}),(0,i.split)({element:this.element,append:!0}),(0,i.split)({element:this.element,append:!0}),this.elementLinesSpans=this.element.querySelectorAll("span span")}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),a()(this.elementLines,((e,t)=>{this.timelineIn.fromTo(e,{y:"100%"},{autoAlpha:1,delay:.2*t,duration:1.5,ease:"expo.out",y:"0%"},0)}))}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementLines=(0,i.calculate)(this.elementLinesSpans)}}},"./app/animations/Paragraph.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js"),i=r("./app/utils/text.js"),o=r("./node_modules/lodash/each.js"),a=r.n(o);class l extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.elementLinesSpans=(0,i.split)({append:!0,element:this.element})}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),a()(this.elementLines,((e,t)=>{this.timelineIn.fromTo(e,{autoAlpha:0,y:"100%"},{autoAlpha:1,delay:.2*t,duration:1.5,ease:"expo.out",y:"0%"},0)}))}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementLines=(0,i.calculate)(this.elementLinesSpans)}}},"./app/animations/Title.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Animation.js"),i=r("./app/utils/text.js"),o=r("./node_modules/lodash/each.js"),a=r.n(o);class l extends s.default{constructor({element:e,elements:t}){super({element:e,elements:t}),(0,i.split)({element:this.element,append:!0}),(0,i.split)({element:this.element,append:!0}),this.elementLinesSpans=this.element.querySelectorAll("span span")}animateIn(){this.timelineIn=n.default.timeline({delay:.5}),this.timelineIn.set(this.element,{autoAlpha:1}),a()(this.elementLines,((e,t)=>{this.timelineIn.fromTo(e,{y:"100%"},{autoAlpha:1,delay:.2*t,duration:1.5,ease:"expo.out",y:"0%"},0)}))}animateOut(){n.default.set(this.element,{autoAlpha:0})}onResize(){this.elementLines=(0,i.calculate)(this.elementLinesSpans)}}},"./app/classes/Animation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Component.js");class s extends n.default{constructor({element:e,elements:t}){super({element:e,elements:t}),this.createObserver(),this.animateOut()}createObserver(){this.observer=new window.IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting?this.animateIn():this.animateOut()}))})),this.observer.observe(this.element)}animateIn(){}animateOut(){}onResize(){}}},"./app/classes/AsyncLoad.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Component.js");class s extends n.default{constructor({element:e}){super({element:e}),this.createObserver()}createObserver(){this.observer=new window.IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&(this.element.src||(this.element.src=this.element.getAttribute("data-src"),this.element.onload=()=>{this.element.classList.add("loaded")}))}))})),this.observer.observe(this.element)}}},"./app/classes/Button.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Component.js"),i=r("./app/utils/easings.js"),o=r("./app/utils/text.js");class a extends s.default{constructor({element:e}){super({element:e}),this.createText(),this.createPath()}createText(){const e=this.element.textContent;this.elements.wrapper=this.element.querySelector("span"),this.elements.text=document.createElement("div"),this.elements.text.innerHTML=e,this.elements.textSpans=(0,o.split)({append:!1,element:this.elements.text,expression:""}),this.elements.hover=document.createElement("div"),this.elements.hover.innerHTML=e,this.elements.hoverSpans=(0,o.split)({append:!1,element:this.elements.hover,expression:""}),this.elements.wrapper.innerHTML="",this.elements.wrapper.appendChild(this.elements.text),this.elements.wrapper.appendChild(this.elements.hover),n.default.set(this.elements.hover,{left:0,position:"absolute",top:0}),this.timeline=n.default.timeline({paused:!0}),this.timeline.to(this.elements.textSpans,{duration:.5,ease:i.DEFAULT,transform:"rotate3d(1, 0.1, 0, -90deg)",stagger:.01},0),this.timeline.fromTo(this.elements.hoverSpans,{transform:"rotate3d(1, 0.1, 0, 90deg)"},{duration:.5,ease:i.DEFAULT,transform:"rotate3d(0, 0, 0, 90deg)",stagger:.01},.05)}createPath(){this.path=this.element.querySelector("path:last-child"),this.pathLength=this.path.getTotalLength(),this.pathValue=this.pathLength,n.default.set(this.path,{strokeDashoffset:this.pathLength,strokeDasharray:`${this.pathLength} ${this.pathLength}`})}onMouseEnter(){this.pathValue-=this.pathLength,n.default.to(this.path,{duration:1,ease:i.DEFAULT,strokeDashoffset:this.pathValue}),this.timeline.play()}onMouseLeave(){this.pathValue-=this.pathLength,n.default.to(this.path,{duration:1,ease:i.DEFAULT,strokeDashoffset:this.pathValue}),this.timeline.reverse()}addEventListeners(){this.onMouseEnterEvent=this.onMouseEnter.bind(this),this.onMouseLeaveEvent=this.onMouseLeave.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterEvent),this.element.addEventListener("mouseleave",this.onMouseLeaveEvent)}removeEventListeners(){this.element.removeEventListener("mouseenter",this.onMouseEnterEvent),this.element.removeEventListener("mouseleave",this.onMouseLeaveEvent)}}},"./app/classes/Colors.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{ColorsManager:()=>s});var n=r("./node_modules/gsap/index.js");const s=new class{change({backgroundColor:e,color:t}){n.default.to(document.documentElement,{background:e,color:t,duration:1.5})}}},"./app/classes/Component.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r("./node_modules/events/events.js"),s=r.n(n),i=r("./node_modules/lodash/each.js"),o=r.n(i);class a extends(s()){constructor({element:e,elements:t={}}){super(),this.selector=e,this.selectorChildren={animationsLabels:'[data-animation="label"]',animationsParagraphs:'[data-animation="paragraph"]',animationsTitles:'[data-animation="title"]'},this.elements=Object.assign(this.selectorChildren,t),this.create(),this.addEventListeners()}create(){this.selector instanceof window.HTMLElement?this.element=this.selector:this.element=document.querySelector(this.selector),this.elements={},o()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))}))}addEventListeners(){}removeEventListeners(){}}},"./app/classes/Page.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>g});var n=r("./node_modules/gsap/index.js"),s=r("./node_modules/prefix/index.js"),i=r.n(s),o=r("./node_modules/lodash/each.js"),a=r.n(o),l=r("./node_modules/lodash/map.js"),u=r.n(l),h=r("./app/animations/Highlight.js"),c=r("./app/animations/Title.js"),d=r("./app/animations/Paragraph.js"),p=r("./app/animations/Label.js"),f=r("./app/classes/Colors.js"),m=r("./app/classes/AsyncLoad.js");class g{constructor({element:e,elements:t={},id:r}){this.selector=e,this.selectorChildren={animationsHighlights:'[data-animation="highlight"]',animationsTitles:'[data-animation="title"]',animationsParagraphs:'[data-animation="paragraph"]',animationsLabels:'[data-animation="label"]',preloaders:"[data-src]"},this.elements=Object.assign(this.selectorChildren,t),this.id=r,this.transformPrefix=i()("transform")}create(){console.log(this.elements.wrapper),this.element=document.querySelector(this.selector),this.elements={},this.scroll={current:0,target:0,last:0,limit:0},a()(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))})),this.createAnimations(),this.createPreloader()}createAnimations(){this.animations=[],this.animationsHighlights=u()(this.elements.animationsHighlights,(e=>new h.default({element:e}))),this.animations.push(...this.animationsHighlights),this.animationsTitles=u()(this.elements.animationsTitles,(e=>new c.default({element:e}))),this.animations.push(...this.animationsTitles),this.animationsParagraphs=u()(this.elements.animationsParagraphs,(e=>new d.default({element:e}))),this.animations.push(...this.animationsParagraphs),this.animationsLabels=u()(this.elements.animationsLabels,(e=>new p.default({element:e}))),this.animations.push(...this.animationsLabels)}createPreloader(){this.preloaders=u()(this.elements.preloaders,(e=>new m.default({element:e})))}show(){return f.ColorsManager.change({backgroundColor:this.element.getAttribute("data-background"),color:this.element.getAttribute("data-color")}),new Promise((e=>{this.animateIn=n.default.timeline(),this.animateIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1}),this.animateIn.call((()=>{this.addEventListeners(),e()}))}))}hide(){return new Promise((e=>{this.destroy(),this.animateOut=n.default.timeline(),this.animateOut.to(this.element,{autoAlpha:0,onComplete:e})}))}onResize(){this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight,a()(this.animations,(e=>e.onResize()))}onWheel({pixelY:e}){this.scroll.target+=e}update(){this.scroll.target=n.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=n.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.01&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){}removeEventListeners(){}destroy(){this.removeEventListeners()}}},"./app/components/Canvas/About/Gallery.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/gsap/index.js"),i=r("./node_modules/lodash/map.js"),o=r.n(i),a=r("./app/components/Canvas/About/Media.js");class l{constructor({element:e,geometry:t,index:r,gl:s,scene:i,sizes:o}){this.element=e,this.elementsWrapper=e.querySelector(".about__gallery__wrapper"),this.geometry=t,this.index=r,this.gl=s,this.scene=i,this.sizes=o,this.group=new n.Transform,this.scroll={current:0,target:0,start:0,lerp:.1,velocity:.5},this.createMedias(),this.group.setParent(this.scene)}createMedias(){this.mediasElements=this.elementsWrapper.querySelectorAll(".about__gallery__media"),this.medias=o()(this.mediasElements,((e,t)=>new a.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){o()(this.medias,(e=>e.show()))}hide(){o()(this.medias,(e=>e.hide()))}onResize(e){this.bounds=this.elementsWrapper.getBoundingClientRect(),this.sizes=e.sizes,this.width=this.bounds.width/window.innerWidth*this.sizes.width,this.scroll.current=this.scroll.target=0,o()(this.medias,(t=>t.onResize(e,this.scroll.current)))}onTouchDown({x:e,y:t}){this.scroll.start=this.scroll.current}onTouchMove({x:e,y:t}){const r=e.start-e.end;this.scroll.target=this.scroll.start-r}onTouchUp({x:e,y:t}){}update(e){if(!this.bounds)return;const t=.1*(e.current-e.target),r=e.current/window.innerHeight;this.scroll.current<this.scroll.target?(this.direction="right",this.scroll.velocity=-1):this.scroll.current>this.scroll.target&&(this.direction="left",this.scroll.velocity=1),this.scroll.target-=this.scroll.velocity,this.scroll.target+=t,this.scroll.current=s.default.utils.interpolate(this.scroll.current,this.scroll.target,this.scroll.lerp),o()(this.medias,(e=>{const t=e.mesh.scale.x/2+.25;if("left"===this.direction){e.mesh.position.x+t<-this.sizes.width/2&&(e.extra+=this.width)}else if("right"===this.direction){e.mesh.position.x-t>this.sizes.width/2&&(e.extra-=this.width)}e.update(this.scroll.current)})),this.group.position.y=r*this.sizes.height}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/About/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/ogl/src/core/Texture.js"),s=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./node_modules/gsap/index.js"),a=r("./app/shaders/plane-fragments.glsl"),l=r("./app/shaders/plane-vertex.glsl");const u=class{constructor({element:e,geometry:t,gl:r,index:n,scene:s,sizes:i}){this.element=e,this.geometry=t,this.gl=r,this.index=n,this.scene=s,this.sizes=i,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new n.Texture(this.gl);const e=this.element.querySelector("img");this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=e.getAttribute("data-src"),this.image.onload=()=>this.texture.image=this.image}createProgram(){this.program=new s.Program(this.gl,{fragment:a.default,vertex:l.default,uniforms:{tMap:{value:this.texture},uAlpha:{value:0}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){o.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){o.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra=0,this.createBounds(e),this.updateX(t),this.updateY(0)}updateRotation(){this.mesh.rotation.z=o.default.utils.mapRange(-this.sizes.width/2,this.sizes.width/2,.1*Math.PI,.1*-Math.PI,this.mesh.position.x)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height,this.mesh.position.y+=40*Math.cos(this.mesh.position.x/this.sizes.width*Math.PI*.1)-40}update(e){this.bounds&&(this.updateRotation(),this.updateScale(),this.updateX(e),this.updateY(0))}}},"./app/components/Canvas/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/lodash/map.js"),o=r.n(i),a=r("./app/components/Canvas/About/Gallery.js");const l=class{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.sizes=r,this.group=new n.Transform,this.createGeometry(),this.createGalleries(),this.group.setParent(t),this.show()}createGeometry(){this.geometry=new s.Plane(this.gl)}createGalleries(){this.galleriesElements=document.querySelectorAll(".about__gallery"),this.galleries=o()(this.galleriesElements,((e,t)=>new a.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){o()(this.galleries,(e=>e.show()))}hide(){o()(this.galleries,(e=>e.hide()))}onResize(e){o()(this.galleries,(t=>t.onResize(e)))}onTouchDown(e){o()(this.galleries,(t=>t.onTouchDown(e)))}onTouchMove(e){o()(this.galleries,(t=>t.onTouchMove(e)))}onTouchUp(e){o()(this.galleries,(t=>t.onTouchUp(e)))}onWheel({pixelX:e,pixelY:t}){}update(e){o()(this.galleries,(t=>t.update(e)))}destroy(){o()(this.galleries,(e=>e.destroy()))}}},"./app/components/Canvas/Home/Media.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/ogl/src/core/Texture.js"),s=r("./node_modules/ogl/src/core/Program.js"),i=r("./node_modules/ogl/src/core/Mesh.js"),o=r("./node_modules/gsap/index.js"),a=r("./app/shaders/plane-fragments.glsl"),l=r("./app/shaders/plane-vertex.glsl");const u=class{constructor({element:e,geometry:t,gl:r,index:n,scene:s,sizes:i}){this.element=e,this.geometry=t,this.gl=r,this.index=n,this.scene=s,this.sizes=i,this.createTexture(),this.createProgram(),this.createMesh(),this.extra={x:0,y:0}}createTexture(){this.texture=new n.Texture(this.gl),this.image=new window.Image,this.image.crossOrigin="anonymous",this.image.src=this.element.getAttribute("data-src"),this.image.onload=()=>this.texture.image=this.image}createProgram(){this.program=new s.Program(this.gl,{fragment:a.default,vertex:l.default,uniforms:{tMap:{value:this.texture},uAlpha:{value:0}}})}createMesh(){this.mesh=new i.Mesh(this.gl,{geometry:this.geometry,program:this.program}),this.mesh.setParent(this.scene),this.mesh.rotation.z=o.default.utils.random(.03*-Math.PI,.03*Math.PI)}createBounds({sizes:e}){this.sizes=e,this.bounds=this.element.getBoundingClientRect(),this.updateScale(),this.updateX(),this.updateY()}show(){o.default.fromTo(this.program.uniforms.uAlpha,{value:0},{value:1})}hide(){o.default.to(this.program.uniforms.uAlpha,{value:0})}onResize(e,t){this.extra={x:0,y:0},this.createBounds(e),this.updateX(t&&t.x),this.updateY(t&&t.y)}updateScale(){this.height=this.bounds.height/window.innerHeight,this.width=this.bounds.width/window.innerWidth,this.mesh.scale.x=this.sizes.width*this.width,this.mesh.scale.y=this.sizes.height*this.height}updateX(e=0){this.x=(this.bounds.left+e)/window.innerWidth,this.mesh.position.x=-this.sizes.width/2+this.mesh.scale.x/2+this.x*this.sizes.width+this.extra.x}updateY(e=0){this.y=(this.bounds.top+e)/window.innerHeight,this.mesh.position.y=this.sizes.height/2-this.mesh.scale.y/2-this.y*this.sizes.height+this.extra.y}update(e){this.bounds&&(this.updateX(e.x),this.updateY(e.y))}}},"./app/components/Canvas/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>u});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/extras/Plane.js"),i=r("./node_modules/gsap/index.js"),o=r("./node_modules/lodash/map.js"),a=r.n(o),l=r("./app/components/Canvas/Home/Media.js");const u=class{constructor({gl:e,scene:t,sizes:r}){this.gl=e,this.scene=t,this.sizes=r,this.group=new n.Transform,this.galleryElement=document.querySelector(".home__gallery"),this.mediasElements=document.querySelectorAll(".home__gallery__media__image"),this.x={current:0,target:0,lerp:.1},this.y={current:0,target:0,lerp:.1},this.scroll={x:0,y:0},this.scrollCurrent={x:0,y:0},this.createGeometry(),this.createGallery(),this.group.setParent(this.scene),this.show()}createGeometry(){this.geometry=new s.Plane(this.gl)}createGallery(){this.medias=a()(this.mediasElements,((e,t)=>new l.default({element:e,geometry:this.geometry,index:t,gl:this.gl,scene:this.group,sizes:this.sizes})))}show(){a()(this.medias,(e=>e.show()))}hide(){a()(this.medias,(e=>e.hide()))}onResize(e){this.galleryBounds=this.galleryElement.getBoundingClientRect(),this.sizes=e.sizes,this.gallerySizes={width:this.galleryBounds.width/window.innerWidth*this.sizes.width,height:this.galleryBounds.height/window.innerHeight*this.sizes.height},this.scroll.x=this.x.target=0,this.scroll.y=this.y.target=0,a()(this.medias,(t=>t.onResize(e,this.scroll)))}onTouchDown({x:e,y:t}){this.scrollCurrent.x=this.scroll.x,this.scrollCurrent.y=this.scroll.y}onTouchMove({x:e,y:t}){const r=e.start-e.end,n=t.start-t.end;this.x.target=this.scrollCurrent.x-r,this.y.target=this.scrollCurrent.y-n}onTouchUp({x:e,y:t}){}onWheel({pixelX:e,pixelY:t}){this.x.target+=e,this.y.target+=t}update(){this.galleryBounds&&(this.x.current=i.default.utils.interpolate(this.x.current,this.x.target,this.x.lerp),this.y.current=i.default.utils.interpolate(this.y.current,this.y.target,this.y.lerp),this.scroll.x<this.x.current?this.x.direction="right":this.scroll.x>this.x.current&&(this.x.direction="left"),this.scroll.y<this.y.current?this.y.direction="down":this.scroll.y>this.y.current&&(this.y.direction="up"),this.scroll.x=this.x.current,this.scroll.y=this.y.current,a()(this.medias,(e=>{const t=e.mesh.scale.x/2;if("left"===this.x.direction){e.mesh.position.x+t<-this.sizes.width/2&&(e.extra.x+=this.gallerySizes.width,e.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("right"===this.x.direction){e.mesh.position.x-t>this.sizes.width/2&&(e.extra.x-=this.gallerySizes.width,e.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}const r=e.mesh.scale.y/2;if("down"===this.y.direction){e.mesh.position.y+r<-this.sizes.height/2&&(e.extra.y+=this.gallerySizes.height,e.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}else if("up"===this.y.direction){e.mesh.position.y-r>this.sizes.height/2&&(e.extra.y-=this.gallerySizes.height,e.mesh.rotation.z=i.default.utils.random(.03*-Math.PI,.03*Math.PI))}e.update(this.scroll)})))}destroy(){this.scene.removeChild(this.group)}}},"./app/components/Canvas/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/ogl/src/core/Renderer.js"),s=r("./node_modules/ogl/src/core/Camera.js"),i=r("./node_modules/ogl/src/core/Transform.js"),o=r("./app/components/Canvas/Home/index.js"),a=r("./app/components/Canvas/About/index.js");class l{constructor({template:e}){this.template=e,this.x={start:0,distance:0,end:0},this.y={start:0,distance:0,end:0},this.createRenderer(),this.createCamera(),this.createScene(),this.onResize(),this.onChangeEnd(this.template)}createRenderer(){this.renderer=new n.Renderer({alpha:!0,antialias:!0}),this.gl=this.renderer.gl,document.body.appendChild(this.gl.canvas)}createCamera(){this.camera=new s.Camera(this.gl),this.camera.position.z=5}createScene(){this.scene=new i.Transform}createHome(){this.home=new o.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyHome(){this.home&&(this.home.destroy(),this.home=null)}createAbout(){this.about=new a.default({gl:this.gl,scene:this.scene,sizes:this.sizes})}destroyAbout(){this.about&&(this.about.destroy(),this.about=null)}onChangeStart(){this.home&&this.home.hide(),this.about&&this.about.hide()}onChangeEnd(e){"home"===e?this.createHome():this.destroyHome(),"about"===e?this.createAbout():this.about&&this.destroyAbout()}onResize(){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.perspective({aspect:window.innerWidth/window.innerHeight});const e=this.camera.fov*(Math.PI/180),t=2*Math.tan(e/2)*this.camera.position.z,r=t*this.camera.aspect;this.sizes={height:t,width:r};const n={sizes:this.sizes};this.home&&this.home.onResize(n),this.about&&this.about.onResize(n)}onTouchDown(e){this.isDown=!0,this.x.start=e.touches?e.touches[0].clientX:e.clientX,this.y.start=e.touches?e.touches[0].clientY:e.clientY;const t={x:this.x,y:this.y};this.home&&this.home.onTouchDown(t),this.about&&this.about.onTouchDown(t)}onTouchMove(e){if(!this.isDown)return;const t=e.touches?e.touches[0].clientX:e.clientX,r=e.touches?e.touches[0].clientY:e.clientY;this.x.end=t,this.y.end=r;const n={x:this.x,y:this.y};this.home&&this.home.onTouchMove(n),this.about&&this.about.onTouchMove(n)}onTouchUp(e){this.isDown=!1;const t=e.changedTouches?e.changedTouches[0].clientX:e.clientX,r=e.changedTouches?e.changedTouches[0].clientY:e.clientY;this.x.end=t,this.y.end=r;const n={x:this.x,y:this.y};this.home&&this.home.onTouchUp(n),this.about&&this.about.onTouchUp(n)}onWheel(e){this.home&&this.home.onWheel(e)}update(e){this.home&&this.home.update(),this.about&&this.about.update(e),this.renderer.render({camera:this.camera,scene:this.scene})}}},"./app/components/Navigation.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Component.js"),i=r("./app/utils/colors.js");class o extends s.default{constructor({template:e}){super({element:".navigation",elements:{items:".navigation__list__item",links:".navigation__list__link"}}),this.onChange(e)}onChange(e){"about"===e?(n.default.to(this.element,{color:i.COLOR_BRIGHT_GRAY,duration:1.5}),n.default.to(this.elements.items[0],{autoAlpha:1,delay:.75,duration:.75}),n.default.to(this.elements.items[1],{autoAlpha:0,duration:.75})):(n.default.to(this.element,{color:i.COLOR_QUARTER_SPANISH_WHITE,duration:1.5}),n.default.to(this.elements.items[0],{autoAlpha:0,duration:.75}),n.default.to(this.elements.items[1],{autoAlpha:1,delay:.75,duration:.75}))}}},"./app/components/Preloader.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>l});var n=r("./node_modules/gsap/index.js"),s=r("./app/classes/Component.js"),i=r("./node_modules/lodash/each.js"),o=r.n(i),a=r("./app/utils/text.js");class l extends s.default{constructor(){super({element:".preloader",elements:{title:".preloader__text",number:".preloader__number",numberText:".preloader__number__text",images:document.querySelectorAll("img")}}),(0,a.split)({element:this.elements.title,expression:"<br>"}),(0,a.split)({element:this.elements.title,expression:"<br>"}),this.elements.titleSpans=this.elements.title.querySelectorAll("span span"),this.length=0,this.createLoader()}createLoader(){o()(this.elements.images,(e=>{e.onload=()=>this.onAssetLoaded(e),e.src=e.getAttribute("data-src")}))}onAssetLoaded(){this.length+=1;const e=this.length/this.elements.images.length;this.elements.numberText.innerHTML=`${Math.round(100*e)}%`,1===e&&this.onLoaded()}onLoaded(){return new Promise((()=>{this.animateOut=n.default.timeline({delay:2}),this.animateOut.to(this.elements.titleSpans,{duration:1.5,ease:"expo.out",stagger:.1,y:"100%"}),this.animateOut.to(this.elements.numberText,{duration:1.5,ease:"expo.out",y:"100%"},"-=1.4"),this.animateOut.to(this.element,{duration:1.5,ease:"expo.out",scaleY:0,transformOrigin:"100% 100%"},"-=1"),this.animateOut.call((()=>{this.emit("completed")}))}))}destroy(){this.element.parentNode.removeChild(this.element)}}},"./app/pages/About/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Page.js");class s extends n.default{constructor(){super({id:"about",element:".about",elements:{wrapper:".about__wrapper",navigation:document.querySelector(".navigation"),title:".about__title"}})}}},"./app/pages/Collections/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>s});var n=r("./app/classes/Page.js");class s extends n.default{constructor(){super({id:"collections",element:".collections",elements:{wrapper:".collections__wrapper",articlesDescriptions:".collections__article__description"}})}}},"./app/pages/Detail/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Button.js"),s=r("./app/classes/Page.js");class i extends s.default{constructor(){super({id:"detail",element:".detail",elements:{button:".detail__button",wrapper:".detail__wrapper"}})}create(){super.create(),this.link=new n.default({element:this.elements.button})}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/pages/Home/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r("./app/classes/Button.js"),s=r("./app/classes/Page.js");class i extends s.default{constructor(){super({id:"home",element:".home",elements:{wrapper:".home__wrapper",navigation:document.querySelector(".navigation"),link:".home__link",list:".home__titles",items:".home__titles__label, .home__titles__title"}})}create(){super.create(),this.link=new n.default({element:this.elements.link})}destroy(){super.destroy(),this.link.removeEventListeners()}}},"./app/utils/CustomEase.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CustomEase:()=>d,default:()=>d});var n=r("./node_modules/gsap/utils/paths.js");let s,i,o=()=>s||"undefined"!=typeof window&&(s=window.gsap)&&s.registerPlugin&&s,a=()=>{s=o(),s?(s.registerEase("_CE",d.create),i=1):console.warn("Please gsap.registerPlugin(CustomEase)")},l=e=>~~(1e3*e+(e<0?-.5:.5))/1e3,u=/[-+=\.]*\d+[\.e\-\+]*\d*[e\-\+]*\d*/gi,h=/[cLlsSaAhHvVtTqQ]/g,c=function(e,t,r,n,s,i,o,a,l,u,h){let d,p=(e+r)/2,f=(t+n)/2,m=(r+s)/2,g=(n+i)/2,v=(s+o)/2,_=(i+a)/2,y=(p+m)/2,b=(f+g)/2,w=(m+v)/2,x=(g+_)/2,j=(y+w)/2,E=(b+x)/2,C=o-e,A=a-t,T=Math.abs((r-o)*A-(n-a)*C),S=Math.abs((s-o)*A-(i-a)*C);return u||(u=[{x:e,y:t},{x:o,y:a}],h=1),u.splice(h||u.length-1,0,{x:j,y:E}),(T+S)*(T+S)>l*(C*C+A*A)&&(d=u.length,c(e,t,p,f,y,b,j,E,l,u,h),c(j,E,w,x,v,_,o,a,l,u,h+1+(u.length-d))),u};class d{constructor(e,t,r){i||a(),this.id=e,this.setData(t,r)}setData(e,t){t=t||{};let r,i,o,a,l,d,p,f,m,g=(e=e||"0,0,1,1").match(u),v=1,_=[],y=[],b=t.precision||1,w=b<=1;if(this.data=e,(h.test(e)||~e.indexOf("M")&&e.indexOf("C")<0)&&(g=(0,n.stringToRawPath)(e)[0]),r=g.length,4===r)g.unshift(0,0),g.push(1,1),r=8;else if((r-2)%6)throw"Invalid CustomEase";for(0==+g[0]&&1==+g[r-2]||((e,t,r)=>{r||0===r||(r=Math.max(+e[e.length-1],+e[1]));let n,s=-1*+e[0],i=-r,o=e.length,a=1/(+e[o-2]+s),l=-t||(Math.abs(+e[o-1]-+e[1])<.01*(+e[o-2]-+e[0])?(e=>{let t,r=e.length,n=1e20;for(t=1;t<r;t+=6)+e[t]<n&&(n=+e[t]);return n})(e)+i:+e[o-1]+i);for(l=l?1/l:-a,n=0;n<o;n+=2)e[n]=(+e[n]+s)*a,e[n+1]=(+e[n+1]+i)*l})(g,t.height,t.originY),this.segment=g,a=2;a<r;a+=6)i={x:+g[a-2],y:+g[a-1]},o={x:+g[a+4],y:+g[a+5]},_.push(i,o),c(i.x,i.y,+g[a],+g[a+1],+g[a+2],+g[a+3],o.x,o.y,1/(2e5*b),_,_.length-1);for(r=_.length,a=0;a<r;a++)p=_[a],f=_[a-1]||p,(p.x>f.x||f.y!==p.y&&f.x===p.x||p===f)&&p.x<=1?(f.cx=p.x-f.x,f.cy=p.y-f.y,f.n=p,f.nx=p.x,w&&a>1&&Math.abs(f.cy/f.cx-_[a-2].cy/_[a-2].cx)>2&&(w=0),f.cx<v&&(f.cx?v=f.cx:(f.cx=.001,a===r-1&&(f.x-=.001,v=Math.min(v,.001),w=0)))):(_.splice(a--,1),r--);if(r=1/v+1|0,l=1/r,d=0,p=_[0],w){for(a=0;a<r;a++)m=a*l,p.nx<m&&(p=_[++d]),i=p.y+(m-p.x)/p.cx*p.cy,y[a]={x:m,cx:l,y:i,cy:0,nx:9},a&&(y[a-1].cy=i-y[a-1].y);y[r-1].cy=_[_.length-1].y-i}else{for(a=0;a<r;a++)p.nx<a*l&&(p=_[++d]),y[a]=p;d<_.length-1&&(y[a-1]=_[_.length-2])}return this.ease=e=>{let t=y[e*r|0]||y[r-1];return t.nx<e&&(t=t.n),t.y+(e-t.x)/t.cx*t.cy},this.ease.custom=this,this.id&&s.registerEase(this.id,this.ease),this}getSVGData(e){return d.getSVGData(this,e)}static create(e,t,r){return new d(e,t,r).ease}static register(e){s=e,a()}static get(e){return s.parseEase(e)}static getSVGData(e,t){let r,i,o,a,u,h,c,p,f,m,g=(t=t||{}).width||100,v=t.height||100,_=t.x||0,y=(t.y||0)+v,b=s.utils.toArray(t.path)[0];if(t.invert&&(v=-v,y=0),"string"==typeof e&&(e=s.parseEase(e)),e.custom&&(e=e.custom),e instanceof d)r=(0,n.rawPathToString)((0,n.transformRawPath)([e.segment],g,0,0,-v,_,y));else{for(r=[_,y],c=Math.max(5,200*(t.precision||1)),a=1/c,c+=2,p=5/c,f=l(_+a*g),m=l(y+e(a)*-v),i=(m-y)/(f-_),o=2;o<c;o++)u=l(_+o*a*g),h=l(y+e(o*a)*-v),(Math.abs((h-m)/(u-f)-i)>p||o===c-1)&&(r.push(f,m),i=(h-m)/(u-f)),f=u,m=h;r="M"+r.join(",")}return b&&b.setAttribute("d",r),r}}o()&&s.registerPlugin(d),d.version="3.5.1"},"./app/utils/colors.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{COLOR_BRIGHT_GRAY:()=>n,COLOR_QUARTER_SPANISH_WHITE:()=>s});const n="#37384C",s="#F9F1E7"},"./app/utils/easings.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{DEFAULT:()=>i,CSS:()=>o});var n=r("./node_modules/gsap/index.js"),s=r("./app/utils/CustomEase.js");n.default.registerPlugin(s.default);const i=s.default.create("default","0.77, 0, 0.175, 1"),o="cubic-bezier(0.77, 0, 0.175, 1)"},"./app/utils/text.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{split:()=>i,calculate:()=>o});var n=r("./node_modules/lodash/each.js"),s=r.n(n);function i({element:e,expression:t=" ",append:r=!0}){const n=function(e,t){const r=e.split("<br>");let n=[];return s()(r,((e,r)=>{r>0&&n.push("<br>"),n=n.concat(e.split(t));let i=!1,o="";const a=[];s()(n,(e=>{i||!e.includes("<a")&&!e.includes("<strong")||(o="",i=!0),i&&(o+=` ${e}`),i&&(e.includes("/a>")||e.includes("/strong>"))&&(a.push(o),o=""),i||""!==o||a.push(e),i&&(e.includes("/a>")||e.includes("/strong>"))&&(i=!1)})),n=a})),n}(e.innerHTML.toString().trim(),t);let i="";s()(n,(e=>{if(e.indexOf("<br>")>-1){const t=e.split("<br>");s()(t,((e,t)=>{i+=t>0?"<br>"+a(e):a(e)}))}else i+=a(e)})),e.innerHTML=i;const o=e.querySelectorAll("span");return r&&s()(o,(e=>{const t=1===e.textContent.length,r=""!==e.innerHTML.trim(),n="&"!==e.textContent,s="-"!==e.textContent;t&&r&&n&&s&&(e.innerHTML=`${e.textContent}&nbsp;`)})),o}function o(e){const t=[];let r=[],n=e[0].offsetTop;return s()(e,((s,i)=>{s.offsetTop===n&&r.push(s),s.offsetTop!==n&&(t.push(r),r=[],r.push(s),n=s.offsetTop),i+1===e.length&&t.push(r)})),t}function a(e){return""===e?e:" "===e?"&nbsp;":"<br>"===(e=e.trim())?"<br>":`<span>${e}</span>`+(e.length>1?" ":"")}},"./node_modules/ansi-html/index.js":e=>{"use strict";e.exports=o;var t=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,r={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},n={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},s={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},i={23:"</i>",24:"</u>",29:"</del>"};function o(e){if(!t.test(e))return e;var r=[],n=e.replace(/\033\[(\d+)*m/g,(function(e,t){var n=s[t];if(n)return~r.indexOf(t)?(r.pop(),"</span>"):(r.push(t),"<"===n[0]?n:'<span style="'+n+';">');var o=i[t];return o?(r.pop(),o):""})),o=r.length;return o>0&&(n+=Array(o+1).join("</span>")),n}function a(e){for(var t in s[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],s[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],s[90]="color:#"+e.darkgrey,n){var r=e[n[t]]||"000";s[t]="color:#"+r,t=parseInt(t),s[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach((function(e){i[e]="</span>"})),o.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var n in r){var s=e.hasOwnProperty(n)?e[n]:null;if(s){if("reset"===n){if("string"==typeof s&&(s=[s]),!Array.isArray(s)||0===s.length||s.some((function(e){return"string"!=typeof e})))throw new Error("The value of `"+n+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=r[n];s[0]||(s[0]=i[0]),1!==s.length&&s[1]||(s=[s[0]]).push(i[1]),s=s.slice(0,2)}else if("string"!=typeof s)throw new Error("The value of `"+n+"` property must be a hex string, e.g.: FF0000");t[n]=s}else t[n]=r[n]}a(t)},o.reset=function(){a(r)},o.tags={},Object.defineProperty?(Object.defineProperty(o.tags,"open",{get:function(){return s}}),Object.defineProperty(o.tags,"close",{get:function(){return i}})):(o.tags.open=s,o.tags.close=i),o.reset()},"./node_modules/ansi-regex/index.js":e=>{"use strict";e.exports=function(){return/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g}},"./node_modules/events/events.js":e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function i(){i.init.call(this)}e.exports=i,e.exports.once=function(e,t){return new Promise((function(r,n){function s(r){e.removeListener(t,i),n(r)}function i(){"function"==typeof e.removeListener&&e.removeListener("error",s),r([].slice.call(arguments))}m(e,t,i,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&m(e,"error",t,r)}(e,s,{once:!0})}))},i.EventEmitter=i,i.prototype._events=void 0,i.prototype._eventsCount=0,i.prototype._maxListeners=void 0;var o=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function l(e){return void 0===e._maxListeners?i.defaultMaxListeners:e._maxListeners}function u(e,t,r,n){var s,i,o,u;if(a(r),void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),i=e._events),o=i[t]),void 0===o)o=i[t]=r,++e._eventsCount;else if("function"==typeof o?o=i[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),(s=l(e))>0&&o.length>s&&!o.warned){o.warned=!0;var h=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");h.name="MaxListenersExceededWarning",h.emitter=e,h.type=t,h.count=o.length,u=h,console&&console.warn&&console.warn(u)}return e}function h(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function c(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},s=h.bind(n);return s.listener=r,n.wrapFn=s,s}function d(e,t,r){var n=e._events;if(void 0===n)return[];var s=n[t];return void 0===s?[]:"function"==typeof s?r?[s.listener||s]:[s]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(s):f(s,s.length)}function p(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function f(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function m(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function s(i){n.once&&e.removeEventListener(t,s),r(i)}))}}Object.defineProperty(i,"defaultMaxListeners",{enumerable:!0,get:function(){return o},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");o=e}}),i.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},i.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},i.prototype.getMaxListeners=function(){return l(this)},i.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var s="error"===e,i=this._events;if(void 0!==i)s=s&&void 0===i.error;else if(!s)return!1;if(s){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var l=i[e];if(void 0===l)return!1;if("function"==typeof l)n(l,this,t);else{var u=l.length,h=f(l,u);for(r=0;r<u;++r)n(h[r],this,t)}return!0},i.prototype.addListener=function(e,t){return u(this,e,t,!1)},i.prototype.on=i.prototype.addListener,i.prototype.prependListener=function(e,t){return u(this,e,t,!0)},i.prototype.once=function(e,t){return a(t),this.on(e,c(this,e,t)),this},i.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,c(this,e,t)),this},i.prototype.removeListener=function(e,t){var r,n,s,i,o;if(a(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(s=-1,i=r.length-1;i>=0;i--)if(r[i]===t||r[i].listener===t){o=r[i].listener,s=i;break}if(s<0)return this;0===s?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,s),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,o||t)}return this},i.prototype.off=i.prototype.removeListener,i.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var s,i=Object.keys(r);for(n=0;n<i.length;++n)"removeListener"!==(s=i[n])&&this.removeAllListeners(s);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},i.prototype.listeners=function(e){return d(this,e,!0)},i.prototype.rawListeners=function(e){return d(this,e,!1)},i.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):p.call(e,t)},i.prototype.listenerCount=p,i.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},"./node_modules/gsap/CSSPlugin.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{CSSPlugin:()=>_e,default:()=>_e,_getBBox:()=>z,_createElement:()=>P,checkPrefix:()=>q});var n,s,i,o,a,l,u,h=r("./node_modules/gsap/gsap-core.js"),c={},d=180/Math.PI,p=Math.PI/180,f=Math.atan2,m=/([A-Z])/g,g=/(?:left|right|width|margin|padding|x)/i,v=/[\s,\(]\S/,_={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},y=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},b=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},w=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},x=function(e,t){var r=t.s+t.c*e;t.set(t.t,t.p,~~(r+(r<0?-.5:.5))+t.u,t)},j=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},E=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},C=function(e,t,r){return e.style[t]=r},A=function(e,t,r){return e.style.setProperty(t,r)},T=function(e,t,r){return e._gsap[t]=r},S=function(e,t,r){return e._gsap.scaleX=e._gsap.scaleY=r},M=function(e,t,r,n,s){var i=e._gsap;i.scaleX=i.scaleY=r,i.renderTransform(s,i)},O=function(e,t,r,n,s){var i=e._gsap;i[t]=r,i.renderTransform(s,i)},L="transform",k=L+"Origin",P=function(e,t){var r=s.createElementNS?s.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):s.createElement(e);return r.style?r:s.createElement(e)},R=function e(t,r,n){var s=getComputedStyle(t);return s[r]||s.getPropertyValue(r.replace(m,"-$1").toLowerCase())||s.getPropertyValue(r)||!n&&e(t,q(r)||r,1)||""},N="O,Moz,ms,Ms,Webkit".split(","),q=function(e,t,r){var n=(t||a).style,s=5;if(e in n&&!r)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);s--&&!(N[s]+e in n););return s<0?null:(3===s?"ms":s>=0?N[s]:"")+e},F=function(){"undefined"!=typeof window&&window.document&&(n=window,s=n.document,i=s.documentElement,a=P("div")||{style:{}},P("div"),L=q(L),k=L+"Origin",a.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",u=!!q("perspective"),o=1)},D=function e(t){var r,n=P("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),s=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(i.appendChild(n),n.appendChild(this),this.style.display="block",t)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(r=this._gsapBBox());return s&&(o?s.insertBefore(this,o):s.appendChild(this)),i.removeChild(n),this.style.cssText=a,r},I=function(e,t){for(var r=t.length;r--;)if(e.hasAttribute(t[r]))return e.getAttribute(t[r])},z=function(e){var t;try{t=e.getBBox()}catch(r){t=D.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===D||(t=D.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+I(e,["x","cx","x1"])||0,y:+I(e,["y","cy","y1"])||0,width:0,height:0}},U=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!z(e))},B=function(e,t){if(t){var r=e.style;t in c&&t!==k&&(t=L),r.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),r.removeProperty(t.replace(m,"-$1").toLowerCase())):r.removeAttribute(t)}},V=function(e,t,r,n,s,i){var o=new h.PropTween(e._pt,t,r,0,1,i?E:j);return e._pt=o,o.b=n,o.e=s,e._props.push(r),o},G={deg:1,rad:1,turn:1},H=function e(t,r,n,i){var o,l,u,d,p=parseFloat(n)||0,f=(n+"").trim().substr((p+"").length)||"px",m=a.style,v=g.test(r),_="svg"===t.tagName.toLowerCase(),y=(_?"client":"offset")+(v?"Width":"Height"),b=100,w="px"===i,x="%"===i;return i===f||!p||G[i]||G[f]?p:("px"!==f&&!w&&(p=e(t,r,n,"px")),d=t.getCTM&&U(t),!x&&"%"!==f||!c[r]&&!~r.indexOf("adius")?(m[v?"width":"height"]=b+(w?f:i),l=~r.indexOf("adius")||"em"===i&&t.appendChild&&!_?t:t.parentNode,d&&(l=(t.ownerSVGElement||{}).parentNode),l&&l!==s&&l.appendChild||(l=s.body),(u=l._gsap)&&x&&u.width&&v&&u.time===h._ticker.time?(0,h._round)(p/u.width*b):((x||"%"===f)&&(m.position=R(t,"position")),l===t&&(m.position="static"),l.appendChild(a),o=a[y],l.removeChild(a),m.position="absolute",v&&x&&((u=(0,h._getCache)(l)).time=h._ticker.time,u.width=l[y]),(0,h._round)(w?o*p/b:o&&p?b/o*p:0))):(o=d?t.getBBox()[v?"width":"height"]:t[y],(0,h._round)(x?p/o*b:p/100*o)))},W=function(e,t,r,n){var s;return o||F(),t in _&&"transform"!==t&&~(t=_[t]).indexOf(",")&&(t=t.split(",")[0]),c[t]&&"transform"!==t?(s=ne(e,n),s="transformOrigin"!==t?s[t]:se(R(e,k))+" "+s.zOrigin+"px"):(!(s=e.style[t])||"auto"===s||n||~(s+"").indexOf("calc("))&&(s=Q[t]&&Q[t](e,t,r)||R(e,t)||(0,h._getProperty)(e,t)||("opacity"===t?1:0)),r&&!~(s+"").trim().indexOf(" ")?H(e,t,s,r)+r:s},X=function(e,t,r,n){if(!r||"none"===r){var s=q(t,e,1),i=s&&R(e,s,1);i&&i!==r?(t=s,r=i):"borderColor"===t&&(r=R(e,"borderTopColor"))}var o,a,l,u,c,d,p,f,m,g,v,_,y=new h.PropTween(this._pt,e.style,t,0,1,h._renderComplexString),b=0,w=0;if(y.b=r,y.e=n,r+="","auto"===(n+="")&&(e.style[t]=n,n=R(e,t)||n,e.style[t]=r),o=[r,n],(0,h._colorStringFilter)(o),n=o[1],l=(r=o[0]).match(h._numWithUnitExp)||[],(n.match(h._numWithUnitExp)||[]).length){for(;a=h._numWithUnitExp.exec(n);)p=a[0],m=n.substring(b,a.index),c?c=(c+1)%5:"rgba("!==m.substr(-5)&&"hsla("!==m.substr(-5)||(c=1),p!==(d=l[w++]||"")&&(u=parseFloat(d)||0,v=d.substr((u+"").length),(_="="===p.charAt(1)?+(p.charAt(0)+"1"):0)&&(p=p.substr(2)),f=parseFloat(p),g=p.substr((f+"").length),b=h._numWithUnitExp.lastIndex-g.length,g||(g=g||h._config.units[t]||v,b===n.length&&(n+=g,y.e+=g)),v!==g&&(u=H(e,t,d,g)||0),y._pt={_next:y._pt,p:m||1===w?m:",",s:u,c:_?_*f:f-u,m:c&&c<4||"zIndex"===t?Math.round:0});y.c=b<n.length?n.substring(b,n.length):""}else y.r="display"===t&&"none"===n?E:j;return h._relExp.test(n)&&(y.e=0),this._pt=y,y},Y={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},$=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var r,n,s,i=t.t,o=i.style,a=t.u,l=i._gsap;if("all"===a||!0===a)o.cssText="",n=1;else for(s=(a=a.split(",")).length;--s>-1;)r=a[s],c[r]&&(n=1,r="transformOrigin"===r?k:L),B(i,r);n&&(B(i,L),l&&(l.svg&&i.removeAttribute("transform"),ne(i,1),l.uncache=1))}},Q={clearProps:function(e,t,r,n,s){if("isFromStart"!==s.data){var i=e._pt=new h.PropTween(e._pt,t,r,0,0,$);return i.u=n,i.pr=-10,i.tween=s,e._props.push(r),1}}},Z=[1,0,0,1,0,0],J={},K=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},ee=function(e){var t=R(e,L);return K(t)?Z:t.substr(7).match(h._numExp).map(h._round)},te=function(e,t){var r,n,s,o,a=e._gsap||(0,h._getCache)(e),l=e.style,u=ee(e);return a.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(s=e.transform.baseVal.consolidate().matrix).a,s.b,s.c,s.d,s.e,s.f]).join(",")?Z:u:(u!==Z||e.offsetParent||e===i||a.svg||(s=l.display,l.display="block",(r=e.parentNode)&&e.offsetParent||(o=1,n=e.nextSibling,i.appendChild(e)),u=ee(e),s?l.display=s:B(e,"display"),o&&(n?r.insertBefore(e,n):r?r.appendChild(e):i.removeChild(e))),t&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},re=function(e,t,r,n,s,i){var o,a,l,u=e._gsap,h=s||te(e,!0),c=u.xOrigin||0,d=u.yOrigin||0,p=u.xOffset||0,f=u.yOffset||0,m=h[0],g=h[1],v=h[2],_=h[3],y=h[4],b=h[5],w=t.split(" "),x=parseFloat(w[0])||0,j=parseFloat(w[1])||0;r?h!==Z&&(a=m*_-g*v)&&(l=x*(-g/a)+j*(m/a)-(m*b-g*y)/a,x=x*(_/a)+j*(-v/a)+(v*b-_*y)/a,j=l):(x=(o=z(e)).x+(~w[0].indexOf("%")?x/100*o.width:x),j=o.y+(~(w[1]||w[0]).indexOf("%")?j/100*o.height:j)),n||!1!==n&&u.smooth?(y=x-c,b=j-d,u.xOffset=p+(y*m+b*v)-y,u.yOffset=f+(y*g+b*_)-b):u.xOffset=u.yOffset=0,u.xOrigin=x,u.yOrigin=j,u.smooth=!!n,u.origin=t,u.originIsAbsolute=!!r,e.style[k]="0px 0px",i&&(V(i,u,"xOrigin",c,x),V(i,u,"yOrigin",d,j),V(i,u,"xOffset",p,u.xOffset),V(i,u,"yOffset",f,u.yOffset)),e.setAttribute("data-svg-origin",x+" "+j)},ne=function(e,t){var r=e._gsap||new h.GSCache(e);if("x"in r&&!t&&!r.uncache)return r;var n,s,i,o,a,l,c,m,g,v,_,y,b,w,x,j,E,C,A,T,S,M,O,P,N,q,F,D,I,z,B,V,G=e.style,H=r.scaleX<0,W="px",X="deg",Y=R(e,k)||"0";return n=s=i=l=c=m=g=v=_=0,o=a=1,r.svg=!(!e.getCTM||!U(e)),w=te(e,r.svg),r.svg&&(P=!r.uncache&&!t&&e.getAttribute("data-svg-origin"),re(e,P||Y,!!P||r.originIsAbsolute,!1!==r.smooth,w)),y=r.xOrigin||0,b=r.yOrigin||0,w!==Z&&(C=w[0],A=w[1],T=w[2],S=w[3],n=M=w[4],s=O=w[5],6===w.length?(o=Math.sqrt(C*C+A*A),a=Math.sqrt(S*S+T*T),l=C||A?f(A,C)*d:0,(g=T||S?f(T,S)*d+l:0)&&(a*=Math.abs(Math.cos(g*p))),r.svg&&(n-=y-(y*C+b*T),s-=b-(y*A+b*S))):(V=w[6],z=w[7],F=w[8],D=w[9],I=w[10],B=w[11],n=w[12],s=w[13],i=w[14],c=(x=f(V,I))*d,x&&(P=M*(j=Math.cos(-x))+F*(E=Math.sin(-x)),N=O*j+D*E,q=V*j+I*E,F=M*-E+F*j,D=O*-E+D*j,I=V*-E+I*j,B=z*-E+B*j,M=P,O=N,V=q),m=(x=f(-T,I))*d,x&&(j=Math.cos(-x),B=S*(E=Math.sin(-x))+B*j,C=P=C*j-F*E,A=N=A*j-D*E,T=q=T*j-I*E),l=(x=f(A,C))*d,x&&(P=C*(j=Math.cos(x))+A*(E=Math.sin(x)),N=M*j+O*E,A=A*j-C*E,O=O*j-M*E,C=P,M=N),c&&Math.abs(c)+Math.abs(l)>359.9&&(c=l=0,m=180-m),o=(0,h._round)(Math.sqrt(C*C+A*A+T*T)),a=(0,h._round)(Math.sqrt(O*O+V*V)),x=f(M,O),g=Math.abs(x)>2e-4?x*d:0,_=B?1/(B<0?-B:B):0),r.svg&&(P=e.getAttribute("transform"),r.forceCSS=e.setAttribute("transform","")||!K(R(e,L)),P&&e.setAttribute("transform",P))),Math.abs(g)>90&&Math.abs(g)<270&&(H?(o*=-1,g+=l<=0?180:-180,l+=l<=0?180:-180):(a*=-1,g+=g<=0?180:-180)),r.x=n-((r.xPercent=n&&(r.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-n)?-50:0)))?e.offsetWidth*r.xPercent/100:0)+W,r.y=s-((r.yPercent=s&&(r.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-s)?-50:0)))?e.offsetHeight*r.yPercent/100:0)+W,r.z=i+W,r.scaleX=(0,h._round)(o),r.scaleY=(0,h._round)(a),r.rotation=(0,h._round)(l)+X,r.rotationX=(0,h._round)(c)+X,r.rotationY=(0,h._round)(m)+X,r.skewX=g+X,r.skewY=v+X,r.transformPerspective=_+W,(r.zOrigin=parseFloat(Y.split(" ")[2])||0)&&(G[k]=se(Y)),r.xOffset=r.yOffset=0,r.force3D=h._config.force3D,r.renderTransform=r.svg?ce:u?he:oe,r.uncache=0,r},se=function(e){return(e=e.split(" "))[0]+" "+e[1]},ie=function(e,t,r){var n=(0,h.getUnit)(t);return(0,h._round)(parseFloat(t)+parseFloat(H(e,"x",r+"px",n)))+n},oe=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,he(e,t)},ae="0deg",le="0px",ue=") ",he=function(e,t){var r=t||this,n=r.xPercent,s=r.yPercent,i=r.x,o=r.y,a=r.z,l=r.rotation,u=r.rotationY,h=r.rotationX,c=r.skewX,d=r.skewY,f=r.scaleX,m=r.scaleY,g=r.transformPerspective,v=r.force3D,_=r.target,y=r.zOrigin,b="",w="auto"===v&&e&&1!==e||!0===v;if(y&&(h!==ae||u!==ae)){var x,j=parseFloat(u)*p,E=Math.sin(j),C=Math.cos(j);j=parseFloat(h)*p,x=Math.cos(j),i=ie(_,i,E*x*-y),o=ie(_,o,-Math.sin(j)*-y),a=ie(_,a,C*x*-y+y)}g!==le&&(b+="perspective("+g+ue),(n||s)&&(b+="translate("+n+"%, "+s+"%) "),(w||i!==le||o!==le||a!==le)&&(b+=a!==le||w?"translate3d("+i+", "+o+", "+a+") ":"translate("+i+", "+o+ue),l!==ae&&(b+="rotate("+l+ue),u!==ae&&(b+="rotateY("+u+ue),h!==ae&&(b+="rotateX("+h+ue),c===ae&&d===ae||(b+="skew("+c+", "+d+ue),1===f&&1===m||(b+="scale("+f+", "+m+ue),_.style[L]=b||"translate(0, 0)"},ce=function(e,t){var r,n,s,i,o,a=t||this,l=a.xPercent,u=a.yPercent,c=a.x,d=a.y,f=a.rotation,m=a.skewX,g=a.skewY,v=a.scaleX,_=a.scaleY,y=a.target,b=a.xOrigin,w=a.yOrigin,x=a.xOffset,j=a.yOffset,E=a.forceCSS,C=parseFloat(c),A=parseFloat(d);f=parseFloat(f),m=parseFloat(m),(g=parseFloat(g))&&(m+=g=parseFloat(g),f+=g),f||m?(f*=p,m*=p,r=Math.cos(f)*v,n=Math.sin(f)*v,s=Math.sin(f-m)*-_,i=Math.cos(f-m)*_,m&&(g*=p,o=Math.tan(m-g),s*=o=Math.sqrt(1+o*o),i*=o,g&&(o=Math.tan(g),r*=o=Math.sqrt(1+o*o),n*=o)),r=(0,h._round)(r),n=(0,h._round)(n),s=(0,h._round)(s),i=(0,h._round)(i)):(r=v,i=_,n=s=0),(C&&!~(c+"").indexOf("px")||A&&!~(d+"").indexOf("px"))&&(C=H(y,"x",c,"px"),A=H(y,"y",d,"px")),(b||w||x||j)&&(C=(0,h._round)(C+b-(b*r+w*s)+x),A=(0,h._round)(A+w-(b*n+w*i)+j)),(l||u)&&(o=y.getBBox(),C=(0,h._round)(C+l/100*o.width),A=(0,h._round)(A+u/100*o.height)),o="matrix("+r+","+n+","+s+","+i+","+C+","+A+")",y.setAttribute("transform",o),E&&(y.style[L]=o)},de=function(e,t,r,n,s,i){var o,a,l=360,u=(0,h._isString)(s),c=parseFloat(s)*(u&&~s.indexOf("rad")?d:1),p=i?c*i:c-n,f=n+p+"deg";return u&&("short"===(o=s.split("_")[1])&&(p%=l)!==p%180&&(p+=p<0?l:-360),"cw"===o&&p<0?p=(p+36e9)%l-~~(p/l)*l:"ccw"===o&&p>0&&(p=(p-36e9)%l-~~(p/l)*l)),e._pt=a=new h.PropTween(e._pt,t,r,n,p,b),a.e=f,a.u="deg",e._props.push(r),a},pe=function(e,t){for(var r in t)e[r]=t[r];return e},fe=function(e,t,r){var n,s,i,o,a,l,u,d=pe({},r._gsap),p=r.style;for(s in d.svg?(i=r.getAttribute("transform"),r.setAttribute("transform",""),p[L]=t,n=ne(r,1),B(r,L),r.setAttribute("transform",i)):(i=getComputedStyle(r)[L],p[L]=t,n=ne(r,1),p[L]=i),c)(i=d[s])!==(o=n[s])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(s)<0&&(a=(0,h.getUnit)(i)!==(u=(0,h.getUnit)(o))?H(r,s,i,u):parseFloat(i),l=parseFloat(o),e._pt=new h.PropTween(e._pt,n,s,a,l-a,y),e._pt.u=u||0,e._props.push(s));pe(n,d)};(0,h._forEachName)("padding,margin,Width,Radius",(function(e,t){var r="Top",n="Right",s="Bottom",i="Left",o=(t<3?[r,n,s,i]:[r+i,r+n,s+n,s+i]).map((function(r){return t<2?e+r:"border"+r+e}));Q[t>1?"border"+e:e]=function(e,t,r,n,s){var i,a;if(arguments.length<4)return i=o.map((function(t){return W(e,t,r)})),5===(a=i.join(" ")).split(i[0]).length?i[0]:a;i=(n+"").split(" "),a={},o.forEach((function(e,t){return a[e]=i[t]=i[t]||i[(t-1)/2|0]})),e.init(t,a,s)}}));var me,ge,ve,_e={name:"css",register:F,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,r,n,s){var i,a,l,u,d,p,f,m,g,b,j,E,C,A,T,S,M,O,k,P=this._props,R=e.style,N=r.vars.startAt;for(f in o||F(),t)if("autoRound"!==f&&(a=t[f],!h._plugins[f]||!(0,h._checkPlugin)(f,t,r,n,e,s)))if(d=typeof a,p=Q[f],"function"===d&&(d=typeof(a=a.call(r,n,e,s))),"string"===d&&~a.indexOf("random(")&&(a=(0,h._replaceRandom)(a)),p)p(this,e,f,a,r)&&(T=1);else if("--"===f.substr(0,2))i=(getComputedStyle(e).getPropertyValue(f)+"").trim(),a+="",h._colorExp.lastIndex=0,h._colorExp.test(i)||(m=(0,h.getUnit)(i),g=(0,h.getUnit)(a)),g?m!==g&&(i=H(e,f,i,g)+g):m&&(a+=m),this.add(R,"setProperty",i,a,n,s,0,0,f);else if("undefined"!==d){if(N&&f in N?(i="function"==typeof N[f]?N[f].call(r,n,e,s):N[f],f in h._config.units&&!(0,h.getUnit)(i)&&(i+=h._config.units[f]),"="===(i+"").charAt(1)&&(i=W(e,f))):i=W(e,f),u=parseFloat(i),(b="string"===d&&"="===a.charAt(1)?+(a.charAt(0)+"1"):0)&&(a=a.substr(2)),l=parseFloat(a),f in _&&("autoAlpha"===f&&(1===u&&"hidden"===W(e,"visibility")&&l&&(u=0),V(this,R,"visibility",u?"inherit":"hidden",l?"inherit":"hidden",!l)),"scale"!==f&&"transform"!==f&&~(f=_[f]).indexOf(",")&&(f=f.split(",")[0])),j=f in c)if(E||((C=e._gsap).renderTransform&&!t.parseTransform||ne(e,t.parseTransform),A=!1!==t.smoothOrigin&&C.smooth,(E=this._pt=new h.PropTween(this._pt,R,L,0,1,C.renderTransform,C,0,-1)).dep=1),"scale"===f)this._pt=new h.PropTween(this._pt,C,"scaleY",C.scaleY,b?b*l:l-C.scaleY),P.push("scaleY",f),f+="X";else{if("transformOrigin"===f){M=void 0,O=void 0,k=void 0,M=(S=a).split(" "),O=M[0],k=M[1]||"50%","top"!==O&&"bottom"!==O&&"left"!==k&&"right"!==k||(S=O,O=k,k=S),M[0]=Y[O]||O,M[1]=Y[k]||k,a=M.join(" "),C.svg?re(e,a,0,A,0,this):((g=parseFloat(a.split(" ")[2])||0)!==C.zOrigin&&V(this,C,"zOrigin",C.zOrigin,g),V(this,R,f,se(i),se(a)));continue}if("svgOrigin"===f){re(e,a,1,A,0,this);continue}if(f in J){de(this,C,f,u,a,b);continue}if("smoothOrigin"===f){V(this,C,"smooth",C.smooth,a);continue}if("force3D"===f){C[f]=a;continue}if("transform"===f){fe(this,a,e);continue}}else f in R||(f=q(f)||f);if(j||(l||0===l)&&(u||0===u)&&!v.test(a)&&f in R)l||(l=0),(m=(i+"").substr((u+"").length))!==(g=(0,h.getUnit)(a)||(f in h._config.units?h._config.units[f]:m))&&(u=H(e,f,i,g)),this._pt=new h.PropTween(this._pt,j?C:R,f,u,b?b*l:l-u,j||"px"!==g&&"zIndex"!==f||!1===t.autoRound?y:x),this._pt.u=g||0,m!==g&&(this._pt.b=i,this._pt.r=w);else if(f in R)X.call(this,e,f,i,a);else{if(!(f in e)){(0,h._missingPlugin)(f,a);continue}this.add(e,f,e[f],a,n,s)}P.push(f)}T&&(0,h._sortPropTweensByPriority)(this)},get:W,aliases:_,getSetter:function(e,t,r){var n=_[t];return n&&n.indexOf(",")<0&&(t=n),t in c&&t!==k&&(e._gsap.x||W(e,"x"))?r&&l===r?"scale"===t?S:T:(l=r||{})&&("scale"===t?M:O):e.style&&!(0,h._isUndefined)(e.style[t])?C:~t.indexOf("-")?A:(0,h._getSetter)(e,t)},core:{_removeProperty:B,_getMatrix:te}};h.gsap.utils.checkPrefix=q,me="x,y,z,scale,scaleX,scaleY,xPercent,yPercent",ge="rotation,rotationX,rotationY,skewX,skewY",ve=(0,h._forEachName)(me+","+ge+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){c[e]=1})),(0,h._forEachName)(ge,(function(e){h._config.units[e]="deg",J[e]=1})),_[ve[13]]=me+","+ge,(0,h._forEachName)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");_[t[1]]=ve[t[0]]})),(0,h._forEachName)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){h._config.units[e]="px"})),h.gsap.registerPlugin(_e)},"./node_modules/gsap/gsap-core.js":(e,t,r)=>{"use strict";function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function s(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}r.r(t),r.d(t,{GSCache:()=>Zt,Animation:()=>Jt,Timeline:()=>Kt,Tween:()=>lr,PropTween:()=>xr,gsap:()=>Ar,Power0:()=>Tr,Power1:()=>Sr,Power2:()=>Mr,Power3:()=>Or,Power4:()=>Lr,Linear:()=>kr,Quad:()=>Pr,Cubic:()=>Rr,Quart:()=>Nr,Quint:()=>qr,Strong:()=>Fr,Elastic:()=>Dr,Back:()=>Ir,SteppedEase:()=>zr,Bounce:()=>Ur,Sine:()=>Br,Expo:()=>Vr,Circ:()=>Gr,TweenMax:()=>lr,TweenLite:()=>lr,TimelineMax:()=>Kt,TimelineLite:()=>Kt,default:()=>Ar,wrap:()=>bt,wrapYoyo:()=>wt,distribute:()=>dt,random:()=>mt,snap:()=>ft,normalize:()=>_t,getUnit:()=>it,clamp:()=>ot,splitColor:()=>kt,toArray:()=>ht,mapRange:()=>jt,pipe:()=>gt,unitize:()=>vt,interpolate:()=>Et,shuffle:()=>ct,_getProperty:()=>je,_numExp:()=>ee,_numWithUnitExp:()=>te,_isString:()=>V,_isUndefined:()=>W,_renderComplexString:()=>gr,_relExp:()=>ne,_setDefaults:()=>ke,_removeLinkedListItem:()=>De,_forEachName:()=>Ee,_sortPropTweensByPriority:()=>wr,_colorStringFilter:()=>Ft,_replaceRandom:()=>xt,_checkPlugin:()=>nr,_plugins:()=>ge,_ticker:()=>Dt,_config:()=>P,_roundModifier:()=>pt,_round:()=>Ce,_missingPlugin:()=>ue,_getSetter:()=>pr,_getCache:()=>xe,_colorExp:()=>Nt});var i,o,a,l,u,h,c,d,p,f,m,g,v,_,y,b,w,x,j,E,C,A,T,S,M,O,L,k,P={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},R={duration:.5,overwrite:!1,delay:0},N=1e8,q=1e-8,F=2*Math.PI,D=F/4,I=0,z=Math.sqrt,U=Math.cos,B=Math.sin,V=function(e){return"string"==typeof e},G=function(e){return"function"==typeof e},H=function(e){return"number"==typeof e},W=function(e){return void 0===e},X=function(e){return"object"==typeof e},Y=function(e){return!1!==e},$=function(){return"undefined"!=typeof window},Q=function(e){return G(e)||V(e)},Z="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},J=Array.isArray,K=/(?:-?\.?\d|\.)+/gi,ee=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,te=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,re=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,ne=/[+-]=-?[.\d]+/,se=/[#\-+.]*\b[a-z\d-=+%.]+/gi,ie=/[\d.+\-=]+(?:e[-+]\d*)*/i,oe={},ae={},le=function(e){return(ae=Re(e,oe))&&Ar},ue=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},he=function(e,t){return!t&&console.warn(e)},ce=function(e,t){return e&&(oe[e]=t)&&ae&&(ae[e]=t)||oe},de=function(){return 0},pe={},fe=[],me={},ge={},ve={},_e=30,ye=[],be="",we=function(e){var t,r,n=e[0];if(X(n)||G(n)||(e=[e]),!(t=(n._gsap||{}).harness)){for(r=ye.length;r--&&!ye[r].targetTest(n););t=ye[r]}for(r=e.length;r--;)e[r]&&(e[r]._gsap||(e[r]._gsap=new Zt(e[r],t)))||e.splice(r,1);return e},xe=function(e){return e._gsap||we(ht(e))[0]._gsap},je=function(e,t,r){return(r=e[t])&&G(r)?e[t]():W(r)&&e.getAttribute&&e.getAttribute(t)||r},Ee=function(e,t){return(e=e.split(",")).forEach(t)||e},Ce=function(e){return Math.round(1e5*e)/1e5||0},Ae=function(e,t){for(var r=t.length,n=0;e.indexOf(t[n])<0&&++n<r;);return n<r},Te=function(e,t,r){var n,s=H(e[1]),i=(s?2:1)+(t<2?0:1),o=e[i];if(s&&(o.duration=e[1]),o.parent=r,t){for(n=o;r&&!("immediateRender"in n);)n=r.vars.defaults||{},r=Y(r.vars.inherit)&&r.parent;o.immediateRender=Y(n.immediateRender),t<2?o.runBackwards=1:o.startAt=e[i-1]}return o},Se=function(){var e,t,r=fe.length,n=fe.slice(0);for(me={},fe.length=0,e=0;e<r;e++)(t=n[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},Me=function(e,t,r,n){fe.length&&Se(),e.render(t,r,n),fe.length&&Se()},Oe=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(se).length<2?t:V(e)?e.trim():e},Le=function(e){return e},ke=function(e,t){for(var r in t)r in e||(e[r]=t[r]);return e},Pe=function(e,t){for(var r in t)r in e||"duration"===r||"ease"===r||(e[r]=t[r])},Re=function(e,t){for(var r in t)e[r]=t[r];return e},Ne=function e(t,r){for(var n in r)"__proto__"!==n&&"constructor"!==n&&"prototype"!==n&&(t[n]=X(r[n])?e(t[n]||(t[n]={}),r[n]):r[n]);return t},qe=function(e,t){var r,n={};for(r in e)r in t||(n[r]=e[r]);return n},Fe=function(e){var t=e.parent||o,r=e.keyframes?Pe:ke;if(Y(e.inherit))for(;t;)r(e,t.vars.defaults),t=t.parent||t._dp;return e},De=function(e,t,r,n){void 0===r&&(r="_first"),void 0===n&&(n="_last");var s=t._prev,i=t._next;s?s._next=i:e[r]===t&&(e[r]=i),i?i._prev=s:e[n]===t&&(e[n]=s),t._next=t._prev=t.parent=null},Ie=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},ze=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var r=e;r;)r._dirty=1,r=r.parent;return e},Ue=function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e},Be=function e(t){return!t||t._ts&&e(t.parent)},Ve=function(e){return e._repeat?Ge(e._tTime,e=e.duration()+e._rDelay)*e:0},Ge=function(e,t){var r=Math.floor(e/=t);return e&&r===e?r-1:r},He=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},We=function(e){return e._end=Ce(e._start+(e._tDur/Math.abs(e._ts||e._rts||q)||0))},Xe=function(e,t){var r=e._dp;return r&&r.smoothChildTiming&&e._ts&&(e._start=Ce(r._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),We(e),r._dirty||ze(r,e)),e},Ye=function(e,t){var r;if((t._time||t._initted&&!t._dur)&&(r=He(e.rawTime(),t),(!t._dur||st(0,t.totalDuration(),r)-t._tTime>q)&&t.render(r,!0)),ze(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(r=e;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;e._zTime=-1e-8}},$e=function(e,t,r,n){return t.parent&&Ie(t),t._start=Ce(r+t._delay),t._end=Ce(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),function(e,t,r,n,s){void 0===r&&(r="_first"),void 0===n&&(n="_last");var i,o=e[n];if(s)for(i=t[s];o&&o[s]>i;)o=o._prev;o?(t._next=o._next,o._next=t):(t._next=e[r],e[r]=t),t._next?t._next._prev=t:e[n]=t,t._prev=o,t.parent=t._dp=e}(e,t,"_first","_last",e._sort?"_start":0),e._recent=t,n||Ye(e,t),e},Qe=function(e,t){return(oe.ScrollTrigger||ue("scrollTrigger",t))&&oe.ScrollTrigger.create(t,e)},Ze=function(e,t,r,n){return sr(e,t),e._initted?!r&&e._pt&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&c!==Dt.frame?(fe.push(e),e._lazy=[t,n],1):void 0:1},Je=function e(t){var r=t.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||e(r))},Ke=function(e,t,r,n){var s=e._repeat,i=Ce(t)||0,o=e._tTime/e._tDur;return o&&!n&&(e._time*=i/e._dur),e._dur=i,e._tDur=s?s<0?1e10:Ce(i*(s+1)+e._rDelay*s):i,o&&!n?Xe(e,e._tTime=e._tDur*o):e.parent&&We(e),r||ze(e.parent,e),e},et=function(e){return e instanceof Kt?ze(e):Ke(e,e._dur)},tt={_start:0,endTime:de},rt=function e(t,r){var n,s,i=t.labels,o=t._recent||tt,a=t.duration()>=N?o.endTime(!1):t._dur;return V(r)&&(isNaN(r)||r in i)?"<"===(n=r.charAt(0))||">"===n?("<"===n?o._start:o.endTime(o._repeat>=0))+(parseFloat(r.substr(1))||0):(n=r.indexOf("="))<0?(r in i||(i[r]=a),i[r]):(s=+(r.charAt(n-1)+r.substr(n+1)),n>1?e(t,r.substr(0,n-1))+s:a+s):null==r?a:+r},nt=function(e,t){return e||0===e?t(e):t},st=function(e,t,r){return r<e?e:r>t?t:r},it=function(e){if("string"!=typeof e)return"";var t=ie.exec(e);return t?e.substr(t.index+t[0].length):""},ot=function(e,t,r){return nt(r,(function(r){return st(e,t,r)}))},at=[].slice,lt=function(e,t){return e&&X(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&X(e[0]))&&!e.nodeType&&e!==a},ut=function(e,t,r){return void 0===r&&(r=[]),e.forEach((function(e){var n;return V(e)&&!t||lt(e,1)?(n=r).push.apply(n,ht(e)):r.push(e)}))||r},ht=function(e,t){return!V(e)||t||!l&&It()?J(e)?ut(e,t):lt(e)?at.call(e,0):e?[e]:[]:at.call(u.querySelectorAll(e),0)},ct=function(e){return e.sort((function(){return.5-Math.random()}))},dt=function(e){if(G(e))return e;var t=X(e)?e:{each:e},r=Wt(t.ease),n=t.from||0,s=parseFloat(t.base)||0,i={},o=n>0&&n<1,a=isNaN(n)||o,l=t.axis,u=n,h=n;return V(n)?u=h={center:.5,edges:.5,end:1}[n]||0:!o&&a&&(u=n[0],h=n[1]),function(e,o,c){var d,p,f,m,g,v,_,y,b,w=(c||t).length,x=i[w];if(!x){if(!(b="auto"===t.grid?0:(t.grid||[1,N])[1])){for(_=-N;_<(_=c[b++].getBoundingClientRect().left)&&b<w;);b--}for(x=i[w]=[],d=a?Math.min(b,w)*u-.5:n%b,p=a?w*h/b-.5:n/b|0,_=0,y=N,v=0;v<w;v++)f=v%b-d,m=p-(v/b|0),x[v]=g=l?Math.abs("y"===l?m:f):z(f*f+m*m),g>_&&(_=g),g<y&&(y=g);"random"===n&&ct(x),x.max=_-y,x.min=y,x.v=w=(parseFloat(t.amount)||parseFloat(t.each)*(b>w?w-1:l?"y"===l?w/b:b:Math.max(b,w/b))||0)*("edges"===n?-1:1),x.b=w<0?s-w:s,x.u=it(t.amount||t.each)||0,r=r&&w<0?Gt(r):r}return w=(x[e]-x.min)/x.max||0,Ce(x.b+(r?r(w):w)*x.v)+x.u}},pt=function(e){var t=e<1?Math.pow(10,(e+"").length-2):1;return function(r){var n=Math.round(parseFloat(r)/e)*e*t;return(n-n%1)/t+(H(r)?0:it(r))}},ft=function(e,t){var r,n,s=J(e);return!s&&X(e)&&(r=s=e.radius||N,e.values?(e=ht(e.values),(n=!H(e[0]))&&(r*=r)):e=pt(e.increment)),nt(t,s?G(e)?function(t){return n=e(t),Math.abs(n-t)<=r?n:t}:function(t){for(var s,i,o=parseFloat(n?t.x:t),a=parseFloat(n?t.y:0),l=N,u=0,h=e.length;h--;)(s=n?(s=e[h].x-o)*s+(i=e[h].y-a)*i:Math.abs(e[h]-o))<l&&(l=s,u=h);return u=!r||l<=r?e[u]:t,n||u===t||H(t)?u:u+it(t)}:pt(e))},mt=function(e,t,r,n){return nt(J(e)?!t:!0===r?!!(r=0):!n,(function(){return J(e)?e[~~(Math.random()*e.length)]:(r=r||1e-5)&&(n=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((e-r/2+Math.random()*(t-e+.99*r))/r)*r*n)/n}))},gt=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},vt=function(e,t){return function(r){return e(parseFloat(r))+(t||it(r))}},_t=function(e,t,r){return jt(e,t,0,1,r)},yt=function(e,t,r){return nt(r,(function(r){return e[~~t(r)]}))},bt=function e(t,r,n){var s=r-t;return J(t)?yt(t,e(0,t.length),r):nt(n,(function(e){return(s+(e-t)%s)%s+t}))},wt=function e(t,r,n){var s=r-t,i=2*s;return J(t)?yt(t,e(0,t.length-1),r):nt(n,(function(e){return t+((e=(i+(e-t)%i)%i||0)>s?i-e:e)}))},xt=function(e){for(var t,r,n,s,i=0,o="";~(t=e.indexOf("random(",i));)n=e.indexOf(")",t),s="["===e.charAt(t+7),r=e.substr(t+7,n-t-7).match(s?se:K),o+=e.substr(i,t-i)+mt(s?r:+r[0],s?0:+r[1],+r[2]||1e-5),i=n+1;return o+e.substr(i,e.length-i)},jt=function(e,t,r,n,s){var i=t-e,o=n-r;return nt(s,(function(t){return r+((t-e)/i*o||0)}))},Et=function e(t,r,n,s){var i=isNaN(t+r)?0:function(e){return(1-e)*t+e*r};if(!i){var o,a,l,u,h,c=V(t),d={};if(!0===n&&(s=1)&&(n=null),c)t={p:t},r={p:r};else if(J(t)&&!J(r)){for(l=[],u=t.length,h=u-2,a=1;a<u;a++)l.push(e(t[a-1],t[a]));u--,i=function(e){e*=u;var t=Math.min(h,~~e);return l[t](e-t)},n=r}else s||(t=Re(J(t)?[]:{},t));if(!l){for(o in r)rr.call(d,t,o,"get",r[o]);i=function(e){return vr(e,d)||(c?t.p:t)}}}return nt(n,i)},Ct=function(e,t,r){var n,s,i,o=e.labels,a=N;for(n in o)(s=o[n]-t)<0==!!r&&s&&a>(s=Math.abs(s))&&(i=n,a=s);return i},At=function(e,t,r){var n,s,i=e.vars,o=i[t];if(o)return n=i[t+"Params"],s=i.callbackScope||e,r&&fe.length&&Se(),n?o.apply(s,n):o.call(s)},Tt=function(e){return Ie(e),e.scrollTrigger&&e.scrollTrigger.kill(!1),e.progress()<1&&At(e,"onInterrupt"),e},St=function(e){var t=(e=!e.name&&e.default||e).name,r=G(e),n=t&&!r&&e.init?function(){this._props=[]}:e,s={init:de,render:vr,add:rr,kill:yr,modifier:_r,rawVars:0},i={targetTest:0,get:0,getSetter:pr,aliases:{},register:0};if(It(),e!==n){if(ge[t])return;ke(n,ke(qe(e,s),i)),Re(n.prototype,Re(s,qe(e,i))),ge[n.prop=t]=n,e.targetTest&&(ye.push(n),pe[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}ce(t,n),e.register&&e.register(Ar,n,xr)},Mt=255,Ot={aqua:[0,Mt,Mt],lime:[0,Mt,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Mt],navy:[0,0,128],white:[Mt,Mt,Mt],olive:[128,128,0],yellow:[Mt,Mt,0],orange:[Mt,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Mt,0,0],pink:[Mt,192,203],cyan:[0,Mt,Mt],transparent:[Mt,Mt,Mt,0]},Lt=function(e,t,r){return(6*(e=e<0?e+1:e>1?e-1:e)<1?t+(r-t)*e*6:e<.5?r:3*e<2?t+(r-t)*(2/3-e)*6:t)*Mt+.5|0},kt=function(e,t,r){var n,s,i,o,a,l,u,h,c,d,p=e?H(e)?[e>>16,e>>8&Mt,e&Mt]:0:Ot.black;if(!p){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),Ot[e])p=Ot[e];else if("#"===e.charAt(0)){if(e.length<6&&(n=e.charAt(1),s=e.charAt(2),i=e.charAt(3),e="#"+n+n+s+s+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(p=parseInt(e.substr(1,6),16))>>16,p>>8&Mt,p&Mt,parseInt(e.substr(7),16)/255];p=[(e=parseInt(e.substr(1),16))>>16,e>>8&Mt,e&Mt]}else if("hsl"===e.substr(0,3))if(p=d=e.match(K),t){if(~e.indexOf("="))return p=e.match(ee),r&&p.length<4&&(p[3]=1),p}else o=+p[0]%360/360,a=+p[1]/100,n=2*(l=+p[2]/100)-(s=l<=.5?l*(a+1):l+a-l*a),p.length>3&&(p[3]*=1),p[0]=Lt(o+1/3,n,s),p[1]=Lt(o,n,s),p[2]=Lt(o-1/3,n,s);else p=e.match(K)||Ot.transparent;p=p.map(Number)}return t&&!d&&(n=p[0]/Mt,s=p[1]/Mt,i=p[2]/Mt,l=((u=Math.max(n,s,i))+(h=Math.min(n,s,i)))/2,u===h?o=a=0:(c=u-h,a=l>.5?c/(2-u-h):c/(u+h),o=u===n?(s-i)/c+(s<i?6:0):u===s?(i-n)/c+2:(n-s)/c+4,o*=60),p[0]=~~(o+.5),p[1]=~~(100*a+.5),p[2]=~~(100*l+.5)),r&&p.length<4&&(p[3]=1),p},Pt=function(e){var t=[],r=[],n=-1;return e.split(Nt).forEach((function(e){var s=e.match(te)||[];t.push.apply(t,s),r.push(n+=s.length+1)})),t.c=r,t},Rt=function(e,t,r){var n,s,i,o,a="",l=(e+a).match(Nt),u=t?"hsla(":"rgba(",h=0;if(!l)return e;if(l=l.map((function(e){return(e=kt(e,t,1))&&u+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),r&&(i=Pt(e),(n=r.c).join(a)!==i.c.join(a)))for(o=(s=e.replace(Nt,"1").split(te)).length-1;h<o;h++)a+=s[h]+(~n.indexOf(h)?l.shift()||u+"0,0,0,0)":(i.length?i:l.length?l:r).shift());if(!s)for(o=(s=e.split(Nt)).length-1;h<o;h++)a+=s[h]+l[h];return a+s[o]},Nt=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in Ot)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),qt=/hsl[a]?\(/,Ft=function(e){var t,r=e.join(" ");if(Nt.lastIndex=0,Nt.test(r))return t=qt.test(r),e[1]=Rt(e[1],t),e[0]=Rt(e[0],t,Pt(e[1])),!0},Dt=(b=Date.now,w=500,x=33,j=b(),E=j,A=C=1e3/240,S=function e(t){var r,n,s,i,o=b()-E,a=!0===t;if(o>w&&(j+=o-x),((r=(s=(E+=o)-j)-A)>0||a)&&(i=++v.frame,_=s-1e3*v.time,v.time=s/=1e3,A+=r+(r>=C?4:C-r),n=1),a||(f=m(e)),n)for(y=0;y<T.length;y++)T[y](s,_,i,t)},v={time:0,frame:0,tick:function(){S(!0)},deltaRatio:function(e){return _/(1e3/(e||60))},wake:function(){h&&(!l&&$()&&(a=l=window,u=a.document||{},oe.gsap=Ar,(a.gsapVersions||(a.gsapVersions=[])).push(Ar.version),le(ae||a.GreenSockGlobals||!a.gsap&&a||{}),g=a.requestAnimationFrame),f&&v.sleep(),m=g||function(e){return setTimeout(e,A-1e3*v.time+1|0)},p=1,S(2))},sleep:function(){(g?a.cancelAnimationFrame:clearTimeout)(f),p=0,m=de},lagSmoothing:function(e,t){w=e||1e8,x=Math.min(t,w,0)},fps:function(e){C=1e3/(e||240),A=1e3*v.time+C},add:function(e){T.indexOf(e)<0&&T.push(e),It()},remove:function(e){var t;~(t=T.indexOf(e))&&T.splice(t,1)&&y>=t&&y--},_listeners:T=[]}),It=function(){return!p&&Dt.wake()},zt={},Ut=/^[\d.\-M][\d.\-,\s]/,Bt=/["']/g,Vt=function(e){for(var t,r,n,s={},i=e.substr(1,e.length-3).split(":"),o=i[0],a=1,l=i.length;a<l;a++)r=i[a],t=a!==l-1?r.lastIndexOf(","):r.length,n=r.substr(0,t),s[o]=isNaN(n)?n.replace(Bt,"").trim():+n,o=r.substr(t+1).trim();return s},Gt=function(e){return function(t){return 1-e(1-t)}},Ht=function e(t,r){for(var n,s=t._first;s;)s instanceof Kt?e(s,r):!s.vars.yoyoEase||s._yoyo&&s._repeat||s._yoyo===r||(s.timeline?e(s.timeline,r):(n=s._ease,s._ease=s._yEase,s._yEase=n,s._yoyo=r)),s=s._next},Wt=function(e,t){return e&&(G(e)?e:zt[e]||function(e){var t,r,n,s,i=(e+"").split("("),o=zt[i[0]];return o&&i.length>1&&o.config?o.config.apply(null,~e.indexOf("{")?[Vt(i[1])]:(t=e,r=t.indexOf("(")+1,n=t.indexOf(")"),s=t.indexOf("(",r),t.substring(r,~s&&s<n?t.indexOf(")",n+1):n)).split(",").map(Oe)):zt._CE&&Ut.test(e)?zt._CE("",e):o}(e))||t},Xt=function(e,t,r,n){void 0===r&&(r=function(e){return 1-t(1-e)}),void 0===n&&(n=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var s,i={easeIn:t,easeOut:r,easeInOut:n};return Ee(e,(function(e){for(var t in zt[e]=oe[e]=i,zt[s=e.toLowerCase()]=r,i)zt[s+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=zt[e+"."+t]=i[t]})),i},Yt=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},$t=function e(t,r,n){var s=r>=1?r:1,i=(n||(t?.3:.45))/(r<1?r:1),o=i/F*(Math.asin(1/s)||0),a=function(e){return 1===e?1:s*Math.pow(2,-10*e)*B((e-o)*i)+1},l="out"===t?a:"in"===t?function(e){return 1-a(1-e)}:Yt(a);return i=F/i,l.config=function(r,n){return e(t,r,n)},l},Qt=function e(t,r){void 0===r&&(r=1.70158);var n=function(e){return e?--e*e*((r+1)*e+r)+1:0},s="out"===t?n:"in"===t?function(e){return 1-n(1-e)}:Yt(n);return s.config=function(r){return e(t,r)},s};Ee("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var r=t<5?t+1:t;Xt(e+",Power"+(r-1),t?function(e){return Math.pow(e,r)}:function(e){return e},(function(e){return 1-Math.pow(1-e,r)}),(function(e){return e<.5?Math.pow(2*e,r)/2:1-Math.pow(2*(1-e),r)/2}))})),zt.Linear.easeNone=zt.none=zt.Linear.easeIn,Xt("Elastic",$t("in"),$t("out"),$t()),M=7.5625,L=1/(O=2.75),Xt("Bounce",(function(e){return 1-k(1-e)}),k=function(e){return e<L?M*e*e:e<.7272727272727273?M*Math.pow(e-1.5/O,2)+.75:e<.9090909090909092?M*(e-=2.25/O)*e+.9375:M*Math.pow(e-2.625/O,2)+.984375}),Xt("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Xt("Circ",(function(e){return-(z(1-e*e)-1)})),Xt("Sine",(function(e){return 1===e?1:1-U(e*D)})),Xt("Back",Qt("in"),Qt("out"),Qt()),zt.SteppedEase=zt.steps=oe.SteppedEase={config:function(e,t){void 0===e&&(e=1);var r=1/e,n=e+(t?0:1),s=t?1:0;return function(e){return((n*st(0,.99999999,e)|0)+s)*r}}},R.ease=zt["quad.out"],Ee("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return be+=e+","+e+"Params,"}));var Zt=function(e,t){this.id=I++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:je,this.set=t?t.getSetter:pr},Jt=function(){function e(e,t){var r=e.parent||o;this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Ke(this,+e.duration,1,1),this.data=e.data,p||Dt.wake(),r&&$e(r,this,t||0===t?t:r._time,1),e.reversed&&this.reverse(),e.paused&&this.paused(!0)}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Ke(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(It(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Xe(this,e),!r._dp||r.parent||Ye(r,this);r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&$e(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===q||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),Me(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Ve(this))%this._dur||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Ve(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*r,t):this._repeat?Ge(this._tTime,r)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?He(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,Ue(this.totalTime(st(-this._delay,this._tDur,t),!0))},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(It(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&(this._tTime-=q)&&Math.abs(this._zTime)!==q))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&$e(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(Y(e)?this.totalDuration():this.duration())/Math.abs(this._ts)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?He(t.rawTime(e),this):this._tTime:this._tTime},t.globalTime=function(e){for(var t=this,r=arguments.length?e:t.rawTime();t;)r=t._start+r/(t._ts||1),t=t._dp;return r},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,et(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){return arguments.length?(this._rDelay=e,et(this)):this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(rt(this,e),Y(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,Y(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,r=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=r&&e<this.endTime(!0)-q))},t.eventCallback=function(e,t,r){var n=this.vars;return arguments.length>1?(t?(n[e]=t,r&&(n[e+"Params"]=r),"onUpdate"===e&&(this._onUpdate=t)):delete n[e],this):n[e]},t.then=function(e){var t=this;return new Promise((function(r){var n=G(e)?e:Le,s=function(){var e=t.then;t.then=null,G(n)&&(n=n(t))&&(n.then||n===t)&&(t.then=e),r(n),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?s():t._prom=s}))},t.kill=function(){Tt(this)},e}();ke(Jt.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var Kt=function(e){function t(t,r){var s;return void 0===t&&(t={}),(s=e.call(this,t,r)||this).labels={},s.smoothChildTiming=!!t.smoothChildTiming,s.autoRemoveChildren=!!t.autoRemoveChildren,s._sort=Y(t.sortChildren),s.parent&&Ye(s.parent,n(s)),t.scrollTrigger&&Qe(n(s),t.scrollTrigger),s}s(t,e);var r=t.prototype;return r.to=function(e,t,r){return new lr(e,Te(arguments,0,this),rt(this,H(t)?arguments[3]:r)),this},r.from=function(e,t,r){return new lr(e,Te(arguments,1,this),rt(this,H(t)?arguments[3]:r)),this},r.fromTo=function(e,t,r,n){return new lr(e,Te(arguments,2,this),rt(this,H(t)?arguments[4]:n)),this},r.set=function(e,t,r){return t.duration=0,t.parent=this,Fe(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new lr(e,t,rt(this,r),1),this},r.call=function(e,t,r){return $e(this,lr.delayedCall(0,e,t),rt(this,r))},r.staggerTo=function(e,t,r,n,s,i,o){return r.duration=t,r.stagger=r.stagger||n,r.onComplete=i,r.onCompleteParams=o,r.parent=this,new lr(e,r,rt(this,s)),this},r.staggerFrom=function(e,t,r,n,s,i,o){return r.runBackwards=1,Fe(r).immediateRender=Y(r.immediateRender),this.staggerTo(e,t,r,n,s,i,o)},r.staggerFromTo=function(e,t,r,n,s,i,o,a){return n.startAt=r,Fe(n).immediateRender=Y(n.immediateRender),this.staggerTo(e,t,n,s,i,o,a)},r.render=function(e,t,r){var n,s,i,a,l,u,h,c,d,p,f,m,g=this._time,v=this._dirty?this.totalDuration():this._tDur,_=this._dur,y=this!==o&&e>v-q&&e>=0?v:e<q?0:e,b=this._zTime<0!=e<0&&(this._initted||!_);if(y!==this._tTime||r||b){if(g!==this._time&&_&&(y+=this._time-g,e+=this._time-g),n=y,d=this._start,u=!(c=this._ts),b&&(_||(g=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(f=this._yoyo,l=_+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*l+e,t,r);if(n=Ce(y%l),y===v?(a=this._repeat,n=_):((a=~~(y/l))&&a===y/l&&(n=_,a--),n>_&&(n=_)),p=Ge(this._tTime,l),!g&&this._tTime&&p!==a&&(p=a),f&&1&a&&(n=_-n,m=1),a!==p&&!this._lock){var w=f&&1&p,x=w===(f&&1&a);if(a<p&&(w=!w),g=w?0:_,this._lock=1,this.render(g||(m?0:Ce(a*l)),t,!_)._lock=0,!t&&this.parent&&At(this,"onRepeat"),this.vars.repeatRefresh&&!m&&(this.invalidate()._lock=1),g&&g!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(_=this._dur,v=this._tDur,x&&(this._lock=2,g=w?_:-1e-4,this.render(g,!0)),this._lock=0,!this._ts&&!u)return this;Ht(this,m)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(h=function(e,t,r){var n;if(r>t)for(n=e._first;n&&n._start<=r;){if(!n._dur&&"isPause"===n.data&&n._start>t)return n;n=n._next}else for(n=e._last;n&&n._start>=r;){if(!n._dur&&"isPause"===n.data&&n._start<t)return n;n=n._prev}}(this,Ce(g),Ce(n)))&&(y-=n-(n=h._start)),this._tTime=y,this._time=n,this._act=!c,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,g=0),!g&&n&&!t&&At(this,"onStart"),n>=g&&e>=0)for(s=this._first;s;){if(i=s._next,(s._act||n>=s._start)&&s._ts&&h!==s){if(s.parent!==this)return this.render(e,t,r);if(s.render(s._ts>0?(n-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(n-s._start)*s._ts,t,r),n!==this._time||!this._ts&&!u){h=0,i&&(y+=this._zTime=-1e-8);break}}s=i}else{s=this._last;for(var j=e<0?e:n;s;){if(i=s._prev,(s._act||j<=s._end)&&s._ts&&h!==s){if(s.parent!==this)return this.render(e,t,r);if(s.render(s._ts>0?(j-s._start)*s._ts:(s._dirty?s.totalDuration():s._tDur)+(j-s._start)*s._ts,t,r),n!==this._time||!this._ts&&!u){h=0,i&&(y+=this._zTime=j?-1e-8:q);break}}s=i}}if(h&&!t&&(this.pause(),h.render(n>=g?0:-1e-8)._zTime=n>=g?1:-1,this._ts))return this._start=d,We(this),this.render(e,t,r);this._onUpdate&&!t&&At(this,"onUpdate",!0),(y===v&&v>=this.totalDuration()||!y&&g)&&(d!==this._start&&Math.abs(c)===Math.abs(this._ts)||this._lock||((e||!_)&&(y===v&&this._ts>0||!y&&this._ts<0)&&Ie(this,1),t||e<0&&!g||!y&&!g||(At(this,y===v?"onComplete":"onReverseComplete",!0),this._prom&&!(y<v&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(e,t){var r=this;if(H(t)||(t=rt(this,t)),!(e instanceof Jt)){if(J(e))return e.forEach((function(e){return r.add(e,t)})),this;if(V(e))return this.addLabel(e,t);if(!G(e))return this;e=lr.delayedCall(0,e)}return this!==e?$e(this,e,t):this},r.getChildren=function(e,t,r,n){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===r&&(r=!0),void 0===n&&(n=-N);for(var s=[],i=this._first;i;)i._start>=n&&(i instanceof lr?t&&s.push(i):(r&&s.push(i),e&&s.push.apply(s,i.getChildren(!0,t,r)))),i=i._next;return s},r.getById=function(e){for(var t=this.getChildren(1,1,1),r=t.length;r--;)if(t[r].vars.id===e)return t[r]},r.remove=function(e){return V(e)?this.removeLabel(e):G(e)?this.killTweensOf(e):(De(this,e),e===this._recent&&(this._recent=this._last),ze(this))},r.totalTime=function(t,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Ce(Dt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,r),this._forcing=0,this):this._tTime},r.addLabel=function(e,t){return this.labels[e]=rt(this,t),this},r.removeLabel=function(e){return delete this.labels[e],this},r.addPause=function(e,t,r){var n=lr.delayedCall(0,t||de,r);return n.data="isPause",this._hasPause=1,$e(this,n,rt(this,e))},r.removePause=function(e){var t=this._first;for(e=rt(this,e);t;)t._start===e&&"isPause"===t.data&&Ie(t),t=t._next},r.killTweensOf=function(e,t,r){for(var n=this.getTweensOf(e,r),s=n.length;s--;)er!==n[s]&&n[s].kill(e,t);return this},r.getTweensOf=function(e,t){for(var r,n=[],s=ht(e),i=this._first,o=H(t);i;)i instanceof lr?Ae(i._targets,s)&&(o?(!er||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&n.push(i):(r=i.getTweensOf(s,t)).length&&n.push.apply(n,r),i=i._next;return n},r.tweenTo=function(e,t){t=t||{};var r=this,n=rt(r,e),s=t,i=s.startAt,o=s.onStart,a=s.onStartParams,l=s.immediateRender,u=lr.to(r,ke({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:t.duration||Math.abs((n-(i&&"time"in i?i.time:r._time))/r.timeScale())||q,onStart:function(){r.pause();var e=t.duration||Math.abs((n-r._time)/r.timeScale());u._dur!==e&&Ke(u,e,0,1).render(u._time,!0,!0),o&&o.apply(u,a||[])}},t));return l?u.render(0):u},r.tweenFromTo=function(e,t,r){return this.tweenTo(t,ke({startAt:{time:rt(this,e)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(e){return void 0===e&&(e=this._time),Ct(this,rt(this,e))},r.previousLabel=function(e){return void 0===e&&(e=this._time),Ct(this,rt(this,e),1)},r.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+q)},r.shiftChildren=function(e,t,r){void 0===r&&(r=0);for(var n,s=this._first,i=this.labels;s;)s._start>=r&&(s._start+=e,s._end+=e),s=s._next;if(t)for(n in i)i[n]>=r&&(i[n]+=e);return ze(this)},r.invalidate=function(){var t=this._first;for(this._lock=0;t;)t.invalidate(),t=t._next;return e.prototype.invalidate.call(this)},r.clear=function(e){void 0===e&&(e=!0);for(var t,r=this._first;r;)t=r._next,this.remove(r),r=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),ze(this)},r.totalDuration=function(e){var t,r,n,s=0,i=this,a=i._last,l=N;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(n=i.parent;a;)t=a._prev,a._dirty&&a.totalDuration(),(r=a._start)>l&&i._sort&&a._ts&&!i._lock?(i._lock=1,$e(i,a,r-a._delay,1)._lock=0):l=r,r<0&&a._ts&&(s-=r,(!n&&!i._dp||n&&n.smoothChildTiming)&&(i._start+=r/i._ts,i._time-=r,i._tTime-=r),i.shiftChildren(-r,!1,-Infinity),l=0),a._end>s&&a._ts&&(s=a._end),a=t;Ke(i,i===o&&i._time>s?i._time:s,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(o._ts&&(Me(o,He(e,o)),c=Dt.frame),Dt.frame>=_e){_e+=P.autoSleep||120;var t=o._first;if((!t||!t._ts)&&P.autoSleep&&Dt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||Dt.sleep()}}},t}(Jt);ke(Kt.prototype,{_lock:0,_hasPause:0,_forcing:0});var er,tr=function(e,t,r,n,s,i,o){var a,l,u,h,c,d,p,f,m=new xr(this._pt,e,t,0,1,gr,null,s),g=0,v=0;for(m.b=r,m.e=n,r+="",(p=~(n+="").indexOf("random("))&&(n=xt(n)),i&&(i(f=[r,n],e,t),r=f[0],n=f[1]),l=r.match(re)||[];a=re.exec(n);)h=a[0],c=n.substring(g,a.index),u?u=(u+1)%5:"rgba("===c.substr(-5)&&(u=1),h!==l[v++]&&(d=parseFloat(l[v-1])||0,m._pt={_next:m._pt,p:c||1===v?c:",",s:d,c:"="===h.charAt(1)?parseFloat(h.substr(2))*("-"===h.charAt(0)?-1:1):parseFloat(h)-d,m:u&&u<4?Math.round:0},g=re.lastIndex);return m.c=g<n.length?n.substring(g,n.length):"",m.fp=o,(ne.test(n)||p)&&(m.e=0),this._pt=m,m},rr=function(e,t,r,n,s,i,o,a,l){G(n)&&(n=n(s||0,e,i));var u,h=e[t],c="get"!==r?r:G(h)?l?e[t.indexOf("set")||!G(e["get"+t.substr(3)])?t:"get"+t.substr(3)](l):e[t]():h,d=G(h)?l?cr:hr:ur;if(V(n)&&(~n.indexOf("random(")&&(n=xt(n)),"="===n.charAt(1)&&(n=parseFloat(c)+parseFloat(n.substr(2))*("-"===n.charAt(0)?-1:1)+(it(c)||0))),c!==n)return isNaN(c*n)?(!h&&!(t in e)&&ue(t,n),tr.call(this,e,t,c,n,d,a||P.stringFilter,l)):(u=new xr(this._pt,e,t,+c||0,n-(c||0),"boolean"==typeof h?mr:fr,0,d),l&&(u.fp=l),o&&u.modifier(o,this,e),this._pt=u)},nr=function(e,t,r,n,s,i){var o,a,l,u;if(ge[e]&&!1!==(o=new ge[e]).init(s,o.rawVars?t[e]:function(e,t,r,n,s){if(G(e)&&(e=ir(e,s,t,r,n)),!X(e)||e.style&&e.nodeType||J(e)||Z(e))return V(e)?ir(e,s,t,r,n):e;var i,o={};for(i in e)o[i]=ir(e[i],s,t,r,n);return o}(t[e],n,s,i,r),r,n,i)&&(r._pt=a=new xr(r._pt,s,e,0,1,o.render,o,0,o.priority),r!==d))for(l=r._ptLookup[r._targets.indexOf(s)],u=o._props.length;u--;)l[o._props[u]]=a;return o},sr=function e(t,r){var n,s,a,l,u,h,c,d,p,f,m,g,v,_=t.vars,y=_.ease,b=_.startAt,w=_.immediateRender,x=_.lazy,j=_.onUpdate,E=_.onUpdateParams,C=_.callbackScope,A=_.runBackwards,T=_.yoyoEase,S=_.keyframes,M=_.autoRevert,O=t._dur,L=t._startAt,k=t._targets,P=t.parent,N=P&&"nested"===P.data?P.parent._targets:k,F="auto"===t._overwrite&&!i,D=t.timeline;if(D&&(!S||!y)&&(y="none"),t._ease=Wt(y,R.ease),t._yEase=T?Gt(Wt(!0===T?y:T,R.ease)):0,T&&t._yoyo&&!t._repeat&&(T=t._yEase,t._yEase=t._ease,t._ease=T),!D){if(g=(d=k[0]?xe(k[0]).harness:0)&&_[d.prop],n=qe(_,pe),L&&L.render(-1,!0).kill(),b)if(Ie(t._startAt=lr.set(k,ke({data:"isStart",overwrite:!1,parent:P,immediateRender:!0,lazy:Y(x),startAt:null,delay:0,onUpdate:j,onUpdateParams:E,callbackScope:C,stagger:0},b))),w){if(r>0)M||(t._startAt=0);else if(O&&!(r<0&&L))return void(r&&(t._zTime=r))}else!1===M&&(t._startAt=0);else if(A&&O)if(L)!M&&(t._startAt=0);else if(r&&(w=!1),a=ke({overwrite:!1,data:"isFromStart",lazy:w&&Y(x),immediateRender:w,stagger:0,parent:P},n),g&&(a[d.prop]=g),Ie(t._startAt=lr.set(k,a)),w){if(!r)return}else e(t._startAt,q);for(t._pt=0,x=O&&Y(x)||x&&!O,s=0;s<k.length;s++){if(c=(u=k[s])._gsap||we(k)[s]._gsap,t._ptLookup[s]=f={},me[c.id]&&fe.length&&Se(),m=N===k?s:N.indexOf(u),d&&!1!==(p=new d).init(u,g||n,t,m,N)&&(t._pt=l=new xr(t._pt,u,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(e){f[e]=l})),p.priority&&(h=1)),!d||g)for(a in n)ge[a]&&(p=nr(a,n,t,m,u,N))?p.priority&&(h=1):f[a]=l=rr.call(t,u,a,"get",n[a],m,N,0,_.stringFilter);t._op&&t._op[s]&&t.kill(u,t._op[s]),F&&t._pt&&(er=t,o.killTweensOf(u,f,t.globalTime(0)),v=!t.parent,er=0),t._pt&&x&&(me[c.id]=1)}h&&wr(t),t._onInit&&t._onInit(t)}t._from=!D&&!!_.runBackwards,t._onUpdate=j,t._initted=(!t._op||t._pt)&&!v},ir=function(e,t,r,n,s){return G(e)?e.call(t,r,n,s):V(e)&&~e.indexOf("random(")?xt(e):e},or=be+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",ar=(or+",id,stagger,delay,duration,paused,scrollTrigger").split(","),lr=function(e){function t(t,r,s,a){var l;"number"==typeof r&&(s.duration=r,r=s,s=null);var u,h,c,d,p,f,m,g,v=(l=e.call(this,a?r:Fe(r),s)||this).vars,_=v.duration,y=v.delay,b=v.immediateRender,w=v.stagger,x=v.overwrite,j=v.keyframes,E=v.defaults,C=v.scrollTrigger,A=v.yoyoEase,T=l.parent,S=(J(t)||Z(t)?H(t[0]):"length"in r)?[t]:ht(t);if(l._targets=S.length?we(S):he("GSAP target "+t+" not found. https://greensock.com",!P.nullTargetWarn)||[],l._ptLookup=[],l._overwrite=x,j||w||Q(_)||Q(y)){if(r=l.vars,(u=l.timeline=new Kt({data:"nested",defaults:E||{}})).kill(),u.parent=u._dp=n(l),u._start=0,j)ke(u.vars.defaults,{ease:"none"}),j.forEach((function(e){return u.to(S,e,">")}));else{if(d=S.length,m=w?dt(w):de,X(w))for(p in w)~or.indexOf(p)&&(g||(g={}),g[p]=w[p]);for(h=0;h<d;h++){for(p in c={},r)ar.indexOf(p)<0&&(c[p]=r[p]);c.stagger=0,A&&(c.yoyoEase=A),g&&Re(c,g),f=S[h],c.duration=+ir(_,n(l),h,f,S),c.delay=(+ir(y,n(l),h,f,S)||0)-l._delay,!w&&1===d&&c.delay&&(l._delay=y=c.delay,l._start+=y,c.delay=0),u.to(f,c,m(h,f,S))}u.duration()?_=y=0:l.timeline=0}_||l.duration(_=u.duration())}else l.timeline=0;return!0!==x||i||(er=n(l),o.killTweensOf(S),er=0),T&&Ye(T,n(l)),(b||!_&&!j&&l._start===Ce(T._time)&&Y(b)&&Be(n(l))&&"nested"!==T.data)&&(l._tTime=-1e-8,l.render(Math.max(0,-y))),C&&Qe(n(l),C),l}s(t,e);var r=t.prototype;return r.render=function(e,t,r){var n,s,i,o,a,l,u,h,c,d=this._time,p=this._tDur,f=this._dur,m=e>p-q&&e>=0?p:e<q?0:e;if(f){if(m!==this._tTime||!e||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=e<0){if(n=m,h=this.timeline,this._repeat){if(o=f+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*o+e,t,r);if(n=Ce(m%o),m===p?(i=this._repeat,n=f):((i=~~(m/o))&&i===m/o&&(n=f,i--),n>f&&(n=f)),(l=this._yoyo&&1&i)&&(c=this._yEase,n=f-n),a=Ge(this._tTime,o),n===d&&!r&&this._initted)return this;i!==a&&(h&&this._yEase&&Ht(h,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=r=1,this.render(Ce(o*i),!0).invalidate()._lock=0))}if(!this._initted){if(Ze(this,e<0?e:n,r,t))return this._tTime=0,this;if(f!==this._dur)return this.render(e,t,r)}for(this._tTime=m,this._time=n,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=u=(c||this._ease)(n/f),this._from&&(this.ratio=u=1-u),n&&!d&&!t&&At(this,"onStart"),s=this._pt;s;)s.r(u,s.d),s=s._next;h&&h.render(e<0?e:!n&&l?-1e-8:h._dur*u,t,r)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(e<0&&this._startAt&&this._startAt.render(e,!0,r),At(this,"onUpdate")),this._repeat&&i!==a&&this.vars.onRepeat&&!t&&this.parent&&At(this,"onRepeat"),m!==this._tDur&&m||this._tTime!==m||(e<0&&this._startAt&&!this._onUpdate&&this._startAt.render(e,!0,!0),(e||!f)&&(m===this._tDur&&this._ts>0||!m&&this._ts<0)&&Ie(this,1),t||e<0&&!d||!m&&!d||(At(this,m===p?"onComplete":"onReverseComplete",!0),this._prom&&!(m<p&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,r,n){var s,i,o,a=e.ratio,l=t<0||!t&&(!e._start&&Je(e)||(e._ts<0||e._dp._ts<0)&&"isFromStart"!==e.data&&"isStart"!==e.data)?0:1,u=e._rDelay,h=0;if(u&&e._repeat&&(h=st(0,e._tDur,t),i=Ge(h,u),o=Ge(e._tTime,u),e._yoyo&&1&i&&(l=1-l),i!==o&&(a=1-l,e.vars.repeatRefresh&&e._initted&&e.invalidate())),l!==a||n||e._zTime===q||!t&&e._zTime){if(!e._initted&&Ze(e,t,n,r))return;for(o=e._zTime,e._zTime=t||(r?q:0),r||(r=t&&!o),e.ratio=l,e._from&&(l=1-l),e._time=0,e._tTime=h,s=e._pt;s;)s.r(l,s.d),s=s._next;e._startAt&&t<0&&e._startAt.render(t,!0,!0),e._onUpdate&&!r&&At(e,"onUpdate"),h&&e._repeat&&!r&&e.parent&&At(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===l&&(l&&Ie(e,1),r||(At(e,l?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,r);return this},r.targets=function(){return this._targets},r.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),e.prototype.invalidate.call(this)},r.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?Tt(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,er&&!0!==er.vars.overwrite)._first||Tt(this),this.parent&&r!==this.timeline.totalDuration()&&Ke(this,this._dur*this.timeline._tDur/r,0,1),this}var n,s,i,o,a,l,u,h=this._targets,c=e?ht(e):h,d=this._ptLookup,p=this._pt;if((!t||"all"===t)&&function(e,t){for(var r=e.length,n=r===t.length;n&&r--&&e[r]===t[r];);return r<0}(h,c))return"all"===t&&(this._pt=0),Tt(this);for(n=this._op=this._op||[],"all"!==t&&(V(t)&&(a={},Ee(t,(function(e){return a[e]=1})),t=a),t=function(e,t){var r,n,s,i,o=e[0]?xe(e[0]).harness:0,a=o&&o.aliases;if(!a)return t;for(n in r=Re({},t),a)if(n in r)for(s=(i=a[n].split(",")).length;s--;)r[i[s]]=r[n];return r}(h,t)),u=h.length;u--;)if(~c.indexOf(h[u]))for(a in s=d[u],"all"===t?(n[u]=t,o=s,i={}):(i=n[u]=n[u]||{},o=t),o)(l=s&&s[a])&&("kill"in l.d&&!0!==l.d.kill(a)||De(this,l,"_pt"),delete s[a]),"all"!==i&&(i[a]=1);return this._initted&&!this._pt&&p&&Tt(this),this},t.to=function(e,r){return new t(e,r,arguments[2])},t.from=function(e,r){return new t(e,Te(arguments,1))},t.delayedCall=function(e,r,n,s){return new t(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:r,onReverseComplete:r,onCompleteParams:n,onReverseCompleteParams:n,callbackScope:s})},t.fromTo=function(e,r,n){return new t(e,Te(arguments,2))},t.set=function(e,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new t(e,r)},t.killTweensOf=function(e,t,r){return o.killTweensOf(e,t,r)},t}(Jt);ke(lr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Ee("staggerTo,staggerFrom,staggerFromTo",(function(e){lr[e]=function(){var t=new Kt,r=at.call(arguments,0);return r.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,r)}}));var ur=function(e,t,r){return e[t]=r},hr=function(e,t,r){return e[t](r)},cr=function(e,t,r,n){return e[t](n.fp,r)},dr=function(e,t,r){return e.setAttribute(t,r)},pr=function(e,t){return G(e[t])?hr:W(e[t])&&e.setAttribute?dr:ur},fr=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4,t)},mr=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},gr=function(e,t){var r=t._pt,n="";if(!e&&t.b)n=t.b;else if(1===e&&t.e)n=t.e;else{for(;r;)n=r.p+(r.m?r.m(r.s+r.c*e):Math.round(1e4*(r.s+r.c*e))/1e4)+n,r=r._next;n+=t.c}t.set(t.t,t.p,n,t)},vr=function(e,t){for(var r=t._pt;r;)r.r(e,r.d),r=r._next},_r=function(e,t,r,n){for(var s,i=this._pt;i;)s=i._next,i.p===n&&i.modifier(e,t,r),i=s},yr=function(e){for(var t,r,n=this._pt;n;)r=n._next,n.p===e&&!n.op||n.op===e?De(this,n,"_pt"):n.dep||(t=1),n=r;return!t},br=function(e,t,r,n){n.mSet(e,t,n.m.call(n.tween,r,n.mt),n)},wr=function(e){for(var t,r,n,s,i=e._pt;i;){for(t=i._next,r=n;r&&r.pr>i.pr;)r=r._next;(i._prev=r?r._prev:s)?i._prev._next=i:n=i,(i._next=r)?r._prev=i:s=i,i=t}e._pt=n},xr=function(){function e(e,t,r,n,s,i,o,a,l){this.t=t,this.s=n,this.c=s,this.p=r,this.r=i||fr,this.d=o||this,this.set=a||ur,this.pr=l||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,r){this.mSet=this.mSet||this.set,this.set=br,this.m=e,this.mt=r,this.tween=t},e}();Ee(be+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return pe[e]=1})),oe.TweenMax=oe.TweenLite=lr,oe.TimelineLite=oe.TimelineMax=Kt,o=new Kt({sortChildren:!1,defaults:R,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),P.stringFilter=Ft;var jr={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];t.forEach((function(e){return St(e)}))},timeline:function(e){return new Kt(e)},getTweensOf:function(e,t){return o.getTweensOf(e,t)},getProperty:function(e,t,r,n){V(e)&&(e=ht(e)[0]);var s=xe(e||{}).get,i=r?Le:Oe;return"native"===r&&(r=""),e?t?i((ge[t]&&ge[t].get||s)(e,t,r,n)):function(t,r,n){return i((ge[t]&&ge[t].get||s)(e,t,r,n))}:e},quickSetter:function(e,t,r){if((e=ht(e)).length>1){var n=e.map((function(e){return Ar.quickSetter(e,t,r)})),s=n.length;return function(e){for(var t=s;t--;)n[t](e)}}e=e[0]||{};var i=ge[t],o=xe(e),a=o.harness&&(o.harness.aliases||{})[t]||t,l=i?function(t){var n=new i;d._pt=0,n.init(e,r?t+r:t,d,0,[e]),n.render(1,n),d._pt&&vr(1,d)}:o.set(e,a);return i?l:function(t){return l(e,a,r?t+r:t,o,1)}},isTweening:function(e){return o.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Wt(e.ease,R.ease)),Ne(R,e||{})},config:function(e){return Ne(P,e||{})},registerEffect:function(e){var t=e.name,r=e.effect,n=e.plugins,s=e.defaults,i=e.extendTimeline;(n||"").split(",").forEach((function(e){return e&&!ge[e]&&!oe[e]&&he(t+" effect requires "+e+" plugin.")})),ve[t]=function(e,t,n){return r(ht(e),ke(t||{},s),n)},i&&(Kt.prototype[t]=function(e,r,n){return this.add(ve[t](e,X(r)?r:(n=r)&&{},this),n)})},registerEase:function(e,t){zt[e]=Wt(t)},parseEase:function(e,t){return arguments.length?Wt(e,t):zt},getById:function(e){return o.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var r,n,s=new Kt(e);for(s.smoothChildTiming=Y(e.smoothChildTiming),o.remove(s),s._dp=0,s._time=s._tTime=o._time,r=o._first;r;)n=r._next,!t&&!r._dur&&r instanceof lr&&r.vars.onComplete===r._targets[0]||$e(s,r,r._start-r._delay),r=n;return $e(o,s,0),s},utils:{wrap:bt,wrapYoyo:wt,distribute:dt,random:mt,snap:ft,normalize:_t,getUnit:it,clamp:ot,splitColor:kt,toArray:ht,mapRange:jt,pipe:gt,unitize:vt,interpolate:Et,shuffle:ct},install:le,effects:ve,ticker:Dt,updateRoot:Kt.updateRoot,plugins:ge,globalTimeline:o,core:{PropTween:xr,globals:ce,Tween:lr,Timeline:Kt,Animation:Jt,getCache:xe,_removeLinkedListItem:De,suppressOverwrites:function(e){return i=e}}};Ee("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return jr[e]=lr[e]})),Dt.add(Kt.updateRoot),d=jr.to({},{duration:0});var Er=function(e,t){for(var r=e._pt;r&&r.p!==t&&r.op!==t&&r.fp!==t;)r=r._next;return r},Cr=function(e,t){return{name:e,rawVars:1,init:function(e,r,n){n._onInit=function(e){var n,s;if(V(r)&&(n={},Ee(r,(function(e){return n[e]=1})),r=n),t){for(s in n={},r)n[s]=t(r[s]);r=n}!function(e,t){var r,n,s,i=e._targets;for(r in t)for(n=i.length;n--;)(s=e._ptLookup[n][r])&&(s=s.d)&&(s._pt&&(s=Er(s,r)),s&&s.modifier&&s.modifier(t[r],e,i[n],r))}(e,r)}}}},Ar=jr.registerPlugin({name:"attr",init:function(e,t,r,n,s){var i,o;for(i in t)(o=this.add(e,"setAttribute",(e.getAttribute(i)||0)+"",t[i],n,s,0,0,i))&&(o.op=i),this._props.push(i)}},{name:"endArray",init:function(e,t){for(var r=t.length;r--;)this.add(e,r,e[r]||0,t[r])}},Cr("roundProps",pt),Cr("modifiers"),Cr("snap",ft))||jr;lr.version=Kt.version=Ar.version="3.6.1",h=1,$()&&It();var Tr=zt.Power0,Sr=zt.Power1,Mr=zt.Power2,Or=zt.Power3,Lr=zt.Power4,kr=zt.Linear,Pr=zt.Quad,Rr=zt.Cubic,Nr=zt.Quart,qr=zt.Quint,Fr=zt.Strong,Dr=zt.Elastic,Ir=zt.Back,zr=zt.SteppedEase,Ur=zt.Bounce,Br=zt.Sine,Vr=zt.Expo,Gr=zt.Circ},"./node_modules/gsap/index.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{gsap:()=>i,default:()=>i,CSSPlugin:()=>s.CSSPlugin,TweenMax:()=>o,TweenLite:()=>n.TweenLite,TimelineMax:()=>n.TimelineMax,TimelineLite:()=>n.TimelineLite,Power0:()=>n.Power0,Power1:()=>n.Power1,Power2:()=>n.Power2,Power3:()=>n.Power3,Power4:()=>n.Power4,Linear:()=>n.Linear,Quad:()=>n.Quad,Cubic:()=>n.Cubic,Quart:()=>n.Quart,Quint:()=>n.Quint,Strong:()=>n.Strong,Elastic:()=>n.Elastic,Back:()=>n.Back,SteppedEase:()=>n.SteppedEase,Bounce:()=>n.Bounce,Sine:()=>n.Sine,Expo:()=>n.Expo,Circ:()=>n.Circ});var n=r("./node_modules/gsap/gsap-core.js"),s=r("./node_modules/gsap/CSSPlugin.js"),i=n.gsap.registerPlugin(s.CSSPlugin)||n.gsap,o=i.core.Tween},"./node_modules/gsap/utils/paths.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{getRawPath:()=>T,copyRawPath:()=>S,reverseSegment:()=>M,convertToPath:()=>L,getRotationAtProgress:()=>k,sliceRawPath:()=>R,cacheRawPathMeasurements:()=>q,subdivideSegment:()=>F,getPositionOnPath:()=>I,transformRawPath:()=>z,stringToRawPath:()=>B,bezierToPoints:()=>V,flatPointsToSegment:()=>G,pointsToSegment:()=>H,simplifyPoints:()=>X,getClosestData:()=>$,subdivideSegmentNear:()=>Q,rawPathToString:()=>Z});var n,s=/[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,i=/(?:(-)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,o=/[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,a=/(^[#\.][a-z]|[a-y][a-z])/i,l=Math.PI/180,u=180/Math.PI,h=Math.sin,c=Math.cos,d=Math.abs,p=Math.sqrt,f=Math.atan2,m=1e8,g=function(e){return"string"==typeof e},v=function(e){return"number"==typeof e},_={},y={},b=1e5,w=function(e){return Math.round((e+m)%1*b)/b||(e<0?0:1)},x=function(e){return Math.round(e*b)/b||0},j=function(e){return Math.round(1e10*e)/1e10||0},E=function(e,t,r,n){var s=e[t],i=1===n?6:F(s,r,n);if(i&&i+r+2<s.length)return e.splice(t,0,s.slice(0,r+i+2)),s.splice(0,r+i),1},C=function(e,t){return t.totalLength=e.totalLength,e.samples?(t.samples=e.samples.slice(0),t.lookup=e.lookup.slice(0),t.minLength=e.minLength,t.resolution=e.resolution):e.totalPoints&&(t.totalPoints=e.totalPoints),t},A=function(e,t){var r=e.length,n=e[r-1]||[],s=n.length;r&&t[0]===n[s-2]&&t[1]===n[s-1]&&(t=n.concat(t.slice(2)),r--),e[r]=t};function T(e){var t,r=(e=g(e)&&a.test(e)&&document.querySelector(e)||e).getAttribute?e:0;return r&&(e=e.getAttribute("d"))?(r._gsPath||(r._gsPath={}),(t=r._gsPath[e])&&!t._dirty?t:r._gsPath[e]=B(e)):e?g(e)?B(e):v(e[0])?[e]:e:console.warn("Expecting a <path> element or an SVG path data string")}function S(e){for(var t=[],r=0;r<e.length;r++)t[r]=C(e[r],e[r].slice(0));return C(e,t)}function M(e){var t,r=0;for(e.reverse();r<e.length;r+=2)t=e[r],e[r]=e[r+1],e[r+1]=t;e.reversed=!e.reversed}var O={rect:"rx,ry,x,y,width,height",circle:"r,cx,cy",ellipse:"rx,ry,cx,cy",line:"x1,x2,y1,y2"};function L(e,t){var r,n,s,o,a,l,u,h,c,d,p,f,m,g,v,_,y,b,w,x,j,E,C=e.tagName.toLowerCase(),A=.552284749831;return"path"!==C&&e.getBBox?(l=function(e,t){var r,n=document.createElementNS("http://www.w3.org/2000/svg","path"),s=[].slice.call(e.attributes),i=s.length;for(t=","+t+",";--i>-1;)r=s[i].nodeName.toLowerCase(),t.indexOf(","+r+",")<0&&n.setAttributeNS(null,r,s[i].nodeValue);return n}(e,"x,y,width,height,cx,cy,rx,ry,r,x1,x2,y1,y2,points"),E=function(e,t){for(var r=t?t.split(","):[],n={},s=r.length;--s>-1;)n[r[s]]=+e.getAttribute(r[s])||0;return n}(e,O[C]),"rect"===C?(o=E.rx,a=E.ry||o,n=E.x,s=E.y,d=E.width-2*o,p=E.height-2*a,r=o||a?"M"+(_=(g=(m=n+o)+d)+o)+","+(b=s+a)+" V"+(w=b+p)+" C"+[_,x=w+a*A,v=g+o*A,j=w+a,g,j,g-(g-m)/3,j,m+(g-m)/3,j,m,j,f=n+o*(1-A),j,n,x,n,w,n,w-(w-b)/3,n,b+(w-b)/3,n,b,n,y=s+a*(1-A),f,s,m,s,m+(g-m)/3,s,g-(g-m)/3,s,g,s,v,s,_,y,_,b].join(",")+"z":"M"+(n+d)+","+s+" v"+p+" h"+-d+" v"+-p+" h"+d+"z"):"circle"===C||"ellipse"===C?("circle"===C?h=(o=a=E.r)*A:(o=E.rx,h=(a=E.ry)*A),r="M"+((n=E.cx)+o)+","+(s=E.cy)+" C"+[n+o,s+h,n+(u=o*A),s+a,n,s+a,n-u,s+a,n-o,s+h,n-o,s,n-o,s-h,n-u,s-a,n,s-a,n+u,s-a,n+o,s-h,n+o,s].join(",")+"z"):"line"===C?r="M"+E.x1+","+E.y1+" L"+E.x2+","+E.y2:"polyline"!==C&&"polygon"!==C||(r="M"+(n=(c=(e.getAttribute("points")+"").match(i)||[]).shift())+","+(s=c.shift())+" L"+c.join(","),"polygon"===C&&(r+=","+n+","+s+"z")),l.setAttribute("d",Z(l._gsRawPath=B(r))),t&&e.parentNode&&(e.parentNode.insertBefore(l,e),e.parentNode.removeChild(e)),l):e}function k(e,t){var r=D(e,t>=1?1-1e-9:t||1e-9);return P(r.segment,r.i,r.t)}function P(e,t,r){var n,s=e[t],i=e[t+2],o=e[t+4];return s+=(i-s)*r,s+=((i+=(o-i)*r)-s)*r,n=i+(o+(e[t+6]-o)*r-i)*r-s,s=e[t+1],s+=((i=e[t+3])-s)*r,s+=((i+=((o=e[t+5])-i)*r)-s)*r,x(f(i+(o+(e[t+7]-o)*r-i)*r-s,n)*u)}function R(e,t,r){r=void 0===r?1:j(r)||0,t=j(t)||0;var n=Math.max(0,~~(d(r-t)-1e-8)),s=S(e);if(t>r&&(t=1-t,r=1-r,function(e,t){var r=e.length;for(t||e.reverse();r--;)e[r].reversed||M(e[r])}(s),s.totalLength=0),t<0||r<0){var i=Math.abs(~~Math.min(t,r))+1;t+=i,r+=i}s.totalLength||q(s);var o,a,l,u,h,c,p,f,m=r>1,g=D(s,t,_,!0),v=D(s,r,y),b=v.segment,w=g.segment,x=v.segIndex,C=g.segIndex,T=v.i,O=g.i,L=C===x,k=T===O&&L;if(m||n){for(o=x<C||L&&T<O||k&&v.t<g.t,E(s,C,O,g.t)&&(C++,o||(x++,k?(v.t=(v.t-g.t)/(1-g.t),T=0):L&&(T-=O))),1-(r-t)<1e-5?x=C-1:!v.t&&x?x--:E(s,x,T,v.t)&&o&&C++,1===g.t&&(C=(C+1)%s.length),h=[],p=1+(c=s.length)*n,f=C,p+=(c-C+x)%c,u=0;u<p;u++)A(h,s[f++%c]);s=h}else if(l=1===v.t?6:F(b,T,v.t),t!==r)for(a=F(w,O,k?g.t/v.t:g.t),L&&(l+=a),b.splice(T+l+2),(a||O)&&w.splice(0,O+a),u=s.length;u--;)(u<C||u>x)&&s.splice(u,1);else b.angle=P(b,T+l,0),g=b[T+=l],v=b[T+1],b.length=b.totalLength=0,b.totalPoints=s.totalPoints=8,b.push(g,v,g,v,g,v,g,v);return s.totalLength=0,s}function N(e,t,r){t=t||0,e.samples||(e.samples=[],e.lookup=[]);var n,s,i,o,a,l,u,h,c,f,g,v,_,y,b,w,x,j=~~e.resolution||12,E=1/j,C=r?t+6*r+1:e.length,A=e[t],T=e[t+1],S=t?t/6*j:0,M=e.samples,O=e.lookup,L=(t?e.minLength:m)||m,k=M[S+r*j-1],P=t?M[S-1]:0;for(M.length=O.length=0,s=t+2;s<C;s+=6){if(i=e[s+4]-A,o=e[s+2]-A,a=e[s]-A,h=e[s+5]-T,c=e[s+3]-T,f=e[s+1]-T,l=u=g=v=0,d(i)<1e-5&&d(h)<1e-5&&d(a)+d(f)<1e-5)e.length>8&&(e.splice(s,6),s-=6,C-=6);else for(n=1;n<=j;n++)l=u-(u=((y=E*n)*y*i+3*(_=1-y)*(y*o+_*a))*y),g=v-(v=(y*y*h+3*_*(y*c+_*f))*y),(w=p(g*g+l*l))<L&&(L=w),P+=w,M[S++]=P;A+=i,T+=h}if(k)for(k-=P;S<M.length;S++)M[S]+=k;if(M.length&&L)for(e.totalLength=x=M[M.length-1]||0,e.minLength=L,w=b=0,n=0;n<x;n+=L)O[w++]=M[b]<n?++b:b;else e.totalLength=M[0]=0;return t?P-M[t/2-1]:P}function q(e,t){var r,n,s;for(s=r=n=0;s<e.length;s++)e[s].resolution=~~t||12,n+=e[s].length,r+=N(e[s]);return e.totalPoints=n,e.totalLength=r,e}function F(e,t,r){if(r<=0||r>=1)return 0;var n=e[t],s=e[t+1],i=e[t+2],o=e[t+3],a=e[t+4],l=e[t+5],u=n+(i-n)*r,h=i+(a-i)*r,c=s+(o-s)*r,d=o+(l-o)*r,p=u+(h-u)*r,f=c+(d-c)*r,m=a+(e[t+6]-a)*r,g=l+(e[t+7]-l)*r;return h+=(m-h)*r,d+=(g-d)*r,e.splice(t+2,4,x(u),x(c),x(p),x(f),x(p+(h-p)*r),x(f+(d-f)*r),x(h),x(d),x(m),x(g)),e.samples&&e.samples.splice(t/6*e.resolution|0,0,0,0,0,0,0,0),6}function D(e,t,r,n){r=r||{},e.totalLength||q(e),(t<0||t>1)&&(t=w(t));var s,i,o,a,l,u,h,c=0,d=e[0];if(t)if(1===t)h=1,u=(d=e[c=e.length-1]).length-8;else{if(e.length>1){for(o=e.totalLength*t,l=u=0;(l+=e[u++].totalLength)<o;)c=u;t=(o-(a=l-(d=e[c]).totalLength))/(l-a)||0}s=d.samples,i=d.resolution,o=d.totalLength*t,a=(u=d.lookup[~~(o/d.minLength)]||0)?s[u-1]:0,(l=s[u])<o&&(a=l,l=s[++u]),h=1/i*((o-a)/(l-a)+u%i),u=6*~~(u/i),n&&1===h&&(u+6<d.length?(u+=6,h=0):c+1<e.length&&(u=h=0,d=e[++c]))}else h=u=c=0,d=e[0];return r.t=h,r.i=u,r.path=e,r.segment=d,r.segIndex=c,r}function I(e,t,r,n){var s,i,o,a,l,u,h,c,d,p=e[0],f=n||{};if((t<0||t>1)&&(t=w(t)),e.length>1){for(o=e.totalLength*t,l=u=0;(l+=e[u++].totalLength)<o;)p=e[u];t=(o-(a=l-p.totalLength))/(l-a)||0}return s=p.samples,i=p.resolution,o=p.totalLength*t,a=(u=p.lookup[t<1?~~(o/p.minLength):p.lookup.length-1]||0)?s[u-1]:0,(l=s[u])<o&&(a=l,l=s[++u]),d=1-(h=1/i*((o-a)/(l-a)+u%i)||0),c=p[u=6*~~(u/i)],f.x=x((h*h*(p[u+6]-c)+3*d*(h*(p[u+4]-c)+d*(p[u+2]-c)))*h+c),f.y=x((h*h*(p[u+7]-(c=p[u+1]))+3*d*(h*(p[u+5]-c)+d*(p[u+3]-c)))*h+c),r&&(f.angle=p.totalLength?P(p,u,h>=1?1-1e-9:h||1e-9):p.angle||0),f}function z(e,t,r,n,s,i,o){for(var a,l,u,h,c,d=e.length;--d>-1;)for(l=(a=e[d]).length,u=0;u<l;u+=2)h=a[u],c=a[u+1],a[u]=h*t+c*n+i,a[u+1]=h*r+c*s+o;return e._dirty=1,e}function U(e,t,r,n,s,i,o,a,u){if(e!==a||t!==u){r=d(r),n=d(n);var f=s%360*l,m=c(f),g=h(f),v=Math.PI,_=2*v,y=(e-a)/2,b=(t-u)/2,w=m*y+g*b,x=-g*y+m*b,j=w*w,E=x*x,C=j/(r*r)+E/(n*n);C>1&&(r=p(C)*r,n=p(C)*n);var A=r*r,T=n*n,S=(A*T-A*E-T*j)/(A*E+T*j);S<0&&(S=0);var M=(i===o?-1:1)*p(S),O=M*(r*x/n),L=M*(-n*w/r),k=(e+a)/2+(m*O-g*L),P=(t+u)/2+(g*O+m*L),R=(w-O)/r,N=(x-L)/n,q=(-w-O)/r,F=(-x-L)/n,D=R*R+N*N,I=(N<0?-1:1)*Math.acos(R/p(D)),z=(R*F-N*q<0?-1:1)*Math.acos((R*q+N*F)/p(D*(q*q+F*F)));isNaN(z)&&(z=v),!o&&z>0?z-=_:o&&z<0&&(z+=_),I%=_,z%=_;var U,B=Math.ceil(d(z)/(_/4)),V=[],G=z/B,H=4/3*h(G/2)/(1+c(G/2)),W=m*r,X=g*r,Y=g*-n,$=m*n;for(U=0;U<B;U++)w=c(s=I+U*G),x=h(s),R=c(s+=G),N=h(s),V.push(w-H*x,x+H*w,R+H*N,N-H*R,R,N);for(U=0;U<V.length;U+=2)w=V[U],x=V[U+1],V[U]=w*W+x*Y+k,V[U+1]=w*X+x*$+P;return V[U-2]=a,V[U-1]=u,V}}function B(e){var t,r,n,i,a,l,u,h,c,p,f,m,g,v,_,y=(e+"").replace(o,(function(e){var t=+e;return t<1e-4&&t>-1e-4?0:t})).match(s)||[],b=[],w=0,x=0,j=2/3,E=y.length,C=0,A="ERROR: malformed path: "+e,T=function(e,t,r,n){p=(r-e)/3,f=(n-t)/3,u.push(e+p,t+f,r-p,n-f,r,n)};if(!e||!isNaN(y[0])||isNaN(y[1]))return console.log(A),b;for(t=0;t<E;t++)if(g=a,isNaN(y[t])?l=(a=y[t].toUpperCase())!==y[t]:t--,n=+y[t+1],i=+y[t+2],l&&(n+=w,i+=x),t||(h=n,c=i),"M"===a)u&&(u.length<8?b.length-=1:C+=u.length),w=h=n,x=c=i,u=[n,i],b.push(u),t+=2,a="L";else if("C"===a)u||(u=[0,0]),l||(w=x=0),u.push(n,i,w+1*y[t+3],x+1*y[t+4],w+=1*y[t+5],x+=1*y[t+6]),t+=6;else if("S"===a)p=w,f=x,"C"!==g&&"S"!==g||(p+=w-u[u.length-4],f+=x-u[u.length-3]),l||(w=x=0),u.push(p,f,n,i,w+=1*y[t+3],x+=1*y[t+4]),t+=4;else if("Q"===a)p=w+(n-w)*j,f=x+(i-x)*j,l||(w=x=0),w+=1*y[t+3],x+=1*y[t+4],u.push(p,f,w+(n-w)*j,x+(i-x)*j,w,x),t+=4;else if("T"===a)p=w-u[u.length-4],f=x-u[u.length-3],u.push(w+p,x+f,n+(w+1.5*p-n)*j,i+(x+1.5*f-i)*j,w=n,x=i),t+=2;else if("H"===a)T(w,x,w=n,x),t+=1;else if("V"===a)T(w,x,w,x=n+(l?x-w:0)),t+=1;else if("L"===a||"Z"===a)"Z"===a&&(n=h,i=c,u.closed=!0),("L"===a||d(w-n)>.5||d(x-i)>.5)&&(T(w,x,n,i),"L"===a&&(t+=2)),w=n,x=i;else if("A"===a){if(v=y[t+4],_=y[t+5],p=y[t+6],f=y[t+7],r=7,v.length>1&&(v.length<3?(f=p,p=_,r--):(f=_,p=v.substr(2),r-=2),_=v.charAt(1),v=v.charAt(0)),m=U(w,x,+y[t+1],+y[t+2],+y[t+3],+v,+_,(l?w:0)+1*p,(l?x:0)+1*f),t+=r,m)for(r=0;r<m.length;r++)u.push(m[r]);w=u[u.length-2],x=u[u.length-1]}else console.log(A);return(t=u.length)<6?(b.pop(),t=0):u[0]===u[t-2]&&u[1]===u[t-1]&&(u.closed=!0),b.totalPoints=C+t,b}function V(e,t,r,n,s,i,o,a,l,u,h){var c,p=(e+r)/2,f=(t+n)/2,m=(r+s)/2,g=(n+i)/2,v=(s+o)/2,_=(i+a)/2,y=(p+m)/2,b=(f+g)/2,w=(m+v)/2,x=(g+_)/2,j=(y+w)/2,E=(b+x)/2,C=o-e,A=a-t,T=d((r-o)*A-(n-a)*C),S=d((s-o)*A-(i-a)*C);return u||(u=[e,t,o,a],h=2),u.splice(h||u.length-2,0,j,E),(T+S)*(T+S)>l*(C*C+A*A)&&(c=u.length,V(e,t,p,f,y,b,j,E,l,u,h),V(j,E,w,x,v,_,o,a,l,u,h+2+(u.length-c))),u}function G(e,t){void 0===t&&(t=1);for(var r=e[0],n=0,s=[r,n],i=2;i<e.length;i+=2)s.push(r,n,e[i],n=(e[i]-r)*t/2,r=e[i],-n);return s}function H(e,t,r){d(e[0]-e[2])<1e-4&&d(e[1]-e[3])<1e-4&&(e=e.slice(2));var n,s,i,o,a,l,u,m,g,v,_,y,b,w,j=e.length-2,E=+e[0],C=+e[1],A=+e[2],T=+e[3],S=[E,C,E,C],M=A-E,O=T-C,L=Math.abs(e[j]-E)<.001&&Math.abs(e[j+1]-C)<.001;for(isNaN(r)&&(r=Math.PI/10),L&&(e.push(A,T),A=E,T=C,E=e[j-2],C=e[j-1],e.unshift(E,C),j+=4),t=t||0===t?+t:1,a=2;a<j;a+=2)n=E,s=C,E=A,C=T,A=+e[a+2],T=+e[a+3],E===A&&C===T||(y=(l=M)*l+(m=O)*m,b=(M=A-E)*M+(O=T-C)*O,w=(u=A-n)*u+(g=T-s)*g,_=(i=Math.acos((y+b-w)/p(4*y*b)))/Math.PI*t,v=p(y)*_,_*=p(b),E===n&&C===s||(i>r?(o=f(g,u),S.push(x(E-c(o)*v),x(C-h(o)*v),x(E),x(C),x(E+c(o)*_),x(C+h(o)*_))):(o=f(m,l),S.push(x(E-c(o)*v),x(C-h(o)*v)),o=f(O,M),S.push(x(E),x(C),x(E+c(o)*_),x(C+h(o)*_)))));return E!==A||C!==T||S.length<4?S.push(x(A),x(T),x(A),x(T)):S.length-=2,L&&(S.splice(0,6),S.length=S.length-6),S}function W(e,t,r,n,s){var i,o,a,l,u,h,c,d,p,f,m,g,v=n,_=e[t],y=e[t+1],b=e[r],w=e[r+1];for(o=t+2;o<r;o+=2)l=e[o],u=e[o+1],f=void 0,m=void 0,g=void 0,g=(p=w)-(c=y),((m=(d=b)-(h=_))||g)&&((f=((l-h)*m+(u-c)*g)/(m*m+g*g))>1?(h=d,c=p):f>0&&(h+=m*f,c+=g*f)),(a=Math.pow(l-h,2)+Math.pow(u-c,2))>v&&(i=o,v=a);v>n&&(i-t>2&&W(e,t,i,n,s),s.push(e[i],e[i+1]),r-i>2&&W(e,i,r,n,s))}function X(e,t){var r,n,s,i,o,a,l,u=parseFloat(e[0]),h=parseFloat(e[1]),c=[u,h],d=e.length-2;for(t=Math.pow(t||1,2),r=2;r<d;r+=2)(i=u-(n=parseFloat(e[r])))*i+(o=h-(s=parseFloat(e[r+1])))*o>t&&(c.push(n,s),u=n,h=s);return c.push(parseFloat(e[d]),parseFloat(e[d+1])),W(c,0,l=c.length-2,t,a=[c[0],c[1]]),a.push(c[l],c[l+1]),a}function Y(e,t,r,s,i,o,a,l,u,h,c,d,p,f){var g,v,_,y,b=(i-s)/o,w=0,x=s;for(n=m;x<=i;)(g=(v=(y=1-x)*y*y*a+3*y*y*x*u+3*y*x*x*c+x*x*x*p-t)*v+(_=y*y*y*l+3*y*y*x*h+3*y*x*x*d+x*x*x*f-r)*_)<n&&(n=g,w=x),x+=b;return e>1?Y(e-1,t,r,Math.max(w-b,0),Math.min(w+b,1),o,a,l,u,h,c,d,p,f):w}function $(e,t,r,s){var i,o,a,l,u={j:0,i:0,t:0},h=m;for(o=0;o<e.length;o++)for(l=e[o],i=0;i<l.length;i+=6)a=Y(1,t,r,0,1,s||20,l[i],l[i+1],l[i+2],l[i+3],l[i+4],l[i+5],l[i+6],l[i+7]),h>n&&(h=n,u.j=o,u.i=i,u.t=a);return u}function Q(e,t,r,s,i){var o,a,l=r.length,u=m,h=0,c=0;for(s=s||20,i=i||3,a=0;a<l;a+=6)o=Y(1,e,t,0,1,s,r[a],r[a+1],r[a+2],r[a+3],r[a+4],r[a+5],r[a+6],r[a+7]),u>n&&(u=n,h=o,c=a);return F(r,c,o=Y(i,e,t,h-.05,h+.05,s,r[c],r[c+1],r[c+2],r[c+3],r[c+4],r[c+5],r[c+6],r[c+7])),c+6}function Z(e){v(e[0])&&(e=[e]);var t,r,n,s,i="",o=e.length;for(r=0;r<o;r++){for(s=e[r],i+="M"+x(s[0])+","+x(s[1])+" C",t=s.length,n=2;n<t;n++)i+=x(s[n++])+","+x(s[n++])+" "+x(s[n++])+","+x(s[n++])+" "+x(s[n++])+","+x(s[n])+" ";s.closed&&(i+="z")}return i}},"./node_modules/html-entities/lib/html4-entities.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/surrogate-pairs.js"),s=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],i=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],o={},a={};!function(){for(var e=0,t=s.length;e<t;){var r=s[e],n=i[e];o[r]=String.fromCharCode(n),a[n]=r,e++}}();var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var s="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));(!isNaN(s)||s>=-32768)&&(r=s<=65535?String.fromCharCode(s):n.fromCodePoint(s))}else r=o[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var s=a[e.charCodeAt(n)];r+=s?"&"+s+";":e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",s=0;s<t;){var i=e.charCodeAt(s),o=a[i];o?r+="&"+o+";":i<32||i>126?i>=n.highSurrogateFrom&&i<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,s)+";",s++):r+="&#"+i+";":r+=e.charAt(s),s++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",s=0;s<t;){var i=e.charCodeAt(s);i<=255?r+=e[s++]:(i>=n.highSurrogateFrom&&i<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,s)+";",s++):r+="&#"+i+";",s++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html4Entities=l},"./node_modules/html-entities/lib/html5-entities.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/surrogate-pairs.js"),s=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],i=[["NewLine",[10]]],o={},a={};!function(e,t){var r=s.length;for(;r--;){var n=s[r],o=n[0],a=n[1],l=a[0],u=a[1],h=l<32||l>126||62===l||60===l||38===l||34===l||39===l,c=void 0;h&&(c=t[l]=t[l]||{}),u?(e[o]=String.fromCharCode(l)+String.fromCharCode(u),h&&(c[u]=o)):(e[o]=String.fromCharCode(l),h&&(c[""]=o))}r=i.length;for(;r--;){var d=i[r],p=(o=d[0],d[1]);l=p[0],u=p[1];e[o]=String.fromCharCode(l)+(u?String.fromCharCode(u):"")}}(o,a);var l=function(){function e(){}return e.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,(function(e,t){var r;if("#"===t.charAt(0)){var s="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));(!isNaN(s)||s>=-32768)&&(r=s<=65535?String.fromCharCode(s):n.fromCodePoint(s))}else r=o[t];return r||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var s=a[e.charCodeAt(n)];if(s){var i=s[e.charCodeAt(n+1)];if(i?n++:i=s[""],i){r+="&"+i+";",n++;continue}}r+=e.charAt(n),n++}return r},e.encode=function(t){return(new e).encode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",s=0;s<t;){var i=e.charCodeAt(s),o=a[i];if(o){var l=o[e.charCodeAt(s+1)];if(l?s++:l=o[""],l){r+="&"+l+";",s++;continue}}i<32||i>126?i>=n.highSurrogateFrom&&i<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,s)+";",s++):r+="&#"+i+";":r+=e.charAt(s),s++}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",s=0;s<t;){var i=e.charCodeAt(s);i<=255?r+=e[s++]:i>=n.highSurrogateFrom&&i<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,s)+";",s+=2):(r+="&#"+i+";",s++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.Html5Entities=l},"./node_modules/html-entities/lib/index.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/xml-entities.js");t.XmlEntities=n.XmlEntities;var s=r("./node_modules/html-entities/lib/html4-entities.js");t.Html4Entities=s.Html4Entities;var i=r("./node_modules/html-entities/lib/html5-entities.js");t.Html5Entities=i.Html5Entities,t.AllHtmlEntities=i.Html5Entities},"./node_modules/html-entities/lib/surrogate-pairs.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fromCodePoint=String.fromCodePoint||function(e){return String.fromCharCode(Math.floor((e-65536)/1024)+55296,(e-65536)%1024+56320)},t.getCodePoint=String.prototype.codePointAt?function(e,t){return e.codePointAt(t)}:function(e,t){return 1024*(e.charCodeAt(t)-55296)+e.charCodeAt(t+1)-56320+65536},t.highSurrogateFrom=55296,t.highSurrogateTo=56319},"./node_modules/html-entities/lib/xml-entities.js":(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r("./node_modules/html-entities/lib/surrogate-pairs.js"),s={"&lt":"<","&gt":">","&quot":'"',"&apos":"'","&amp":"&","&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},i={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},o={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"},a=function(){function e(){}return e.prototype.encode=function(e){return e&&e.length?e.replace(/[<>"'&]/g,(function(e){return o[e]})):""},e.encode=function(t){return(new e).encode(t)},e.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,(function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return!isNaN(t)||t>=-32768?t<=65535?String.fromCharCode(t):n.fromCodePoint(t):""}return s[e]||e})):""},e.decode=function(t){return(new e).decode(t)},e.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",s=0;s<t;){var o=e.charCodeAt(s),a=i[o];a?(r+="&"+a+";",s++):(o<32||o>126?o>=n.highSurrogateFrom&&o<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,s)+";",s++):r+="&#"+o+";":r+=e.charAt(s),s++)}return r},e.encodeNonUTF=function(t){return(new e).encodeNonUTF(t)},e.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",s=0;s<t;){var i=e.charCodeAt(s);i<=255?r+=e[s++]:(i>=n.highSurrogateFrom&&i<=n.highSurrogateTo?(r+="&#"+n.getCodePoint(e,s)+";",s++):r+="&#"+i+";",s++)}return r},e.encodeNonASCII=function(t){return(new e).encodeNonASCII(t)},e}();t.XmlEntities=a},"./node_modules/lodash/_DataView.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"DataView");e.exports=n},"./node_modules/lodash/_Hash.js":(e,t,r)=>{var n=r("./node_modules/lodash/_hashClear.js"),s=r("./node_modules/lodash/_hashDelete.js"),i=r("./node_modules/lodash/_hashGet.js"),o=r("./node_modules/lodash/_hashHas.js"),a=r("./node_modules/lodash/_hashSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_ListCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_listCacheClear.js"),s=r("./node_modules/lodash/_listCacheDelete.js"),i=r("./node_modules/lodash/_listCacheGet.js"),o=r("./node_modules/lodash/_listCacheHas.js"),a=r("./node_modules/lodash/_listCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Map.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Map");e.exports=n},"./node_modules/lodash/_MapCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_mapCacheClear.js"),s=r("./node_modules/lodash/_mapCacheDelete.js"),i=r("./node_modules/lodash/_mapCacheGet.js"),o=r("./node_modules/lodash/_mapCacheHas.js"),a=r("./node_modules/lodash/_mapCacheSet.js");function l(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}l.prototype.clear=n,l.prototype.delete=s,l.prototype.get=i,l.prototype.has=o,l.prototype.set=a,e.exports=l},"./node_modules/lodash/_Promise.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Promise");e.exports=n},"./node_modules/lodash/_Set.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"Set");e.exports=n},"./node_modules/lodash/_SetCache.js":(e,t,r)=>{var n=r("./node_modules/lodash/_MapCache.js"),s=r("./node_modules/lodash/_setCacheAdd.js"),i=r("./node_modules/lodash/_setCacheHas.js");function o(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new n;++t<r;)this.add(e[t])}o.prototype.add=o.prototype.push=s,o.prototype.has=i,e.exports=o},"./node_modules/lodash/_Stack.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js"),s=r("./node_modules/lodash/_stackClear.js"),i=r("./node_modules/lodash/_stackDelete.js"),o=r("./node_modules/lodash/_stackGet.js"),a=r("./node_modules/lodash/_stackHas.js"),l=r("./node_modules/lodash/_stackSet.js");function u(e){var t=this.__data__=new n(e);this.size=t.size}u.prototype.clear=s,u.prototype.delete=i,u.prototype.get=o,u.prototype.has=a,u.prototype.set=l,e.exports=u},"./node_modules/lodash/_Symbol.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js").Symbol;e.exports=n},"./node_modules/lodash/_Uint8Array.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js").Uint8Array;e.exports=n},"./node_modules/lodash/_WeakMap.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(r("./node_modules/lodash/_root.js"),"WeakMap");e.exports=n},"./node_modules/lodash/_arrayEach.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e}},"./node_modules/lodash/_arrayFilter.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,s=0,i=[];++r<n;){var o=e[r];t(o,r,e)&&(i[s++]=o)}return i}},"./node_modules/lodash/_arrayLikeKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseTimes.js"),s=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isBuffer.js"),a=r("./node_modules/lodash/_isIndex.js"),l=r("./node_modules/lodash/isTypedArray.js"),u=Object.prototype.hasOwnProperty;e.exports=function(e,t){var r=i(e),h=!r&&s(e),c=!r&&!h&&o(e),d=!r&&!h&&!c&&l(e),p=r||h||c||d,f=p?n(e.length,String):[],m=f.length;for(var g in e)!t&&!u.call(e,g)||p&&("length"==g||c&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,m))||f.push(g);return f}},"./node_modules/lodash/_arrayMap.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length,s=Array(n);++r<n;)s[r]=t(e[r],r,e);return s}},"./node_modules/lodash/_arrayPush.js":e=>{e.exports=function(e,t){for(var r=-1,n=t.length,s=e.length;++r<n;)e[s+r]=t[r];return e}},"./node_modules/lodash/_arraySome.js":e=>{e.exports=function(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}},"./node_modules/lodash/_assocIndexOf.js":(e,t,r)=>{var n=r("./node_modules/lodash/eq.js");e.exports=function(e,t){for(var r=e.length;r--;)if(n(e[r][0],t))return r;return-1}},"./node_modules/lodash/_baseEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseForOwn.js"),s=r("./node_modules/lodash/_createBaseEach.js")(n);e.exports=s},"./node_modules/lodash/_baseFor.js":(e,t,r)=>{var n=r("./node_modules/lodash/_createBaseFor.js")();e.exports=n},"./node_modules/lodash/_baseForOwn.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseFor.js"),s=r("./node_modules/lodash/keys.js");e.exports=function(e,t){return e&&n(e,t,s)}},"./node_modules/lodash/_baseGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_castPath.js"),s=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){for(var r=0,i=(t=n(t,e)).length;null!=e&&r<i;)e=e[s(t[r++])];return r&&r==i?e:void 0}},"./node_modules/lodash/_baseGetAllKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayPush.js"),s=r("./node_modules/lodash/isArray.js");e.exports=function(e,t,r){var i=t(e);return s(e)?i:n(i,r(e))}},"./node_modules/lodash/_baseGetTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_getRawTag.js"),i=r("./node_modules/lodash/_objectToString.js"),o=n?n.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":o&&o in Object(e)?s(e):i(e)}},"./node_modules/lodash/_baseHasIn.js":e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},"./node_modules/lodash/_baseIsArguments.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return s(e)&&"[object Arguments]"==n(e)}},"./node_modules/lodash/_baseIsEqual.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsEqualDeep.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function e(t,r,i,o,a){return t===r||(null==t||null==r||!s(t)&&!s(r)?t!=t&&r!=r:n(t,r,i,o,e,a))}},"./node_modules/lodash/_baseIsEqualDeep.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Stack.js"),s=r("./node_modules/lodash/_equalArrays.js"),i=r("./node_modules/lodash/_equalByTag.js"),o=r("./node_modules/lodash/_equalObjects.js"),a=r("./node_modules/lodash/_getTag.js"),l=r("./node_modules/lodash/isArray.js"),u=r("./node_modules/lodash/isBuffer.js"),h=r("./node_modules/lodash/isTypedArray.js"),c="[object Arguments]",d="[object Array]",p="[object Object]",f=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,m,g,v){var _=l(e),y=l(t),b=_?d:a(e),w=y?d:a(t),x=(b=b==c?p:b)==p,j=(w=w==c?p:w)==p,E=b==w;if(E&&u(e)){if(!u(t))return!1;_=!0,x=!1}if(E&&!x)return v||(v=new n),_||h(e)?s(e,t,r,m,g,v):i(e,t,b,r,m,g,v);if(!(1&r)){var C=x&&f.call(e,"__wrapped__"),A=j&&f.call(t,"__wrapped__");if(C||A){var T=C?e.value():e,S=A?t.value():t;return v||(v=new n),g(T,S,r,m,v)}}return!!E&&(v||(v=new n),o(e,t,r,m,g,v))}},"./node_modules/lodash/_baseIsMatch.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Stack.js"),s=r("./node_modules/lodash/_baseIsEqual.js");e.exports=function(e,t,r,i){var o=r.length,a=o,l=!i;if(null==e)return!a;for(e=Object(e);o--;){var u=r[o];if(l&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++o<a;){var h=(u=r[o])[0],c=e[h],d=u[1];if(l&&u[2]){if(void 0===c&&!(h in e))return!1}else{var p=new n;if(i)var f=i(c,d,h,e,t,p);if(!(void 0===f?s(d,c,3,i,p):f))return!1}}return!0}},"./node_modules/lodash/_baseIsNative.js":(e,t,r)=>{var n=r("./node_modules/lodash/isFunction.js"),s=r("./node_modules/lodash/_isMasked.js"),i=r("./node_modules/lodash/isObject.js"),o=r("./node_modules/lodash/_toSource.js"),a=/^\[object .+?Constructor\]$/,l=Function.prototype,u=Object.prototype,h=l.toString,c=u.hasOwnProperty,d=RegExp("^"+h.call(c).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||s(e))&&(n(e)?d:a).test(o(e))}},"./node_modules/lodash/_baseIsTypedArray.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isLength.js"),i=r("./node_modules/lodash/isObjectLike.js"),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&s(e.length)&&!!o[n(e)]}},"./node_modules/lodash/_baseIteratee.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseMatches.js"),s=r("./node_modules/lodash/_baseMatchesProperty.js"),i=r("./node_modules/lodash/identity.js"),o=r("./node_modules/lodash/isArray.js"),a=r("./node_modules/lodash/property.js");e.exports=function(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?o(e)?s(e[0],e[1]):n(e):a(e)}},"./node_modules/lodash/_baseKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isPrototype.js"),s=r("./node_modules/lodash/_nativeKeys.js"),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!n(e))return s(e);var t=[];for(var r in Object(e))i.call(e,r)&&"constructor"!=r&&t.push(r);return t}},"./node_modules/lodash/_baseMap.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseEach.js"),s=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){var r=-1,i=s(e)?Array(e.length):[];return n(e,(function(e,n,s){i[++r]=t(e,n,s)})),i}},"./node_modules/lodash/_baseMatches.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsMatch.js"),s=r("./node_modules/lodash/_getMatchData.js"),i=r("./node_modules/lodash/_matchesStrictComparable.js");e.exports=function(e){var t=s(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(r){return r===e||n(r,e,t)}}},"./node_modules/lodash/_baseMatchesProperty.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsEqual.js"),s=r("./node_modules/lodash/get.js"),i=r("./node_modules/lodash/hasIn.js"),o=r("./node_modules/lodash/_isKey.js"),a=r("./node_modules/lodash/_isStrictComparable.js"),l=r("./node_modules/lodash/_matchesStrictComparable.js"),u=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t){return o(e)&&a(t)?l(u(e),t):function(r){var o=s(r,e);return void 0===o&&o===t?i(r,e):n(t,o,3)}}},"./node_modules/lodash/_baseProperty.js":e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},"./node_modules/lodash/_basePropertyDeep.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGet.js");e.exports=function(e){return function(t){return n(t,e)}}},"./node_modules/lodash/_baseTimes.js":e=>{e.exports=function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}},"./node_modules/lodash/_baseToString.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_arrayMap.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/isSymbol.js"),a=n?n.prototype:void 0,l=a?a.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(i(t))return s(t,e)+"";if(o(t))return l?l.call(t):"";var r=t+"";return"0"==r&&1/t==-Infinity?"-0":r}},"./node_modules/lodash/_baseUnary.js":e=>{e.exports=function(e){return function(t){return e(t)}}},"./node_modules/lodash/_cacheHas.js":e=>{e.exports=function(e,t){return e.has(t)}},"./node_modules/lodash/_castFunction.js":(e,t,r)=>{var n=r("./node_modules/lodash/identity.js");e.exports=function(e){return"function"==typeof e?e:n}},"./node_modules/lodash/_castPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArray.js"),s=r("./node_modules/lodash/_isKey.js"),i=r("./node_modules/lodash/_stringToPath.js"),o=r("./node_modules/lodash/toString.js");e.exports=function(e,t){return n(e)?e:s(e,t)?[e]:i(o(e))}},"./node_modules/lodash/_coreJsData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_root.js")["__core-js_shared__"];e.exports=n},"./node_modules/lodash/_createBaseEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e,t){return function(r,s){if(null==r)return r;if(!n(r))return e(r,s);for(var i=r.length,o=t?i:-1,a=Object(r);(t?o--:++o<i)&&!1!==s(a[o],o,a););return r}}},"./node_modules/lodash/_createBaseFor.js":e=>{e.exports=function(e){return function(t,r,n){for(var s=-1,i=Object(t),o=n(t),a=o.length;a--;){var l=o[e?a:++s];if(!1===r(i[l],l,i))break}return t}}},"./node_modules/lodash/_equalArrays.js":(e,t,r)=>{var n=r("./node_modules/lodash/_SetCache.js"),s=r("./node_modules/lodash/_arraySome.js"),i=r("./node_modules/lodash/_cacheHas.js");e.exports=function(e,t,r,o,a,l){var u=1&r,h=e.length,c=t.length;if(h!=c&&!(u&&c>h))return!1;var d=l.get(e),p=l.get(t);if(d&&p)return d==t&&p==e;var f=-1,m=!0,g=2&r?new n:void 0;for(l.set(e,t),l.set(t,e);++f<h;){var v=e[f],_=t[f];if(o)var y=u?o(_,v,f,t,e,l):o(v,_,f,e,t,l);if(void 0!==y){if(y)continue;m=!1;break}if(g){if(!s(t,(function(e,t){if(!i(g,t)&&(v===e||a(v,e,r,o,l)))return g.push(t)}))){m=!1;break}}else if(v!==_&&!a(v,_,r,o,l)){m=!1;break}}return l.delete(e),l.delete(t),m}},"./node_modules/lodash/_equalByTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=r("./node_modules/lodash/_Uint8Array.js"),i=r("./node_modules/lodash/eq.js"),o=r("./node_modules/lodash/_equalArrays.js"),a=r("./node_modules/lodash/_mapToArray.js"),l=r("./node_modules/lodash/_setToArray.js"),u=n?n.prototype:void 0,h=u?u.valueOf:void 0;e.exports=function(e,t,r,n,u,c,d){switch(r){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!c(new s(e),new s(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var p=a;case"[object Set]":var f=1&n;if(p||(p=l),e.size!=t.size&&!f)return!1;var m=d.get(e);if(m)return m==t;n|=2,d.set(e,t);var g=o(p(e),p(t),n,u,c,d);return d.delete(e),g;case"[object Symbol]":if(h)return h.call(e)==h.call(t)}return!1}},"./node_modules/lodash/_equalObjects.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getAllKeys.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e,t,r,i,o,a){var l=1&r,u=n(e),h=u.length;if(h!=n(t).length&&!l)return!1;for(var c=h;c--;){var d=u[c];if(!(l?d in t:s.call(t,d)))return!1}var p=a.get(e),f=a.get(t);if(p&&f)return p==t&&f==e;var m=!0;a.set(e,t),a.set(t,e);for(var g=l;++c<h;){var v=e[d=u[c]],_=t[d];if(i)var y=l?i(_,v,d,t,e,a):i(v,_,d,e,t,a);if(!(void 0===y?v===_||o(v,_,r,i,a):y)){m=!1;break}g||(g="constructor"==d)}if(m&&!g){var b=e.constructor,w=t.constructor;b==w||!("constructor"in e)||!("constructor"in t)||"function"==typeof b&&b instanceof b&&"function"==typeof w&&w instanceof w||(m=!1)}return a.delete(e),a.delete(t),m}},"./node_modules/lodash/_freeGlobal.js":(e,t,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=n},"./node_modules/lodash/_getAllKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetAllKeys.js"),s=r("./node_modules/lodash/_getSymbols.js"),i=r("./node_modules/lodash/keys.js");e.exports=function(e){return n(e,i,s)}},"./node_modules/lodash/_getMapData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isKeyable.js");e.exports=function(e,t){var r=e.__data__;return n(t)?r["string"==typeof t?"string":"hash"]:r.map}},"./node_modules/lodash/_getMatchData.js":(e,t,r)=>{var n=r("./node_modules/lodash/_isStrictComparable.js"),s=r("./node_modules/lodash/keys.js");e.exports=function(e){for(var t=s(e),r=t.length;r--;){var i=t[r],o=e[i];t[r]=[i,o,n(o)]}return t}},"./node_modules/lodash/_getNative.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsNative.js"),s=r("./node_modules/lodash/_getValue.js");e.exports=function(e,t){var r=s(e,t);return n(r)?r:void 0}},"./node_modules/lodash/_getRawTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Symbol.js"),s=Object.prototype,i=s.hasOwnProperty,o=s.toString,a=n?n.toStringTag:void 0;e.exports=function(e){var t=i.call(e,a),r=e[a];try{e[a]=void 0;var n=!0}catch(e){}var s=o.call(e);return n&&(t?e[a]=r:delete e[a]),s}},"./node_modules/lodash/_getSymbols.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayFilter.js"),s=r("./node_modules/lodash/stubArray.js"),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,a=o?function(e){return null==e?[]:(e=Object(e),n(o(e),(function(t){return i.call(e,t)})))}:s;e.exports=a},"./node_modules/lodash/_getTag.js":(e,t,r)=>{var n=r("./node_modules/lodash/_DataView.js"),s=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_Promise.js"),o=r("./node_modules/lodash/_Set.js"),a=r("./node_modules/lodash/_WeakMap.js"),l=r("./node_modules/lodash/_baseGetTag.js"),u=r("./node_modules/lodash/_toSource.js"),h="[object Map]",c="[object Promise]",d="[object Set]",p="[object WeakMap]",f="[object DataView]",m=u(n),g=u(s),v=u(i),_=u(o),y=u(a),b=l;(n&&b(new n(new ArrayBuffer(1)))!=f||s&&b(new s)!=h||i&&b(i.resolve())!=c||o&&b(new o)!=d||a&&b(new a)!=p)&&(b=function(e){var t=l(e),r="[object Object]"==t?e.constructor:void 0,n=r?u(r):"";if(n)switch(n){case m:return f;case g:return h;case v:return c;case _:return d;case y:return p}return t}),e.exports=b},"./node_modules/lodash/_getValue.js":e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},"./node_modules/lodash/_hasPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/_castPath.js"),s=r("./node_modules/lodash/isArguments.js"),i=r("./node_modules/lodash/isArray.js"),o=r("./node_modules/lodash/_isIndex.js"),a=r("./node_modules/lodash/isLength.js"),l=r("./node_modules/lodash/_toKey.js");e.exports=function(e,t,r){for(var u=-1,h=(t=n(t,e)).length,c=!1;++u<h;){var d=l(t[u]);if(!(c=null!=e&&r(e,d)))break;e=e[d]}return c||++u!=h?c:!!(h=null==e?0:e.length)&&a(h)&&o(d,h)&&(i(e)||s(e))}},"./node_modules/lodash/_hashClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(){this.__data__=n?n(null):{},this.size=0}},"./node_modules/lodash/_hashDelete.js":e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},"./node_modules/lodash/_hashGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(n){var r=t[e];return"__lodash_hash_undefined__"===r?void 0:r}return s.call(t,e)?t[e]:void 0}},"./node_modules/lodash/_hashHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js"),s=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return n?void 0!==t[e]:s.call(t,e)}},"./node_modules/lodash/_hashSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_nativeCreate.js");e.exports=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=n&&void 0===t?"__lodash_hash_undefined__":t,this}},"./node_modules/lodash/_isIndex.js":e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,r){var n=typeof e;return!!(r=null==r?9007199254740991:r)&&("number"==n||"symbol"!=n&&t.test(e))&&e>-1&&e%1==0&&e<r}},"./node_modules/lodash/_isKey.js":(e,t,r)=>{var n=r("./node_modules/lodash/isArray.js"),s=r("./node_modules/lodash/isSymbol.js"),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;e.exports=function(e,t){if(n(e))return!1;var r=typeof e;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!s(e))||(o.test(e)||!i.test(e)||null!=t&&e in Object(t))}},"./node_modules/lodash/_isKeyable.js":e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},"./node_modules/lodash/_isMasked.js":(e,t,r)=>{var n,s=r("./node_modules/lodash/_coreJsData.js"),i=(n=/[^.]+$/.exec(s&&s.keys&&s.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";e.exports=function(e){return!!i&&i in e}},"./node_modules/lodash/_isPrototype.js":e=>{var t=Object.prototype;e.exports=function(e){var r=e&&e.constructor;return e===("function"==typeof r&&r.prototype||t)}},"./node_modules/lodash/_isStrictComparable.js":(e,t,r)=>{var n=r("./node_modules/lodash/isObject.js");e.exports=function(e){return e==e&&!n(e)}},"./node_modules/lodash/_listCacheClear.js":e=>{e.exports=function(){this.__data__=[],this.size=0}},"./node_modules/lodash/_listCacheDelete.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js"),s=Array.prototype.splice;e.exports=function(e){var t=this.__data__,r=n(t,e);return!(r<0)&&(r==t.length-1?t.pop():s.call(t,r,1),--this.size,!0)}},"./node_modules/lodash/_listCacheGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){var t=this.__data__,r=n(t,e);return r<0?void 0:t[r][1]}},"./node_modules/lodash/_listCacheHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e){return n(this.__data__,e)>-1}},"./node_modules/lodash/_listCacheSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_assocIndexOf.js");e.exports=function(e,t){var r=this.__data__,s=n(r,e);return s<0?(++this.size,r.push([e,t])):r[s][1]=t,this}},"./node_modules/lodash/_mapCacheClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_Hash.js"),s=r("./node_modules/lodash/_ListCache.js"),i=r("./node_modules/lodash/_Map.js");e.exports=function(){this.size=0,this.__data__={hash:new n,map:new(i||s),string:new n}}},"./node_modules/lodash/_mapCacheDelete.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){var t=n(this,e).delete(e);return this.size-=t?1:0,t}},"./node_modules/lodash/_mapCacheGet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return n(this,e).get(e)}},"./node_modules/lodash/_mapCacheHas.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e){return n(this,e).has(e)}},"./node_modules/lodash/_mapCacheSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getMapData.js");e.exports=function(e,t){var r=n(this,e),s=r.size;return r.set(e,t),this.size+=r.size==s?0:1,this}},"./node_modules/lodash/_mapToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e,n){r[++t]=[n,e]})),r}},"./node_modules/lodash/_matchesStrictComparable.js":e=>{e.exports=function(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}},"./node_modules/lodash/_memoizeCapped.js":(e,t,r)=>{var n=r("./node_modules/lodash/memoize.js");e.exports=function(e){var t=n(e,(function(e){return 500===r.size&&r.clear(),e})),r=t.cache;return t}},"./node_modules/lodash/_nativeCreate.js":(e,t,r)=>{var n=r("./node_modules/lodash/_getNative.js")(Object,"create");e.exports=n},"./node_modules/lodash/_nativeKeys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_overArg.js")(Object.keys,Object);e.exports=n},"./node_modules/lodash/_nodeUtil.js":(e,t,r)=>{e=r.nmd(e);var n=r("./node_modules/lodash/_freeGlobal.js"),s=t&&!t.nodeType&&t,i=s&&e&&!e.nodeType&&e,o=i&&i.exports===s&&n.process,a=function(){try{var e=i&&i.require&&i.require("util").types;return e||o&&o.binding&&o.binding("util")}catch(e){}}();e.exports=a},"./node_modules/lodash/_objectToString.js":e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},"./node_modules/lodash/_overArg.js":e=>{e.exports=function(e,t){return function(r){return e(t(r))}}},"./node_modules/lodash/_root.js":(e,t,r)=>{var n=r("./node_modules/lodash/_freeGlobal.js"),s="object"==typeof self&&self&&self.Object===Object&&self,i=n||s||Function("return this")();e.exports=i},"./node_modules/lodash/_setCacheAdd.js":e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},"./node_modules/lodash/_setCacheHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_setToArray.js":e=>{e.exports=function(e){var t=-1,r=Array(e.size);return e.forEach((function(e){r[++t]=e})),r}},"./node_modules/lodash/_stackClear.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js");e.exports=function(){this.__data__=new n,this.size=0}},"./node_modules/lodash/_stackDelete.js":e=>{e.exports=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}},"./node_modules/lodash/_stackGet.js":e=>{e.exports=function(e){return this.__data__.get(e)}},"./node_modules/lodash/_stackHas.js":e=>{e.exports=function(e){return this.__data__.has(e)}},"./node_modules/lodash/_stackSet.js":(e,t,r)=>{var n=r("./node_modules/lodash/_ListCache.js"),s=r("./node_modules/lodash/_Map.js"),i=r("./node_modules/lodash/_MapCache.js");e.exports=function(e,t){var r=this.__data__;if(r instanceof n){var o=r.__data__;if(!s||o.length<199)return o.push([e,t]),this.size=++r.size,this;r=this.__data__=new i(o)}return r.set(e,t),this.size=r.size,this}},"./node_modules/lodash/_stringToPath.js":(e,t,r)=>{var n=r("./node_modules/lodash/_memoizeCapped.js"),s=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=n((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(s,(function(e,r,n,s){t.push(n?s.replace(i,"$1"):r||e)})),t}));e.exports=o},"./node_modules/lodash/_toKey.js":(e,t,r)=>{var n=r("./node_modules/lodash/isSymbol.js");e.exports=function(e){if("string"==typeof e||n(e))return e;var t=e+"";return"0"==t&&1/e==-Infinity?"-0":t}},"./node_modules/lodash/_toSource.js":e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},"./node_modules/lodash/each.js":(e,t,r)=>{e.exports=r("./node_modules/lodash/forEach.js")},"./node_modules/lodash/eq.js":e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},"./node_modules/lodash/forEach.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayEach.js"),s=r("./node_modules/lodash/_baseEach.js"),i=r("./node_modules/lodash/_castFunction.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?n:s)(e,i(t))}},"./node_modules/lodash/get.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGet.js");e.exports=function(e,t,r){var s=null==e?void 0:n(e,t);return void 0===s?r:s}},"./node_modules/lodash/hasIn.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseHasIn.js"),s=r("./node_modules/lodash/_hasPath.js");e.exports=function(e,t){return null!=e&&s(e,t,n)}},"./node_modules/lodash/identity.js":e=>{e.exports=function(e){return e}},"./node_modules/lodash/isArguments.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsArguments.js"),s=r("./node_modules/lodash/isObjectLike.js"),i=Object.prototype,o=i.hasOwnProperty,a=i.propertyIsEnumerable,l=n(function(){return arguments}())?n:function(e){return s(e)&&o.call(e,"callee")&&!a.call(e,"callee")};e.exports=l},"./node_modules/lodash/isArray.js":e=>{var t=Array.isArray;e.exports=t},"./node_modules/lodash/isArrayLike.js":(e,t,r)=>{var n=r("./node_modules/lodash/isFunction.js"),s=r("./node_modules/lodash/isLength.js");e.exports=function(e){return null!=e&&s(e.length)&&!n(e)}},"./node_modules/lodash/isBuffer.js":(e,t,r)=>{e=r.nmd(e);var n=r("./node_modules/lodash/_root.js"),s=r("./node_modules/lodash/stubFalse.js"),i=t&&!t.nodeType&&t,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i?n.Buffer:void 0,l=(a?a.isBuffer:void 0)||s;e.exports=l},"./node_modules/lodash/isFunction.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObject.js");e.exports=function(e){if(!s(e))return!1;var t=n(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},"./node_modules/lodash/isLength.js":e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},"./node_modules/lodash/isObject.js":e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},"./node_modules/lodash/isObjectLike.js":e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},"./node_modules/lodash/isSymbol.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseGetTag.js"),s=r("./node_modules/lodash/isObjectLike.js");e.exports=function(e){return"symbol"==typeof e||s(e)&&"[object Symbol]"==n(e)}},"./node_modules/lodash/isTypedArray.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseIsTypedArray.js"),s=r("./node_modules/lodash/_baseUnary.js"),i=r("./node_modules/lodash/_nodeUtil.js"),o=i&&i.isTypedArray,a=o?s(o):n;e.exports=a},"./node_modules/lodash/keys.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayLikeKeys.js"),s=r("./node_modules/lodash/_baseKeys.js"),i=r("./node_modules/lodash/isArrayLike.js");e.exports=function(e){return i(e)?n(e):s(e)}},"./node_modules/lodash/map.js":(e,t,r)=>{var n=r("./node_modules/lodash/_arrayMap.js"),s=r("./node_modules/lodash/_baseIteratee.js"),i=r("./node_modules/lodash/_baseMap.js"),o=r("./node_modules/lodash/isArray.js");e.exports=function(e,t){return(o(e)?n:i)(e,s(t,3))}},"./node_modules/lodash/memoize.js":(e,t,r)=>{var n=r("./node_modules/lodash/_MapCache.js");function s(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var r=function(){var n=arguments,s=t?t.apply(this,n):n[0],i=r.cache;if(i.has(s))return i.get(s);var o=e.apply(this,n);return r.cache=i.set(s,o)||i,o};return r.cache=new(s.Cache||n),r}s.Cache=n,e.exports=s},"./node_modules/lodash/property.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseProperty.js"),s=r("./node_modules/lodash/_basePropertyDeep.js"),i=r("./node_modules/lodash/_isKey.js"),o=r("./node_modules/lodash/_toKey.js");e.exports=function(e){return i(e)?n(o(e)):s(e)}},"./node_modules/lodash/stubArray.js":e=>{e.exports=function(){return[]}},"./node_modules/lodash/stubFalse.js":e=>{e.exports=function(){return!1}},"./node_modules/lodash/toString.js":(e,t,r)=>{var n=r("./node_modules/lodash/_baseToString.js");e.exports=function(e){return null==e?"":n(e)}},"./node_modules/loglevel/lib/loglevel.js":function(e,t,r){var n,s;!function(i,o){"use strict";void 0===(s="function"==typeof(n=function(){var e=function(){},t="undefined",r=typeof window!==t&&typeof window.navigator!==t&&/Trident\/|MSIE /.test(window.navigator.userAgent),n=["trace","debug","info","warn","error"];function s(e,t){var r=e[t];if("function"==typeof r.bind)return r.bind(e);try{return Function.prototype.bind.call(r,e)}catch(t){return function(){return Function.prototype.apply.apply(r,[e,arguments])}}}function i(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function o(n){return"debug"===n&&(n="log"),typeof console!==t&&("trace"===n&&r?i:void 0!==console[n]?s(console,n):void 0!==console.log?s(console,"log"):e)}function a(t,r){for(var s=0;s<n.length;s++){var i=n[s];this[i]=s<t?e:this.methodFactory(i,t,r)}this.log=this.debug}function l(e,r,n){return function(){typeof console!==t&&(a.call(this,r,n),this[e].apply(this,arguments))}}function u(e,t,r){return o(e)||l.apply(this,arguments)}function h(e,r,s){var i,o=this,l="loglevel";function h(e){var r=(n[e]||"silent").toUpperCase();if(typeof window!==t&&l){try{return void(window.localStorage[l]=r)}catch(e){}try{window.document.cookie=encodeURIComponent(l)+"="+r+";"}catch(e){}}}function c(){var e;if(typeof window!==t&&l){try{e=window.localStorage[l]}catch(e){}if(typeof e===t)try{var r=window.document.cookie,n=r.indexOf(encodeURIComponent(l)+"=");-1!==n&&(e=/^([^;]+)/.exec(r.slice(n))[1])}catch(e){}return void 0===o.levels[e]&&(e=void 0),e}}"string"==typeof e?l+=":"+e:"symbol"==typeof e&&(l=void 0),o.name=e,o.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},o.methodFactory=s||u,o.getLevel=function(){return i},o.setLevel=function(r,n){if("string"==typeof r&&void 0!==o.levels[r.toUpperCase()]&&(r=o.levels[r.toUpperCase()]),!("number"==typeof r&&r>=0&&r<=o.levels.SILENT))throw"log.setLevel() called with invalid level: "+r;if(i=r,!1!==n&&h(r),a.call(o,r,e),typeof console===t&&r<o.levels.SILENT)return"No console available for logging"},o.setDefaultLevel=function(e){c()||o.setLevel(e,!1)},o.enableAll=function(e){o.setLevel(o.levels.TRACE,e)},o.disableAll=function(e){o.setLevel(o.levels.SILENT,e)};var d=c();null==d&&(d=null==r?"WARN":r),o.setLevel(d,!1)}var c=new h,d={};c.getLogger=function(e){if("symbol"!=typeof e&&"string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var t=d[e];return t||(t=d[e]=new h(e,c.getLevel(),c.methodFactory)),t};var p=typeof window!==t?window.log:void 0;return c.noConflict=function(){return typeof window!==t&&window.log===c&&(window.log=p),c},c.getLoggers=function(){return d},c.default=c,c})?n.call(t,r,t,e):n)||(e.exports=s)}()},"./node_modules/normalize-wheel/index.js":(e,t,r)=>{e.exports=r("./node_modules/normalize-wheel/src/normalizeWheel.js")},"./node_modules/normalize-wheel/src/ExecutionEnvironment.js":e=>{"use strict";var t=!("undefined"==typeof window||!window.document||!window.document.createElement),r={canUseDOM:t,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:t&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:t&&!!window.screen,isInWorker:!t};e.exports=r},"./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js":e=>{var t,r,n,s,i,o,a,l,u,h,c,d,p,f,m,g=!1;function v(){if(!g){g=!0;var e=navigator.userAgent,v=/(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(e),_=/(Mac OS X)|(Windows)|(Linux)/.exec(e);if(d=/\b(iPhone|iP[ao]d)/.exec(e),p=/\b(iP[ao]d)/.exec(e),h=/Android/i.exec(e),f=/FBAN\/\w+;/i.exec(e),m=/Mobile/i.exec(e),c=!!/Win64/.exec(e),v){(t=v[1]?parseFloat(v[1]):v[5]?parseFloat(v[5]):NaN)&&document&&document.documentMode&&(t=document.documentMode);var y=/(?:Trident\/(\d+.\d+))/.exec(e);o=y?parseFloat(y[1])+4:t,r=v[2]?parseFloat(v[2]):NaN,n=v[3]?parseFloat(v[3]):NaN,(s=v[4]?parseFloat(v[4]):NaN)?(v=/(?:Chrome\/(\d+\.\d+))/.exec(e),i=v&&v[1]?parseFloat(v[1]):NaN):i=NaN}else t=r=n=i=s=NaN;if(_){if(_[1]){var b=/(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(e);a=!b||parseFloat(b[1].replace("_","."))}else a=!1;l=!!_[2],u=!!_[3]}else a=l=u=!1}}var _={ie:function(){return v()||t},ieCompatibilityMode:function(){return v()||o>t},ie64:function(){return _.ie()&&c},firefox:function(){return v()||r},opera:function(){return v()||n},webkit:function(){return v()||s},safari:function(){return _.webkit()},chrome:function(){return v()||i},windows:function(){return v()||l},osx:function(){return v()||a},linux:function(){return v()||u},iphone:function(){return v()||d},mobile:function(){return v()||d||p||h||m},nativeApp:function(){return v()||f},android:function(){return v()||h},ipad:function(){return v()||p}};e.exports=_},"./node_modules/normalize-wheel/src/isEventSupported.js":(e,t,r)=>{"use strict";var n,s=r("./node_modules/normalize-wheel/src/ExecutionEnvironment.js");s.canUseDOM&&(n=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("","")),e.exports=function(e,t){if(!s.canUseDOM||t&&!("addEventListener"in document))return!1;var r="on"+e,i=r in document;if(!i){var o=document.createElement("div");o.setAttribute(r,"return;"),i="function"==typeof o[r]}return!i&&n&&"wheel"===e&&(i=document.implementation.hasFeature("Events.wheel","3.0")),i}},"./node_modules/normalize-wheel/src/normalizeWheel.js":(e,t,r)=>{"use strict";var n=r("./node_modules/normalize-wheel/src/UserAgent_DEPRECATED.js"),s=r("./node_modules/normalize-wheel/src/isEventSupported.js");function i(e){var t=0,r=0,n=0,s=0;return"detail"in e&&(r=e.detail),"wheelDelta"in e&&(r=-e.wheelDelta/120),"wheelDeltaY"in e&&(r=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=r,r=0),n=10*t,s=10*r,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(n=e.deltaX),(n||s)&&e.deltaMode&&(1==e.deltaMode?(n*=40,s*=40):(n*=800,s*=800)),n&&!t&&(t=n<1?-1:1),s&&!r&&(r=s<1?-1:1),{spinX:t,spinY:r,pixelX:n,pixelY:s}}i.getEventType=function(){return n.firefox()?"DOMMouseScroll":s("wheel")?"wheel":"mousewheel"},e.exports=i},"./node_modules/ogl/src/core/Camera.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Camera:()=>u});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat4.js"),i=r("./node_modules/ogl/src/math/Vec3.js");const o=new s.Mat4,a=new i.Vec3,l=new i.Vec3;class u extends n.Transform{constructor(e,{near:t=.1,far:r=100,fov:n=45,aspect:o=1,left:a,right:l,bottom:u,top:h,zoom:c=1}={}){super(),Object.assign(this,{near:t,far:r,fov:n,aspect:o,left:a,right:l,bottom:u,top:h,zoom:c}),this.projectionMatrix=new s.Mat4,this.viewMatrix=new s.Mat4,this.projectionViewMatrix=new s.Mat4,this.worldPosition=new i.Vec3,this.type=a||l?"orthographic":"perspective","orthographic"===this.type?this.orthographic():this.perspective()}perspective({near:e=this.near,far:t=this.far,fov:r=this.fov,aspect:n=this.aspect}={}){return Object.assign(this,{near:e,far:t,fov:r,aspect:n}),this.projectionMatrix.fromPerspective({fov:r*(Math.PI/180),aspect:n,near:e,far:t}),this.type="perspective",this}orthographic({near:e=this.near,far:t=this.far,left:r=this.left,right:n=this.right,bottom:s=this.bottom,top:i=this.top,zoom:o=this.zoom}={}){return Object.assign(this,{near:e,far:t,left:r,right:n,bottom:s,top:i,zoom:o}),r/=o,n/=o,s/=o,i/=o,this.projectionMatrix.fromOrthogonal({left:r,right:n,bottom:s,top:i,near:e,far:t}),this.type="orthographic",this}updateMatrixWorld(){return super.updateMatrixWorld(),this.viewMatrix.inverse(this.worldMatrix),this.worldMatrix.getTranslation(this.worldPosition),this.projectionViewMatrix.multiply(this.projectionMatrix,this.viewMatrix),this}lookAt(e){return super.lookAt(e,!0),this}project(e){return e.applyMatrix4(this.viewMatrix),e.applyMatrix4(this.projectionMatrix),this}unproject(e){return e.applyMatrix4(o.inverse(this.projectionMatrix)),e.applyMatrix4(this.worldMatrix),this}updateFrustum(){this.frustum||(this.frustum=[new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3,new i.Vec3]);const e=this.projectionViewMatrix;this.frustum[0].set(e[3]-e[0],e[7]-e[4],e[11]-e[8]).constant=e[15]-e[12],this.frustum[1].set(e[3]+e[0],e[7]+e[4],e[11]+e[8]).constant=e[15]+e[12],this.frustum[2].set(e[3]+e[1],e[7]+e[5],e[11]+e[9]).constant=e[15]+e[13],this.frustum[3].set(e[3]-e[1],e[7]-e[5],e[11]-e[9]).constant=e[15]-e[13],this.frustum[4].set(e[3]-e[2],e[7]-e[6],e[11]-e[10]).constant=e[15]-e[14],this.frustum[5].set(e[3]+e[2],e[7]+e[6],e[11]+e[10]).constant=e[15]+e[14];for(let e=0;e<6;e++){const t=1/this.frustum[e].distance();this.frustum[e].multiply(t),this.frustum[e].constant*=t}}frustumIntersectsMesh(e){if(!e.geometry.attributes.position)return!0;if(e.geometry.bounds&&e.geometry.bounds.radius!==1/0||e.geometry.computeBoundingSphere(),!e.geometry.bounds)return!0;const t=a;t.copy(e.geometry.bounds.center),t.applyMatrix4(e.worldMatrix);const r=e.geometry.bounds.radius*e.worldMatrix.getMaxScaleOnAxis();return this.frustumIntersectsSphere(t,r)}frustumIntersectsSphere(e,t){const r=l;for(let n=0;n<6;n++){const s=this.frustum[n];if(r.copy(s).dot(e)+s.constant<-t)return!1}return!0}}},"./node_modules/ogl/src/core/Geometry.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Geometry:()=>l});var n=r("./node_modules/ogl/src/math/Vec3.js");const s=new n.Vec3;let i=1,o=1,a=!1;class l{constructor(e,t={}){e.canvas||console.error("gl not passed as first argument to Geometry"),this.gl=e,this.attributes=t,this.id=i++,this.VAOs={},this.drawRange={start:0,count:0},this.instancedCount=0,this.gl.renderer.bindVertexArray(null),this.gl.renderer.currentGeometry=null,this.glState=this.gl.renderer.state;for(let e in t)this.addAttribute(e,t[e])}addAttribute(e,t){if(this.attributes[e]=t,t.id=o++,t.size=t.size||1,t.type=t.type||(t.data.constructor===Float32Array?this.gl.FLOAT:t.data.constructor===Uint16Array?this.gl.UNSIGNED_SHORT:this.gl.UNSIGNED_INT),t.target="index"===e?this.gl.ELEMENT_ARRAY_BUFFER:this.gl.ARRAY_BUFFER,t.normalized=t.normalized||!1,t.stride=t.stride||0,t.offset=t.offset||0,t.count=t.count||(t.stride?t.data.byteLength/t.stride:t.data.length/t.size),t.divisor=t.instanced||0,t.needsUpdate=!1,t.buffer||(t.buffer=this.gl.createBuffer(),this.updateAttribute(t)),t.divisor){if(this.isInstanced=!0,this.instancedCount&&this.instancedCount!==t.count*t.divisor)return console.warn("geometry has multiple instanced buffers of different length"),this.instancedCount=Math.min(this.instancedCount,t.count*t.divisor);this.instancedCount=t.count*t.divisor}else"index"===e?this.drawRange.count=t.count:this.attributes.index||(this.drawRange.count=Math.max(this.drawRange.count,t.count))}updateAttribute(e){this.glState.boundBuffer!==e.buffer&&(this.gl.bindBuffer(e.target,e.buffer),this.glState.boundBuffer=e.buffer),this.gl.bufferData(e.target,e.data,this.gl.STATIC_DRAW),e.needsUpdate=!1}setIndex(e){this.addAttribute("index",e)}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}setInstancedCount(e){this.instancedCount=e}createVAO(e){this.VAOs[e.attributeOrder]=this.gl.renderer.createVertexArray(),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.bindAttributes(e)}bindAttributes(e){e.attributeLocations.forEach(((e,{name:t,type:r})=>{if(!this.attributes[t])return void console.warn(`active attribute ${t} not being supplied`);const n=this.attributes[t];this.gl.bindBuffer(n.target,n.buffer),this.glState.boundBuffer=n.buffer;let s=1;35674===r&&(s=2),35675===r&&(s=3),35676===r&&(s=4);const i=n.size/s,o=1===s?0:s*s*s,a=1===s?0:s*s;for(let t=0;t<s;t++)this.gl.vertexAttribPointer(e+t,i,n.type,n.normalized,n.stride+o,n.offset+t*a),this.gl.enableVertexAttribArray(e+t),this.gl.renderer.vertexAttribDivisor(e+t,n.divisor)})),this.attributes.index&&this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.attributes.index.buffer)}draw({program:e,mode:t=this.gl.TRIANGLES}){this.gl.renderer.currentGeometry!==`${this.id}_${e.attributeOrder}`&&(this.VAOs[e.attributeOrder]||this.createVAO(e),this.gl.renderer.bindVertexArray(this.VAOs[e.attributeOrder]),this.gl.renderer.currentGeometry=`${this.id}_${e.attributeOrder}`),e.attributeLocations.forEach(((e,{name:t})=>{const r=this.attributes[t];r.needsUpdate&&this.updateAttribute(r)})),this.isInstanced?this.attributes.index?this.gl.renderer.drawElementsInstanced(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start,this.instancedCount):this.gl.renderer.drawArraysInstanced(t,this.drawRange.start,this.drawRange.count,this.instancedCount):this.attributes.index?this.gl.drawElements(t,this.drawRange.count,this.attributes.index.type,this.attributes.index.offset+2*this.drawRange.start):this.gl.drawArrays(t,this.drawRange.start,this.drawRange.count)}getPosition(){const e=this.attributes.position;return e.data?e:a?void 0:(console.warn("No position buffer data found to compute bounds"),a=!0)}computeBoundingBox(e){e||(e=this.getPosition());const t=e.data,r=e.offset||0,s=e.stride||e.size;this.bounds||(this.bounds={min:new n.Vec3,max:new n.Vec3,center:new n.Vec3,scale:new n.Vec3,radius:1/0});const i=this.bounds.min,o=this.bounds.max,a=this.bounds.center,l=this.bounds.scale;i.set(1/0),o.set(-1/0);for(let e=r,n=t.length;e<n;e+=s){const r=t[e],n=t[e+1],s=t[e+2];i.x=Math.min(r,i.x),i.y=Math.min(n,i.y),i.z=Math.min(s,i.z),o.x=Math.max(r,o.x),o.y=Math.max(n,o.y),o.z=Math.max(s,o.z)}l.sub(o,i),a.add(i,o).divide(2)}computeBoundingSphere(e){e||(e=this.getPosition());const t=e.data,r=e.offset||0,n=e.stride||e.size;this.bounds||this.computeBoundingBox(e);let i=0;for(let e=r,o=t.length;e<o;e+=n)s.fromArray(t,e),i=Math.max(i,this.bounds.center.squaredDistance(s));this.bounds.radius=Math.sqrt(i)}remove(){for(let e in this.VAOs)this.gl.renderer.deleteVertexArray(this.VAOs[e]),delete this.VAOs[e];for(let e in this.attributes)this.gl.deleteBuffer(this.attributes[e].buffer),delete this.attributes[e]}}},"./node_modules/ogl/src/core/Mesh.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mesh:()=>a});var n=r("./node_modules/ogl/src/core/Transform.js"),s=r("./node_modules/ogl/src/math/Mat3.js"),i=r("./node_modules/ogl/src/math/Mat4.js");let o=0;class a extends n.Transform{constructor(e,{geometry:t,program:r,mode:n=e.TRIANGLES,frustumCulled:a=!0,renderOrder:l=0}={}){super(),e.canvas||console.error("gl not passed as first argument to Mesh"),this.gl=e,this.id=o++,this.geometry=t,this.program=r,this.mode=n,this.frustumCulled=a,this.renderOrder=l,this.modelViewMatrix=new i.Mat4,this.normalMatrix=new s.Mat3,this.beforeRenderCallbacks=[],this.afterRenderCallbacks=[]}onBeforeRender(e){return this.beforeRenderCallbacks.push(e),this}onAfterRender(e){return this.afterRenderCallbacks.push(e),this}draw({camera:e}={}){this.beforeRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e}))),e&&(this.program.uniforms.modelMatrix||Object.assign(this.program.uniforms,{modelMatrix:{value:null},viewMatrix:{value:null},modelViewMatrix:{value:null},normalMatrix:{value:null},projectionMatrix:{value:null},cameraPosition:{value:null}}),this.program.uniforms.projectionMatrix.value=e.projectionMatrix,this.program.uniforms.cameraPosition.value=e.worldPosition,this.program.uniforms.viewMatrix.value=e.viewMatrix,this.modelViewMatrix.multiply(e.viewMatrix,this.worldMatrix),this.normalMatrix.getNormalMatrix(this.modelViewMatrix),this.program.uniforms.modelMatrix.value=this.worldMatrix,this.program.uniforms.modelViewMatrix.value=this.modelViewMatrix,this.program.uniforms.normalMatrix.value=this.normalMatrix);let t=this.program.cullFace&&this.worldMatrix.determinant()<0;this.program.use({flipFaces:t}),this.geometry.draw({mode:this.mode,program:this.program}),this.afterRenderCallbacks.forEach((t=>t&&t({mesh:this,camera:e})))}}},"./node_modules/ogl/src/core/Program.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Program:()=>i});let n=1;const s={};class i{constructor(e,{vertex:t,fragment:r,uniforms:s={},transparent:i=!1,cullFace:o=e.BACK,frontFace:l=e.CCW,depthTest:u=!0,depthWrite:h=!0,depthFunc:c=e.LESS}={}){e.canvas||console.error("gl not passed as fist argument to Program"),this.gl=e,this.uniforms=s,this.id=n++,t||console.warn("vertex shader not supplied"),r||console.warn("fragment shader not supplied"),this.transparent=i,this.cullFace=o,this.frontFace=l,this.depthTest=u,this.depthWrite=h,this.depthFunc=c,this.blendFunc={},this.blendEquation={},this.transparent&&!this.blendFunc.src&&(this.gl.renderer.premultipliedAlpha?this.setBlendFunc(this.gl.ONE,this.gl.ONE_MINUS_SRC_ALPHA):this.setBlendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA));const d=e.createShader(e.VERTEX_SHADER);e.shaderSource(d,t),e.compileShader(d),""!==e.getShaderInfoLog(d)&&console.warn(`${e.getShaderInfoLog(d)}\nVertex Shader\n${a(t)}`);const p=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(p,r),e.compileShader(p),""!==e.getShaderInfoLog(p)&&console.warn(`${e.getShaderInfoLog(p)}\nFragment Shader\n${a(r)}`),this.program=e.createProgram(),e.attachShader(this.program,d),e.attachShader(this.program,p),e.linkProgram(this.program),!e.getProgramParameter(this.program,e.LINK_STATUS))return console.warn(e.getProgramInfoLog(this.program));e.deleteShader(d),e.deleteShader(p),this.uniformLocations=new Map;let f=e.getProgramParameter(this.program,e.ACTIVE_UNIFORMS);for(let t=0;t<f;t++){let r=e.getActiveUniform(this.program,t);this.uniformLocations.set(r,e.getUniformLocation(this.program,r.name));const n=r.name.match(/(\w+)/g);r.uniformName=n[0],3===n.length?(r.isStructArray=!0,r.structIndex=Number(n[1]),r.structProperty=n[2]):2===n.length&&isNaN(Number(n[1]))&&(r.isStruct=!0,r.structProperty=n[1])}this.attributeLocations=new Map;const m=[],g=e.getProgramParameter(this.program,e.ACTIVE_ATTRIBUTES);for(let t=0;t<g;t++){const r=e.getActiveAttrib(this.program,t),n=e.getAttribLocation(this.program,r.name);m[n]=r.name,this.attributeLocations.set(r,n)}this.attributeOrder=m.join("")}setBlendFunc(e,t,r,n){this.blendFunc.src=e,this.blendFunc.dst=t,this.blendFunc.srcAlpha=r,this.blendFunc.dstAlpha=n,e&&(this.transparent=!0)}setBlendEquation(e,t){this.blendEquation.modeRGB=e,this.blendEquation.modeAlpha=t}applyState(){this.depthTest?this.gl.renderer.enable(this.gl.DEPTH_TEST):this.gl.renderer.disable(this.gl.DEPTH_TEST),this.cullFace?this.gl.renderer.enable(this.gl.CULL_FACE):this.gl.renderer.disable(this.gl.CULL_FACE),this.blendFunc.src?this.gl.renderer.enable(this.gl.BLEND):this.gl.renderer.disable(this.gl.BLEND),this.cullFace&&this.gl.renderer.setCullFace(this.cullFace),this.gl.renderer.setFrontFace(this.frontFace),this.gl.renderer.setDepthMask(this.depthWrite),this.gl.renderer.setDepthFunc(this.depthFunc),this.blendFunc.src&&this.gl.renderer.setBlendFunc(this.blendFunc.src,this.blendFunc.dst,this.blendFunc.srcAlpha,this.blendFunc.dstAlpha),this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB,this.blendEquation.modeAlpha)}use({flipFaces:e=!1}={}){let t=-1;this.gl.renderer.currentProgram===this.id||(this.gl.useProgram(this.program),this.gl.renderer.currentProgram=this.id),this.uniformLocations.forEach(((e,r)=>{let n=r.uniformName,s=this.uniforms[n];if(r.isStruct&&(s=s[r.structProperty],n+=`.${r.structProperty}`),r.isStructArray&&(s=s[r.structIndex][r.structProperty],n+=`[${r.structIndex}].${r.structProperty}`),!s)return u(`Active uniform ${n} has not been supplied`);if(s&&void 0===s.value)return u(`${n} uniform is missing a value parameter`);if(s.value.texture)return t+=1,s.value.update(t),o(this.gl,r.type,e,t);if(s.value.length&&s.value[0].texture){const n=[];return s.value.forEach((e=>{t+=1,e.update(t),n.push(t)})),o(this.gl,r.type,e,n)}o(this.gl,r.type,e,s.value)})),this.applyState(),e&&this.gl.renderer.setFrontFace(this.frontFace===this.gl.CCW?this.gl.CW:this.gl.CCW)}remove(){this.gl.deleteProgram(this.program)}}function o(e,t,r,n){n=n.length?function(e){const t=e.length,r=e[0].length;if(void 0===r)return e;const n=t*r;let i=s[n];i||(s[n]=i=new Float32Array(n));for(let n=0;n<t;n++)i.set(e[n],n*r);return i}(n):n;const i=e.renderer.state.uniformLocations.get(r);if(n.length)if(void 0===i||i.length!==n.length)e.renderer.state.uniformLocations.set(r,n.slice(0));else{if(function(e,t){if(e.length!==t.length)return!1;for(let r=0,n=e.length;r<n;r++)if(e[r]!==t[r])return!1;return!0}(i,n))return;i.set?i.set(n):function(e,t){for(let r=0,n=e.length;r<n;r++)e[r]=t[r]}(i,n),e.renderer.state.uniformLocations.set(r,i)}else{if(i===n)return;e.renderer.state.uniformLocations.set(r,n)}switch(t){case 5126:return n.length?e.uniform1fv(r,n):e.uniform1f(r,n);case 35664:return e.uniform2fv(r,n);case 35665:return e.uniform3fv(r,n);case 35666:return e.uniform4fv(r,n);case 35670:case 5124:case 35678:case 35680:return n.length?e.uniform1iv(r,n):e.uniform1i(r,n);case 35671:case 35667:return e.uniform2iv(r,n);case 35672:case 35668:return e.uniform3iv(r,n);case 35673:case 35669:return e.uniform4iv(r,n);case 35674:return e.uniformMatrix2fv(r,!1,n);case 35675:return e.uniformMatrix3fv(r,!1,n);case 35676:return e.uniformMatrix4fv(r,!1,n)}}function a(e){let t=e.split("\n");for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join("\n")}let l=0;function u(e){l>100||(console.warn(e),l++,l>100&&console.warn("More than 100 program warnings - stopping logs."))}},"./node_modules/ogl/src/core/Renderer.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Renderer:()=>i});const n=new(r("./node_modules/ogl/src/math/Vec3.js").Vec3);let s=1;class i{constructor({canvas:e=document.createElement("canvas"),width:t=300,height:r=150,dpr:n=1,alpha:i=!1,depth:o=!0,stencil:a=!1,antialias:l=!1,premultipliedAlpha:u=!1,preserveDrawingBuffer:h=!1,powerPreference:c="default",autoClear:d=!0,webgl:p=2}={}){const f={alpha:i,depth:o,stencil:a,antialias:l,premultipliedAlpha:u,preserveDrawingBuffer:h,powerPreference:c};this.dpr=n,this.alpha=i,this.color=!0,this.depth=o,this.stencil=a,this.premultipliedAlpha=u,this.autoClear=d,this.id=s++,2===p&&(this.gl=e.getContext("webgl2",f)),this.isWebgl2=!!this.gl,this.gl||(this.gl=e.getContext("webgl",f)||e.getContext("experimental-webgl",f)),this.gl||console.error("unable to create webgl context"),this.gl.renderer=this,this.setSize(t,r),this.state={},this.state.blendFunc={src:this.gl.ONE,dst:this.gl.ZERO},this.state.blendEquation={modeRGB:this.gl.FUNC_ADD},this.state.cullFace=null,this.state.frontFace=this.gl.CCW,this.state.depthMask=!0,this.state.depthFunc=this.gl.LESS,this.state.premultiplyAlpha=!1,this.state.flipY=!1,this.state.unpackAlignment=4,this.state.framebuffer=null,this.state.viewport={width:null,height:null},this.state.textureUnits=[],this.state.activeTextureUnit=0,this.state.boundBuffer=null,this.state.uniformLocations=new Map,this.extensions={},this.isWebgl2?(this.getExtension("EXT_color_buffer_float"),this.getExtension("OES_texture_float_linear")):(this.getExtension("OES_texture_float"),this.getExtension("OES_texture_float_linear"),this.getExtension("OES_texture_half_float"),this.getExtension("OES_texture_half_float_linear"),this.getExtension("OES_element_index_uint"),this.getExtension("OES_standard_derivatives"),this.getExtension("EXT_sRGB"),this.getExtension("WEBGL_depth_texture"),this.getExtension("WEBGL_draw_buffers")),this.vertexAttribDivisor=this.getExtension("ANGLE_instanced_arrays","vertexAttribDivisor","vertexAttribDivisorANGLE"),this.drawArraysInstanced=this.getExtension("ANGLE_instanced_arrays","drawArraysInstanced","drawArraysInstancedANGLE"),this.drawElementsInstanced=this.getExtension("ANGLE_instanced_arrays","drawElementsInstanced","drawElementsInstancedANGLE"),this.createVertexArray=this.getExtension("OES_vertex_array_object","createVertexArray","createVertexArrayOES"),this.bindVertexArray=this.getExtension("OES_vertex_array_object","bindVertexArray","bindVertexArrayOES"),this.deleteVertexArray=this.getExtension("OES_vertex_array_object","deleteVertexArray","deleteVertexArrayOES"),this.drawBuffers=this.getExtension("WEBGL_draw_buffers","drawBuffers","drawBuffersWEBGL"),this.parameters={},this.parameters.maxTextureUnits=this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS),this.parameters.maxAnisotropy=this.getExtension("EXT_texture_filter_anisotropic")?this.gl.getParameter(this.getExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT):0}setSize(e,t){this.width=e,this.height=t,this.gl.canvas.width=e*this.dpr,this.gl.canvas.height=t*this.dpr,Object.assign(this.gl.canvas.style,{width:e+"px",height:t+"px"})}setViewport(e,t){this.state.viewport.width===e&&this.state.viewport.height===t||(this.state.viewport.width=e,this.state.viewport.height=t,this.gl.viewport(0,0,e,t))}enable(e){!0!==this.state[e]&&(this.gl.enable(e),this.state[e]=!0)}disable(e){!1!==this.state[e]&&(this.gl.disable(e),this.state[e]=!1)}setBlendFunc(e,t,r,n){this.state.blendFunc.src===e&&this.state.blendFunc.dst===t&&this.state.blendFunc.srcAlpha===r&&this.state.blendFunc.dstAlpha===n||(this.state.blendFunc.src=e,this.state.blendFunc.dst=t,this.state.blendFunc.srcAlpha=r,this.state.blendFunc.dstAlpha=n,void 0!==r?this.gl.blendFuncSeparate(e,t,r,n):this.gl.blendFunc(e,t))}setBlendEquation(e,t){e=e||this.gl.FUNC_ADD,this.state.blendEquation.modeRGB===e&&this.state.blendEquation.modeAlpha===t||(this.state.blendEquation.modeRGB=e,this.state.blendEquation.modeAlpha=t,void 0!==t?this.gl.blendEquationSeparate(e,t):this.gl.blendEquation(e))}setCullFace(e){this.state.cullFace!==e&&(this.state.cullFace=e,this.gl.cullFace(e))}setFrontFace(e){this.state.frontFace!==e&&(this.state.frontFace=e,this.gl.frontFace(e))}setDepthMask(e){this.state.depthMask!==e&&(this.state.depthMask=e,this.gl.depthMask(e))}setDepthFunc(e){this.state.depthFunc!==e&&(this.state.depthFunc=e,this.gl.depthFunc(e))}activeTexture(e){this.state.activeTextureUnit!==e&&(this.state.activeTextureUnit=e,this.gl.activeTexture(this.gl.TEXTURE0+e))}bindFramebuffer({target:e=this.gl.FRAMEBUFFER,buffer:t=null}={}){this.state.framebuffer!==t&&(this.state.framebuffer=t,this.gl.bindFramebuffer(e,t))}getExtension(e,t,r){return t&&this.gl[t]?this.gl[t].bind(this.gl):(this.extensions[e]||(this.extensions[e]=this.gl.getExtension(e)),t?this.extensions[e]?this.extensions[e][r].bind(this.extensions[e]):null:this.extensions[e])}sortOpaque(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:e.zDepth!==t.zDepth?e.zDepth-t.zDepth:t.id-e.id}sortTransparent(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.zDepth!==t.zDepth?t.zDepth-e.zDepth:t.id-e.id}sortUI(e,t){return e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.program.id!==t.program.id?e.program.id-t.program.id:t.id-e.id}getRenderList({scene:e,camera:t,frustumCull:r,sort:s}){let i=[];if(t&&r&&t.updateFrustum(),e.traverse((e=>{if(!e.visible)return!0;e.draw&&(r&&e.frustumCulled&&t&&!t.frustumIntersectsMesh(e)||i.push(e))})),s){const e=[],r=[],s=[];i.forEach((i=>{i.program.transparent?i.program.depthTest?r.push(i):s.push(i):e.push(i),i.zDepth=0,0===i.renderOrder&&i.program.depthTest&&t&&(i.worldMatrix.getTranslation(n),n.applyMatrix4(t.projectionViewMatrix),i.zDepth=n.z)})),e.sort(this.sortOpaque),r.sort(this.sortTransparent),s.sort(this.sortUI),i=e.concat(r,s)}return i}render({scene:e,camera:t,target:r=null,update:n=!0,sort:s=!0,frustumCull:i=!0,clear:o}){null===r?(this.bindFramebuffer(),this.setViewport(this.width*this.dpr,this.height*this.dpr)):(this.bindFramebuffer(r),this.setViewport(r.width,r.height)),(o||this.autoClear&&!1!==o)&&(!this.depth||r&&!r.depth||(this.enable(this.gl.DEPTH_TEST),this.setDepthMask(!0)),this.gl.clear((this.color?this.gl.COLOR_BUFFER_BIT:0)|(this.depth?this.gl.DEPTH_BUFFER_BIT:0)|(this.stencil?this.gl.STENCIL_BUFFER_BIT:0))),n&&e.updateMatrixWorld(),t&&t.updateMatrixWorld();this.getRenderList({scene:e,camera:t,frustumCull:i,sort:s}).forEach((e=>{e.draw({camera:t})}))}}},"./node_modules/ogl/src/core/Texture.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Texture:()=>o});const n=new Uint8Array(4);function s(e){return 0==(e&e-1)}let i=1;class o{constructor(e,{image:t,target:r=e.TEXTURE_2D,type:n=e.UNSIGNED_BYTE,format:s=e.RGBA,internalFormat:o=s,wrapS:a=e.CLAMP_TO_EDGE,wrapT:l=e.CLAMP_TO_EDGE,generateMipmaps:u=!0,minFilter:h=(u?e.NEAREST_MIPMAP_LINEAR:e.LINEAR),magFilter:c=e.LINEAR,premultiplyAlpha:d=!1,unpackAlignment:p=4,flipY:f=r==e.TEXTURE_2D,anisotropy:m=0,level:g=0,width:v,height:_=v}={}){this.gl=e,this.id=i++,this.image=t,this.target=r,this.type=n,this.format=s,this.internalFormat=o,this.minFilter=h,this.magFilter=c,this.wrapS=a,this.wrapT=l,this.generateMipmaps=u,this.premultiplyAlpha=d,this.unpackAlignment=p,this.flipY=f,this.anisotropy=Math.min(m,this.gl.renderer.parameters.maxAnisotropy),this.level=g,this.width=v,this.height=_,this.texture=this.gl.createTexture(),this.store={image:null},this.glState=this.gl.renderer.state,this.state={},this.state.minFilter=this.gl.NEAREST_MIPMAP_LINEAR,this.state.magFilter=this.gl.LINEAR,this.state.wrapS=this.gl.REPEAT,this.state.wrapT=this.gl.REPEAT,this.state.anisotropy=0}bind(){this.glState.textureUnits[this.glState.activeTextureUnit]!==this.id&&(this.gl.bindTexture(this.target,this.texture),this.glState.textureUnits[this.glState.activeTextureUnit]=this.id)}update(e=0){const t=!(this.image===this.store.image&&!this.needsUpdate);if((t||this.glState.textureUnits[e]!==this.id)&&(this.gl.renderer.activeTexture(e),this.bind()),t){if(this.needsUpdate=!1,this.flipY!==this.glState.flipY&&(this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,this.flipY),this.glState.flipY=this.flipY),this.premultiplyAlpha!==this.glState.premultiplyAlpha&&(this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,this.premultiplyAlpha),this.glState.premultiplyAlpha=this.premultiplyAlpha),this.unpackAlignment!==this.glState.unpackAlignment&&(this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT,this.unpackAlignment),this.glState.unpackAlignment=this.unpackAlignment),this.minFilter!==this.state.minFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MIN_FILTER,this.minFilter),this.state.minFilter=this.minFilter),this.magFilter!==this.state.magFilter&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_MAG_FILTER,this.magFilter),this.state.magFilter=this.magFilter),this.wrapS!==this.state.wrapS&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_S,this.wrapS),this.state.wrapS=this.wrapS),this.wrapT!==this.state.wrapT&&(this.gl.texParameteri(this.target,this.gl.TEXTURE_WRAP_T,this.wrapT),this.state.wrapT=this.wrapT),this.anisotropy&&this.anisotropy!==this.state.anisotropy&&(this.gl.texParameterf(this.target,this.gl.renderer.getExtension("EXT_texture_filter_anisotropic").TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropy),this.state.anisotropy=this.anisotropy),this.image){if(this.image.width&&(this.width=this.image.width,this.height=this.image.height),this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,this.level,this.internalFormat,this.format,this.type,this.image[e]);else if(ArrayBuffer.isView(this.image))this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,this.image);else if(this.image.isCompressedTexture)for(let e=0;e<this.image.length;e++)this.gl.compressedTexImage2D(this.target,e,this.internalFormat,this.image[e].width,this.image[e].height,0,this.image[e].data);else this.gl.texImage2D(this.target,this.level,this.internalFormat,this.format,this.type,this.image);this.generateMipmaps&&(this.gl.renderer.isWebgl2||s(this.image.width)&&s(this.image.height)?this.gl.generateMipmap(this.target):(this.generateMipmaps=!1,this.wrapS=this.wrapT=this.gl.CLAMP_TO_EDGE,this.minFilter=this.gl.LINEAR)),this.onUpdate&&this.onUpdate()}else if(this.target===this.gl.TEXTURE_CUBE_MAP)for(let e=0;e<6;e++)this.gl.texImage2D(this.gl.TEXTURE_CUBE_MAP_POSITIVE_X+e,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,n);else this.width?this.gl.texImage2D(this.target,this.level,this.internalFormat,this.width,this.height,0,this.format,this.type,null):this.gl.texImage2D(this.target,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,n);this.store.image=this.image}}}},"./node_modules/ogl/src/core/Transform.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Transform:()=>a});var n=r("./node_modules/ogl/src/math/Vec3.js"),s=r("./node_modules/ogl/src/math/Quat.js"),i=r("./node_modules/ogl/src/math/Mat4.js"),o=r("./node_modules/ogl/src/math/Euler.js");class a{constructor(){this.parent=null,this.children=[],this.visible=!0,this.matrix=new i.Mat4,this.worldMatrix=new i.Mat4,this.matrixAutoUpdate=!0,this.position=new n.Vec3,this.quaternion=new s.Quat,this.scale=new n.Vec3(1),this.rotation=new o.Euler,this.up=new n.Vec3(0,1,0),this.rotation.onChange=()=>this.quaternion.fromEuler(this.rotation),this.quaternion.onChange=()=>this.rotation.fromQuaternion(this.quaternion)}setParent(e,t=!0){this.parent&&e!==this.parent&&this.parent.removeChild(this,!1),this.parent=e,t&&e&&e.addChild(this,!1)}addChild(e,t=!0){~this.children.indexOf(e)||this.children.push(e),t&&e.setParent(this,!1)}removeChild(e,t=!0){~this.children.indexOf(e)&&this.children.splice(this.children.indexOf(e),1),t&&e.setParent(null,!1)}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.worldMatrixNeedsUpdate||e)&&(null===this.parent?this.worldMatrix.copy(this.matrix):this.worldMatrix.multiply(this.parent.worldMatrix,this.matrix),this.worldMatrixNeedsUpdate=!1,e=!0);for(let t=0,r=this.children.length;t<r;t++)this.children[t].updateMatrixWorld(e)}updateMatrix(){this.matrix.compose(this.quaternion,this.position,this.scale),this.worldMatrixNeedsUpdate=!0}traverse(e){if(!e(this))for(let t=0,r=this.children.length;t<r;t++)this.children[t].traverse(e)}decompose(){this.matrix.getTranslation(this.position),this.matrix.getRotation(this.quaternion),this.matrix.getScaling(this.scale),this.rotation.fromQuaternion(this.quaternion)}lookAt(e,t=!1){t?this.matrix.lookAt(this.position,e,this.up):this.matrix.lookAt(e,this.position,this.up),this.matrix.getRotation(this.quaternion),this.rotation.fromQuaternion(this.quaternion)}}},"./node_modules/ogl/src/extras/Plane.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Plane:()=>s});var n=r("./node_modules/ogl/src/core/Geometry.js");class s extends n.Geometry{constructor(e,{width:t=1,height:r=1,widthSegments:n=1,heightSegments:i=1,attributes:o={}}={}){const a=n,l=i,u=(a+1)*(l+1),h=a*l*6,c=new Float32Array(3*u),d=new Float32Array(3*u),p=new Float32Array(2*u),f=u>65536?new Uint32Array(h):new Uint16Array(h);s.buildPlane(c,d,p,f,t,r,0,a,l),Object.assign(o,{position:{size:3,data:c},normal:{size:3,data:d},uv:{size:2,data:p},index:{data:f}}),super(e,o)}static buildPlane(e,t,r,n,s,i,o,a,l,u=0,h=1,c=2,d=1,p=-1,f=0,m=0){const g=f,v=s/a,_=i/l;for(let y=0;y<=l;y++){let b=y*_-i/2;for(let i=0;i<=a;i++,f++){let _=i*v-s/2;if(e[3*f+u]=_*d,e[3*f+h]=b*p,e[3*f+c]=o/2,t[3*f+u]=0,t[3*f+h]=0,t[3*f+c]=o>=0?1:-1,r[2*f]=i/a,r[2*f+1]=1-y/l,y===l||i===a)continue;let w=g+i+y*(a+1),x=g+i+(y+1)*(a+1),j=g+i+(y+1)*(a+1)+1,E=g+i+y*(a+1)+1;n[6*m]=w,n[6*m+1]=x,n[6*m+2]=E,n[6*m+3]=x,n[6*m+4]=j,n[6*m+5]=E,m++}}}}},"./node_modules/ogl/src/math/Euler.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Euler:()=>i});var n=r("./node_modules/ogl/src/math/functions/EulerFunc.js");const s=new(r("./node_modules/ogl/src/math/Mat4.js").Mat4);class i extends Array{constructor(e=0,t=e,r=e,n="YXZ"){return super(e,t,r),this.order=n,this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set(e,t=e,r=e){return e.length?this.copy(e):(this[0]=e,this[1]=t,this[2]=r,this.onChange(),this)}copy(e){return this[0]=e[0],this[1]=e[1],this[2]=e[2],this.onChange(),this}reorder(e){return this.order=e,this.onChange(),this}fromRotationMatrix(e,t=this.order){return n.fromRotationMatrix(this,e,t),this}fromQuaternion(e,t=this.order){return s.fromQuaternion(e),this.fromRotationMatrix(s,t)}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}}},"./node_modules/ogl/src/math/Mat3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat3:()=>s});var n=r("./node_modules/ogl/src/math/functions/Mat3Func.js");class s extends Array{constructor(e=1,t=0,r=0,n=0,s=1,i=0,o=0,a=0,l=1){return super(e,t,r,n,s,i,o,a,l),this}set(e,t,r,s,i,o,a,l,u){return e.length?this.copy(e):(n.set(this,e,t,r,s,i,o,a,l,u),this)}translate(e,t=this){return n.translate(this,t,e),this}rotate(e,t=this){return n.rotate(this,t,e),this}scale(e,t=this){return n.scale(this,t,e),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this}identity(){return n.identity(this),this}copy(e){return n.copy(this,e),this}fromMatrix4(e){return n.fromMat4(this,e),this}fromQuaternion(e){return n.fromQuat(this,e),this}fromBasis(e,t,r){return this.set(e[0],e[1],e[2],t[0],t[1],t[2],r[0],r[1],r[2]),this}inverse(e=this){return n.invert(this,e),this}getNormalMatrix(e){return n.normalFromMat4(this,e),this}}},"./node_modules/ogl/src/math/Mat4.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Mat4:()=>s});var n=r("./node_modules/ogl/src/math/functions/Mat4Func.js");class s extends Array{constructor(e=1,t=0,r=0,n=0,s=0,i=1,o=0,a=0,l=0,u=0,h=1,c=0,d=0,p=0,f=0,m=1){return super(e,t,r,n,s,i,o,a,l,u,h,c,d,p,f,m),this}get x(){return this[12]}get y(){return this[13]}get z(){return this[14]}get w(){return this[15]}set x(e){this[12]=e}set y(e){this[13]=e}set z(e){this[14]=e}set w(e){this[15]=e}set(e,t,r,s,i,o,a,l,u,h,c,d,p,f,m,g){return e.length?this.copy(e):(n.set(this,e,t,r,s,i,o,a,l,u,h,c,d,p,f,m,g),this)}translate(e,t=this){return n.translate(this,t,e),this}rotate(e,t,r=this){return n.rotate(this,r,e,t),this}scale(e,t=this){return n.scale(this,t,"number"==typeof e?[e,e,e]:e),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this}identity(){return n.identity(this),this}copy(e){return n.copy(this,e),this}fromPerspective({fov:e,aspect:t,near:r,far:s}={}){return n.perspective(this,e,t,r,s),this}fromOrthogonal({left:e,right:t,bottom:r,top:s,near:i,far:o}){return n.ortho(this,e,t,r,s,i,o),this}fromQuaternion(e){return n.fromQuat(this,e),this}setPosition(e){return this.x=e[0],this.y=e[1],this.z=e[2],this}inverse(e=this){return n.invert(this,e),this}compose(e,t,r){return n.fromRotationTranslationScale(this,e,t,r),this}getRotation(e){return n.getRotation(e,this),this}getTranslation(e){return n.getTranslation(e,this),this}getScaling(e){return n.getScaling(e,this),this}getMaxScaleOnAxis(){return n.getMaxScaleOnAxis(this)}lookAt(e,t,r){return n.targetTo(this,e,t,r),this}determinant(){return n.determinant(this)}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this[4]=e[t+4],this[5]=e[t+5],this[6]=e[t+6],this[7]=e[t+7],this[8]=e[t+8],this[9]=e[t+9],this[10]=e[t+10],this[11]=e[t+11],this[12]=e[t+12],this[13]=e[t+13],this[14]=e[t+14],this[15]=e[t+15],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e[t+4]=this[4],e[t+5]=this[5],e[t+6]=this[6],e[t+7]=this[7],e[t+8]=this[8],e[t+9]=this[9],e[t+10]=this[10],e[t+11]=this[11],e[t+12]=this[12],e[t+13]=this[13],e[t+14]=this[14],e[t+15]=this[15],e}}},"./node_modules/ogl/src/math/Quat.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Quat:()=>s});var n=r("./node_modules/ogl/src/math/functions/QuatFunc.js");class s extends Array{constructor(e=0,t=0,r=0,n=1){return super(e,t,r,n),this.onChange=()=>{},this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}get w(){return this[3]}set x(e){this[0]=e,this.onChange()}set y(e){this[1]=e,this.onChange()}set z(e){this[2]=e,this.onChange()}set w(e){this[3]=e,this.onChange()}identity(){return n.identity(this),this.onChange(),this}set(e,t,r,s){return e.length?this.copy(e):(n.set(this,e,t,r,s),this.onChange(),this)}rotateX(e){return n.rotateX(this,this,e),this.onChange(),this}rotateY(e){return n.rotateY(this,this,e),this.onChange(),this}rotateZ(e){return n.rotateZ(this,this,e),this.onChange(),this}inverse(e=this){return n.invert(this,e),this.onChange(),this}conjugate(e=this){return n.conjugate(this,e),this.onChange(),this}copy(e){return n.copy(this,e),this.onChange(),this}normalize(e=this){return n.normalize(this,e),this.onChange(),this}multiply(e,t){return t?n.multiply(this,e,t):n.multiply(this,this,e),this.onChange(),this}dot(e){return n.dot(this,e)}fromMatrix3(e){return n.fromMat3(this,e),this.onChange(),this}fromEuler(e){return n.fromEuler(this,e,e.order),this}fromAxisAngle(e,t){return n.setAxisAngle(this,e,t),this}slerp(e,t){return n.slerp(this,this,e,t),this}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this[3]=e[t+3],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e[t+3]=this[3],e}}},"./node_modules/ogl/src/math/Vec3.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{Vec3:()=>s});var n=r("./node_modules/ogl/src/math/functions/Vec3Func.js");class s extends Array{constructor(e=0,t=e,r=e){return super(e,t,r),this}get x(){return this[0]}get y(){return this[1]}get z(){return this[2]}set x(e){this[0]=e}set y(e){this[1]=e}set z(e){this[2]=e}set(e,t=e,r=e){return e.length?this.copy(e):(n.set(this,e,t,r),this)}copy(e){return n.copy(this,e),this}add(e,t){return t?n.add(this,e,t):n.add(this,this,e),this}sub(e,t){return t?n.subtract(this,e,t):n.subtract(this,this,e),this}multiply(e){return e.length?n.multiply(this,this,e):n.scale(this,this,e),this}divide(e){return e.length?n.divide(this,this,e):n.scale(this,this,1/e),this}inverse(e=this){return n.inverse(this,e),this}len(){return n.length(this)}distance(e){return e?n.distance(this,e):n.length(this)}squaredLen(){return n.squaredLength(this)}squaredDistance(e){return e?n.squaredDistance(this,e):n.squaredLength(this)}negate(e=this){return n.negate(this,e),this}cross(e,t){return t?n.cross(this,e,t):n.cross(this,this,e),this}scale(e){return n.scale(this,this,e),this}normalize(){return n.normalize(this,this),this}dot(e){return n.dot(this,e)}equals(e){return n.exactEquals(this,e)}applyMatrix4(e){return n.transformMat4(this,this,e),this}scaleRotateMatrix4(e){return n.scaleRotateMat4(this,this,e),this}applyQuaternion(e){return n.transformQuat(this,this,e),this}angle(e){return n.angle(this,e)}lerp(e,t){return n.lerp(this,this,e,t),this}clone(){return new s(this[0],this[1],this[2])}fromArray(e,t=0){return this[0]=e[t],this[1]=e[t+1],this[2]=e[t+2],this}toArray(e=[],t=0){return e[t]=this[0],e[t+1]=this[1],e[t+2]=this[2],e}transformDirection(e){const t=this[0],r=this[1],n=this[2];return this[0]=e[0]*t+e[4]*r+e[8]*n,this[1]=e[1]*t+e[5]*r+e[9]*n,this[2]=e[2]*t+e[6]*r+e[10]*n,this.normalize()}}},"./node_modules/ogl/src/math/functions/EulerFunc.js":(e,t,r)=>{"use strict";function n(e,t,r="YXZ"){return"XYZ"===r?(e[1]=Math.asin(Math.min(Math.max(t[8],-1),1)),Math.abs(t[8])<.99999?(e[0]=Math.atan2(-t[9],t[10]),e[2]=Math.atan2(-t[4],t[0])):(e[0]=Math.atan2(t[6],t[5]),e[2]=0)):"YXZ"===r?(e[0]=Math.asin(-Math.min(Math.max(t[9],-1),1)),Math.abs(t[9])<.99999?(e[1]=Math.atan2(t[8],t[10]),e[2]=Math.atan2(t[1],t[5])):(e[1]=Math.atan2(-t[2],t[0]),e[2]=0)):"ZXY"===r?(e[0]=Math.asin(Math.min(Math.max(t[6],-1),1)),Math.abs(t[6])<.99999?(e[1]=Math.atan2(-t[2],t[10]),e[2]=Math.atan2(-t[4],t[5])):(e[1]=0,e[2]=Math.atan2(t[1],t[0]))):"ZYX"===r?(e[1]=Math.asin(-Math.min(Math.max(t[2],-1),1)),Math.abs(t[2])<.99999?(e[0]=Math.atan2(t[6],t[10]),e[2]=Math.atan2(t[1],t[0])):(e[0]=0,e[2]=Math.atan2(-t[4],t[5]))):"YZX"===r?(e[2]=Math.asin(Math.min(Math.max(t[1],-1),1)),Math.abs(t[1])<.99999?(e[0]=Math.atan2(-t[9],t[5]),e[1]=Math.atan2(-t[2],t[0])):(e[0]=0,e[1]=Math.atan2(t[8],t[10]))):"XZY"===r&&(e[2]=Math.asin(-Math.min(Math.max(t[4],-1),1)),Math.abs(t[4])<.99999?(e[0]=Math.atan2(t[6],t[5]),e[1]=Math.atan2(t[8],t[0])):(e[0]=Math.atan2(-t[9],t[10]),e[1]=0)),e}r.r(t),r.d(t,{fromRotationMatrix:()=>n})},"./node_modules/ogl/src/math/functions/Mat3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{fromMat4:()=>n,fromQuat:()=>s,copy:()=>i,set:()=>o,identity:()=>a,transpose:()=>l,invert:()=>u,determinant:()=>h,multiply:()=>c,translate:()=>d,rotate:()=>p,scale:()=>f,normalFromMat4:()=>m,projection:()=>g,add:()=>v,subtract:()=>_,multiplyScalar:()=>y});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[4],e[4]=t[5],e[5]=t[6],e[6]=t[8],e[7]=t[9],e[8]=t[10],e}function s(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r+r,a=n+n,l=s+s,u=r*o,h=n*o,c=n*a,d=s*o,p=s*a,f=s*l,m=i*o,g=i*a,v=i*l;return e[0]=1-c-f,e[3]=h-v,e[6]=d+g,e[1]=h+v,e[4]=1-u-f,e[7]=p-m,e[2]=d-g,e[5]=p+m,e[8]=1-u-c,e}function i(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function o(e,t,r,n,s,i,o,a,l,u){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e}function a(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e}function l(e,t){if(e===t){let r=t[1],n=t[2],s=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=n,e[7]=s}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e}function u(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],h=t[8],c=h*o-a*u,d=-h*i+a*l,p=u*i-o*l,f=r*c+n*d+s*p;return f?(f=1/f,e[0]=c*f,e[1]=(-h*n+s*u)*f,e[2]=(a*n-s*o)*f,e[3]=d*f,e[4]=(h*r-s*l)*f,e[5]=(-a*r+s*i)*f,e[6]=p*f,e[7]=(-u*r+n*l)*f,e[8]=(o*r-n*i)*f,e):null}function h(e){let t=e[0],r=e[1],n=e[2],s=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8];return t*(u*i-o*l)+r*(-u*s+o*a)+n*(l*s-i*a)}function c(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],h=t[7],c=t[8],d=r[0],p=r[1],f=r[2],m=r[3],g=r[4],v=r[5],_=r[6],y=r[7],b=r[8];return e[0]=d*n+p*o+f*u,e[1]=d*s+p*a+f*h,e[2]=d*i+p*l+f*c,e[3]=m*n+g*o+v*u,e[4]=m*s+g*a+v*h,e[5]=m*i+g*l+v*c,e[6]=_*n+y*o+b*u,e[7]=_*s+y*a+b*h,e[8]=_*i+y*l+b*c,e}function d(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],h=t[7],c=t[8],d=r[0],p=r[1];return e[0]=n,e[1]=s,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=d*n+p*o+u,e[7]=d*s+p*a+h,e[8]=d*i+p*l+c,e}function p(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],h=t[7],c=t[8],d=Math.sin(r),p=Math.cos(r);return e[0]=p*n+d*o,e[1]=p*s+d*a,e[2]=p*i+d*l,e[3]=p*o-d*n,e[4]=p*a-d*s,e[5]=p*l-d*i,e[6]=u,e[7]=h,e[8]=c,e}function f(e,t,r){let n=r[0],s=r[1];return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=s*t[3],e[4]=s*t[4],e[5]=s*t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e}function m(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],h=t[8],c=t[9],d=t[10],p=t[11],f=t[12],m=t[13],g=t[14],v=t[15],_=r*a-n*o,y=r*l-s*o,b=r*u-i*o,w=n*l-s*a,x=n*u-i*a,j=s*u-i*l,E=h*m-c*f,C=h*g-d*f,A=h*v-p*f,T=c*g-d*m,S=c*v-p*m,M=d*v-p*g,O=_*M-y*S+b*T+w*A-x*C+j*E;return O?(O=1/O,e[0]=(a*M-l*S+u*T)*O,e[1]=(l*A-o*M-u*C)*O,e[2]=(o*S-a*A+u*E)*O,e[3]=(s*S-n*M-i*T)*O,e[4]=(r*M-s*A+i*C)*O,e[5]=(n*A-r*S-i*E)*O,e[6]=(m*j-g*x+v*w)*O,e[7]=(g*b-f*j-v*y)*O,e[8]=(f*x-m*b+v*_)*O,e):null}function g(e,t,r){return e[0]=2/t,e[1]=0,e[2]=0,e[3]=0,e[4]=-2/r,e[5]=0,e[6]=-1,e[7]=1,e[8]=1,e}function v(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e}function _(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e}function y(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e}},"./node_modules/ogl/src/math/functions/Mat4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{copy:()=>n,set:()=>s,identity:()=>i,transpose:()=>o,invert:()=>a,determinant:()=>l,multiply:()=>u,translate:()=>h,scale:()=>c,rotate:()=>d,getTranslation:()=>p,getScaling:()=>f,getMaxScaleOnAxis:()=>m,getRotation:()=>g,fromRotationTranslationScale:()=>v,fromQuat:()=>_,perspective:()=>y,ortho:()=>b,targetTo:()=>w,add:()=>x,subtract:()=>j,multiplyScalar:()=>E});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function s(e,t,r,n,s,i,o,a,l,u,h,c,d,p,f,m,g){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e[4]=i,e[5]=o,e[6]=a,e[7]=l,e[8]=u,e[9]=h,e[10]=c,e[11]=d,e[12]=p,e[13]=f,e[14]=m,e[15]=g,e}function i(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function o(e,t){if(e===t){let r=t[1],n=t[2],s=t[3],i=t[6],o=t[7],a=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=n,e[9]=i,e[11]=t[14],e[12]=s,e[13]=o,e[14]=a}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e}function a(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=t[4],a=t[5],l=t[6],u=t[7],h=t[8],c=t[9],d=t[10],p=t[11],f=t[12],m=t[13],g=t[14],v=t[15],_=r*a-n*o,y=r*l-s*o,b=r*u-i*o,w=n*l-s*a,x=n*u-i*a,j=s*u-i*l,E=h*m-c*f,C=h*g-d*f,A=h*v-p*f,T=c*g-d*m,S=c*v-p*m,M=d*v-p*g,O=_*M-y*S+b*T+w*A-x*C+j*E;return O?(O=1/O,e[0]=(a*M-l*S+u*T)*O,e[1]=(s*S-n*M-i*T)*O,e[2]=(m*j-g*x+v*w)*O,e[3]=(d*x-c*j-p*w)*O,e[4]=(l*A-o*M-u*C)*O,e[5]=(r*M-s*A+i*C)*O,e[6]=(g*b-f*j-v*y)*O,e[7]=(h*j-d*b+p*y)*O,e[8]=(o*S-a*A+u*E)*O,e[9]=(n*A-r*S-i*E)*O,e[10]=(f*x-m*b+v*_)*O,e[11]=(c*b-h*x-p*_)*O,e[12]=(a*C-o*T-l*E)*O,e[13]=(r*T-n*C+s*E)*O,e[14]=(m*y-f*w-g*_)*O,e[15]=(h*w-c*y+d*_)*O,e):null}function l(e){let t=e[0],r=e[1],n=e[2],s=e[3],i=e[4],o=e[5],a=e[6],l=e[7],u=e[8],h=e[9],c=e[10],d=e[11],p=e[12],f=e[13],m=e[14],g=e[15];return(t*o-r*i)*(c*g-d*m)-(t*a-n*i)*(h*g-d*f)+(t*l-s*i)*(h*m-c*f)+(r*a-n*o)*(u*g-d*p)-(r*l-s*o)*(u*m-c*p)+(n*l-s*a)*(u*f-h*p)}function u(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],h=t[7],c=t[8],d=t[9],p=t[10],f=t[11],m=t[12],g=t[13],v=t[14],_=t[15],y=r[0],b=r[1],w=r[2],x=r[3];return e[0]=y*n+b*a+w*c+x*m,e[1]=y*s+b*l+w*d+x*g,e[2]=y*i+b*u+w*p+x*v,e[3]=y*o+b*h+w*f+x*_,y=r[4],b=r[5],w=r[6],x=r[7],e[4]=y*n+b*a+w*c+x*m,e[5]=y*s+b*l+w*d+x*g,e[6]=y*i+b*u+w*p+x*v,e[7]=y*o+b*h+w*f+x*_,y=r[8],b=r[9],w=r[10],x=r[11],e[8]=y*n+b*a+w*c+x*m,e[9]=y*s+b*l+w*d+x*g,e[10]=y*i+b*u+w*p+x*v,e[11]=y*o+b*h+w*f+x*_,y=r[12],b=r[13],w=r[14],x=r[15],e[12]=y*n+b*a+w*c+x*m,e[13]=y*s+b*l+w*d+x*g,e[14]=y*i+b*u+w*p+x*v,e[15]=y*o+b*h+w*f+x*_,e}function h(e,t,r){let n,s,i,o,a,l,u,h,c,d,p,f,m=r[0],g=r[1],v=r[2];return t===e?(e[12]=t[0]*m+t[4]*g+t[8]*v+t[12],e[13]=t[1]*m+t[5]*g+t[9]*v+t[13],e[14]=t[2]*m+t[6]*g+t[10]*v+t[14],e[15]=t[3]*m+t[7]*g+t[11]*v+t[15]):(n=t[0],s=t[1],i=t[2],o=t[3],a=t[4],l=t[5],u=t[6],h=t[7],c=t[8],d=t[9],p=t[10],f=t[11],e[0]=n,e[1]=s,e[2]=i,e[3]=o,e[4]=a,e[5]=l,e[6]=u,e[7]=h,e[8]=c,e[9]=d,e[10]=p,e[11]=f,e[12]=n*m+a*g+c*v+t[12],e[13]=s*m+l*g+d*v+t[13],e[14]=i*m+u*g+p*v+t[14],e[15]=o*m+h*g+f*v+t[15]),e}function c(e,t,r){let n=r[0],s=r[1],i=r[2];return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*s,e[5]=t[5]*s,e[6]=t[6]*s,e[7]=t[7]*s,e[8]=t[8]*i,e[9]=t[9]*i,e[10]=t[10]*i,e[11]=t[11]*i,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function d(e,t,r,n){let s,i,o,a,l,u,h,c,d,p,f,m,g,v,_,y,b,w,x,j,E,C,A,T,S=n[0],M=n[1],O=n[2],L=Math.hypot(S,M,O);return Math.abs(L)<1e-6?null:(L=1/L,S*=L,M*=L,O*=L,s=Math.sin(r),i=Math.cos(r),o=1-i,a=t[0],l=t[1],u=t[2],h=t[3],c=t[4],d=t[5],p=t[6],f=t[7],m=t[8],g=t[9],v=t[10],_=t[11],y=S*S*o+i,b=M*S*o+O*s,w=O*S*o-M*s,x=S*M*o-O*s,j=M*M*o+i,E=O*M*o+S*s,C=S*O*o+M*s,A=M*O*o-S*s,T=O*O*o+i,e[0]=a*y+c*b+m*w,e[1]=l*y+d*b+g*w,e[2]=u*y+p*b+v*w,e[3]=h*y+f*b+_*w,e[4]=a*x+c*j+m*E,e[5]=l*x+d*j+g*E,e[6]=u*x+p*j+v*E,e[7]=h*x+f*j+_*E,e[8]=a*C+c*A+m*T,e[9]=l*C+d*A+g*T,e[10]=u*C+p*A+v*T,e[11]=h*C+f*A+_*T,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)}function p(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e}function f(e,t){let r=t[0],n=t[1],s=t[2],i=t[4],o=t[5],a=t[6],l=t[8],u=t[9],h=t[10];return e[0]=Math.hypot(r,n,s),e[1]=Math.hypot(i,o,a),e[2]=Math.hypot(l,u,h),e}function m(e){let t=e[0],r=e[1],n=e[2],s=e[4],i=e[5],o=e[6],a=e[8],l=e[9],u=e[10];const h=t*t+r*r+n*n,c=s*s+i*i+o*o,d=a*a+l*l+u*u;return Math.sqrt(Math.max(h,c,d))}const g=function(){const e=[0,0,0];return function(t,r){let n=e;f(n,r);let s=1/n[0],i=1/n[1],o=1/n[2],a=r[0]*s,l=r[1]*i,u=r[2]*o,h=r[4]*s,c=r[5]*i,d=r[6]*o,p=r[8]*s,m=r[9]*i,g=r[10]*o,v=a+c+g,_=0;return v>0?(_=2*Math.sqrt(v+1),t[3]=.25*_,t[0]=(d-m)/_,t[1]=(p-u)/_,t[2]=(l-h)/_):a>c&&a>g?(_=2*Math.sqrt(1+a-c-g),t[3]=(d-m)/_,t[0]=.25*_,t[1]=(l+h)/_,t[2]=(p+u)/_):c>g?(_=2*Math.sqrt(1+c-a-g),t[3]=(p-u)/_,t[0]=(l+h)/_,t[1]=.25*_,t[2]=(d+m)/_):(_=2*Math.sqrt(1+g-a-c),t[3]=(l-h)/_,t[0]=(p+u)/_,t[1]=(d+m)/_,t[2]=.25*_),t}}();function v(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=t[3],l=s+s,u=i+i,h=o+o,c=s*l,d=s*u,p=s*h,f=i*u,m=i*h,g=o*h,v=a*l,_=a*u,y=a*h,b=n[0],w=n[1],x=n[2];return e[0]=(1-(f+g))*b,e[1]=(d+y)*b,e[2]=(p-_)*b,e[3]=0,e[4]=(d-y)*w,e[5]=(1-(c+g))*w,e[6]=(m+v)*w,e[7]=0,e[8]=(p+_)*x,e[9]=(m-v)*x,e[10]=(1-(c+f))*x,e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e}function _(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r+r,a=n+n,l=s+s,u=r*o,h=n*o,c=n*a,d=s*o,p=s*a,f=s*l,m=i*o,g=i*a,v=i*l;return e[0]=1-c-f,e[1]=h+v,e[2]=d-g,e[3]=0,e[4]=h-v,e[5]=1-u-f,e[6]=p+m,e[7]=0,e[8]=d+g,e[9]=p-m,e[10]=1-u-c,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e}function y(e,t,r,n,s){let i=1/Math.tan(t/2),o=1/(n-s);return e[0]=i/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=i,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(s+n)*o,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*s*n*o,e[15]=0,e}function b(e,t,r,n,s,i,o){let a=1/(t-r),l=1/(n-s),u=1/(i-o);return e[0]=-2*a,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*u,e[11]=0,e[12]=(t+r)*a,e[13]=(s+n)*l,e[14]=(o+i)*u,e[15]=1,e}function w(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=n[0],l=n[1],u=n[2],h=s-r[0],c=i-r[1],d=o-r[2],p=h*h+c*c+d*d;0===p?d=1:(p=1/Math.sqrt(p),h*=p,c*=p,d*=p);let f=l*d-u*c,m=u*h-a*d,g=a*c-l*h;return p=f*f+m*m+g*g,0===p&&(u?a+=1e-6:l?u+=1e-6:l+=1e-6,f=l*d-u*c,m=u*h-a*d,g=a*c-l*h,p=f*f+m*m+g*g),p=1/Math.sqrt(p),f*=p,m*=p,g*=p,e[0]=f,e[1]=m,e[2]=g,e[3]=0,e[4]=c*g-d*m,e[5]=d*f-h*g,e[6]=h*m-c*f,e[7]=0,e[8]=h,e[9]=c,e[10]=d,e[11]=0,e[12]=s,e[13]=i,e[14]=o,e[15]=1,e}function x(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e[4]=t[4]+r[4],e[5]=t[5]+r[5],e[6]=t[6]+r[6],e[7]=t[7]+r[7],e[8]=t[8]+r[8],e[9]=t[9]+r[9],e[10]=t[10]+r[10],e[11]=t[11]+r[11],e[12]=t[12]+r[12],e[13]=t[13]+r[13],e[14]=t[14]+r[14],e[15]=t[15]+r[15],e}function j(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e[4]=t[4]-r[4],e[5]=t[5]-r[5],e[6]=t[6]-r[6],e[7]=t[7]-r[7],e[8]=t[8]-r[8],e[9]=t[9]-r[9],e[10]=t[10]-r[10],e[11]=t[11]-r[11],e[12]=t[12]-r[12],e[13]=t[13]-r[13],e[14]=t[14]-r[14],e[15]=t[15]-r[15],e}function E(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e[4]=t[4]*r,e[5]=t[5]*r,e[6]=t[6]*r,e[7]=t[7]*r,e[8]=t[8]*r,e[9]=t[9]*r,e[10]=t[10]*r,e[11]=t[11]*r,e[12]=t[12]*r,e[13]=t[13]*r,e[14]=t[14]*r,e[15]=t[15]*r,e}},"./node_modules/ogl/src/math/functions/QuatFunc.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{identity:()=>s,setAxisAngle:()=>i,multiply:()=>o,rotateX:()=>a,rotateY:()=>l,rotateZ:()=>u,slerp:()=>h,invert:()=>c,conjugate:()=>d,fromMat3:()=>p,fromEuler:()=>f,copy:()=>m,set:()=>g,add:()=>v,scale:()=>_,dot:()=>y,lerp:()=>b,length:()=>w,normalize:()=>x});var n=r("./node_modules/ogl/src/math/functions/Vec4Func.js");function s(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e}function i(e,t,r){r*=.5;let n=Math.sin(r);return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=Math.cos(r),e}function o(e,t,r){let n=t[0],s=t[1],i=t[2],o=t[3],a=r[0],l=r[1],u=r[2],h=r[3];return e[0]=n*h+o*a+s*u-i*l,e[1]=s*h+o*l+i*a-n*u,e[2]=i*h+o*u+n*l-s*a,e[3]=o*h-n*a-s*l-i*u,e}function a(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l+o*a,e[1]=s*l+i*a,e[2]=i*l-s*a,e[3]=o*l-n*a,e}function l(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l-i*a,e[1]=s*l+o*a,e[2]=i*l+n*a,e[3]=o*l-s*a,e}function u(e,t,r){r*=.5;let n=t[0],s=t[1],i=t[2],o=t[3],a=Math.sin(r),l=Math.cos(r);return e[0]=n*l+s*a,e[1]=s*l-n*a,e[2]=i*l+o*a,e[3]=o*l-i*a,e}function h(e,t,r,n){let s,i,o,a,l,u=t[0],h=t[1],c=t[2],d=t[3],p=r[0],f=r[1],m=r[2],g=r[3];return i=u*p+h*f+c*m+d*g,i<0&&(i=-i,p=-p,f=-f,m=-m,g=-g),1-i>1e-6?(s=Math.acos(i),o=Math.sin(s),a=Math.sin((1-n)*s)/o,l=Math.sin(n*s)/o):(a=1-n,l=n),e[0]=a*u+l*p,e[1]=a*h+l*f,e[2]=a*c+l*m,e[3]=a*d+l*g,e}function c(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r*r+n*n+s*s+i*i,a=o?1/o:0;return e[0]=-r*a,e[1]=-n*a,e[2]=-s*a,e[3]=i*a,e}function d(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e}function p(e,t){let r,n=t[0]+t[4]+t[8];if(n>0)r=Math.sqrt(n+1),e[3]=.5*r,r=.5/r,e[0]=(t[5]-t[7])*r,e[1]=(t[6]-t[2])*r,e[2]=(t[1]-t[3])*r;else{let n=0;t[4]>t[0]&&(n=1),t[8]>t[3*n+n]&&(n=2);let s=(n+1)%3,i=(n+2)%3;r=Math.sqrt(t[3*n+n]-t[3*s+s]-t[3*i+i]+1),e[n]=.5*r,r=.5/r,e[3]=(t[3*s+i]-t[3*i+s])*r,e[s]=(t[3*s+n]+t[3*n+s])*r,e[i]=(t[3*i+n]+t[3*n+i])*r}return e}function f(e,t,r="YXZ"){let n=Math.sin(.5*t[0]),s=Math.cos(.5*t[0]),i=Math.sin(.5*t[1]),o=Math.cos(.5*t[1]),a=Math.sin(.5*t[2]),l=Math.cos(.5*t[2]);return"XYZ"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l-n*i*a):"YXZ"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l+n*i*a):"ZXY"===r?(e[0]=n*o*l-s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l-n*i*a):"ZYX"===r?(e[0]=n*o*l-s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l+n*i*a):"YZX"===r?(e[0]=n*o*l+s*i*a,e[1]=s*i*l+n*o*a,e[2]=s*o*a-n*i*l,e[3]=s*o*l-n*i*a):"XZY"===r&&(e[0]=n*o*l-s*i*a,e[1]=s*i*l-n*o*a,e[2]=s*o*a+n*i*l,e[3]=s*o*l+n*i*a),e}const m=n.copy,g=n.set,v=n.add,_=n.scale,y=n.dot,b=n.lerp,w=n.length,x=n.normalize},"./node_modules/ogl/src/math/functions/Vec3Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{length:()=>n,copy:()=>s,set:()=>i,add:()=>o,subtract:()=>a,multiply:()=>l,divide:()=>u,scale:()=>h,distance:()=>c,squaredDistance:()=>d,squaredLength:()=>p,negate:()=>f,inverse:()=>m,normalize:()=>g,dot:()=>v,cross:()=>_,lerp:()=>y,transformMat4:()=>b,scaleRotateMat4:()=>w,transformMat3:()=>x,transformQuat:()=>j,angle:()=>E,exactEquals:()=>C});function n(e){let t=e[0],r=e[1],n=e[2];return Math.sqrt(t*t+r*r+n*n)}function s(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function i(e,t,r,n){return e[0]=t,e[1]=r,e[2]=n,e}function o(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e}function a(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e}function l(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e}function u(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e}function h(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e}function c(e,t){let r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return Math.sqrt(r*r+n*n+s*s)}function d(e,t){let r=t[0]-e[0],n=t[1]-e[1],s=t[2]-e[2];return r*r+n*n+s*s}function p(e){let t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n}function f(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e}function m(e,t){return e[0]=1/t[0],e[1]=1/t[1],e[2]=1/t[2],e}function g(e,t){let r=t[0],n=t[1],s=t[2],i=r*r+n*n+s*s;return i>0&&(i=1/Math.sqrt(i)),e[0]=t[0]*i,e[1]=t[1]*i,e[2]=t[2]*i,e}function v(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]}function _(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[0],a=r[1],l=r[2];return e[0]=s*l-i*a,e[1]=i*o-n*l,e[2]=n*a-s*o,e}function y(e,t,r,n){let s=t[0],i=t[1],o=t[2];return e[0]=s+n*(r[0]-s),e[1]=i+n*(r[1]-i),e[2]=o+n*(r[2]-o),e}function b(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[3]*n+r[7]*s+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*n+r[4]*s+r[8]*i+r[12])/o,e[1]=(r[1]*n+r[5]*s+r[9]*i+r[13])/o,e[2]=(r[2]*n+r[6]*s+r[10]*i+r[14])/o,e}function w(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[3]*n+r[7]*s+r[11]*i+r[15];return o=o||1,e[0]=(r[0]*n+r[4]*s+r[8]*i)/o,e[1]=(r[1]*n+r[5]*s+r[9]*i)/o,e[2]=(r[2]*n+r[6]*s+r[10]*i)/o,e}function x(e,t,r){let n=t[0],s=t[1],i=t[2];return e[0]=n*r[0]+s*r[3]+i*r[6],e[1]=n*r[1]+s*r[4]+i*r[7],e[2]=n*r[2]+s*r[5]+i*r[8],e}function j(e,t,r){let n=t[0],s=t[1],i=t[2],o=r[0],a=r[1],l=r[2],u=a*i-l*s,h=l*n-o*i,c=o*s-a*n,d=a*c-l*h,p=l*u-o*c,f=o*h-a*u,m=2*r[3];return u*=m,h*=m,c*=m,d*=2,p*=2,f*=2,e[0]=n+u+d,e[1]=s+h+p,e[2]=i+c+f,e}const E=function(){const e=[0,0,0],t=[0,0,0];return function(r,n){s(e,r),s(t,n),g(e,e),g(t,t);let i=v(e,t);return i>1?0:i<-1?Math.PI:Math.acos(i)}}();function C(e,t){return e[0]===t[0]&&e[1]===t[1]&&e[2]===t[2]}},"./node_modules/ogl/src/math/functions/Vec4Func.js":(e,t,r)=>{"use strict";r.r(t),r.d(t,{copy:()=>n,set:()=>s,add:()=>i,scale:()=>o,length:()=>a,normalize:()=>l,dot:()=>u,lerp:()=>h});function n(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e}function s(e,t,r,n,s){return e[0]=t,e[1]=r,e[2]=n,e[3]=s,e}function i(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e}function o(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e}function a(e){let t=e[0],r=e[1],n=e[2],s=e[3];return Math.sqrt(t*t+r*r+n*n+s*s)}function l(e,t){let r=t[0],n=t[1],s=t[2],i=t[3],o=r*r+n*n+s*s+i*i;return o>0&&(o=1/Math.sqrt(o)),e[0]=r*o,e[1]=n*o,e[2]=s*o,e[3]=i*o,e}function u(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]}function h(e,t,r,n){let s=t[0],i=t[1],o=t[2],a=t[3];return e[0]=s+n*(r[0]-s),e[1]=i+n*(r[1]-i),e[2]=o+n*(r[2]-o),e[3]=a+n*(r[3]-a),e}},"./node_modules/prefix/index.js":e=>{var t="undefined"!=typeof document?document.createElement("p").style:{},r=["O","ms","Moz","Webkit"],n=/([A-Z])/g,s={};function i(e){if(e=e.replace(/-([a-z])/g,(function(e,t){return t.toUpperCase()})),void 0!==t[e])return e;for(var n=e.charAt(0).toUpperCase()+e.slice(1),s=r.length;s--;){var i=r[s]+n;if(void 0!==t[i])return i}return e}e.exports=function(e){return e in s?s[e]:s[e]=i(e)},e.exports.dash=function(e){return e=i(e),n.test(e)&&(e="-"+e.replace(n,"-$1"),n.lastIndex=0),e.toLowerCase()}},"./node_modules/querystring/decode.js":e=>{"use strict";function t(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,r,n,s){r=r||"&",n=n||"=";var i={};if("string"!=typeof e||0===e.length)return i;var o=/\+/g;e=e.split(r);var a=1e3;s&&"number"==typeof s.maxKeys&&(a=s.maxKeys);var l=e.length;a>0&&l>a&&(l=a);for(var u=0;u<l;++u){var h,c,d,p,f=e[u].replace(o,"%20"),m=f.indexOf(n);m>=0?(h=f.substr(0,m),c=f.substr(m+1)):(h=f,c=""),d=decodeURIComponent(h),p=decodeURIComponent(c),t(i,d)?Array.isArray(i[d])?i[d].push(p):i[d]=[i[d],p]:i[d]=p}return i}},"./node_modules/querystring/encode.js":e=>{"use strict";var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,r,n,s){return r=r||"&",n=n||"=",null===e&&(e=void 0),"object"==typeof e?Object.keys(e).map((function(s){var i=encodeURIComponent(t(s))+n;return Array.isArray(e[s])?e[s].map((function(e){return i+encodeURIComponent(t(e))})).join(r):i+encodeURIComponent(t(e[s]))})).join(r):s?encodeURIComponent(t(s))+n+encodeURIComponent(t(e)):""}},"./node_modules/querystring/index.js":(e,t,r)=>{"use strict";t.decode=t.parse=r("./node_modules/querystring/decode.js"),t.encode=t.stringify=r("./node_modules/querystring/encode.js")},"./node_modules/sockjs-client/dist/sockjs.js":(e,t,r)=>{var n;e.exports=function(){function e(t,r,n){function s(o,a){if(!r[o]){if(!t[o]){if(i)return i(o,!0);var l=new Error("Cannot find module '"+o+"'");throw l.code="MODULE_NOT_FOUND",l}var u=r[o]={exports:{}};t[o][0].call(u.exports,(function(e){return s(t[o][1][e]||e)}),u,u.exports,e,t,r,n)}return r[o].exports}for(var i=void 0,o=0;o<n.length;o++)s(n[o]);return s}return e}()({1:[function(e,t,n){(function(r){"use strict";var n=e("./transport-list");t.exports=e("./main")(n),"_sockjs_onload"in r&&setTimeout(r._sockjs_onload,1)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./main":14,"./transport-list":16}],2:[function(e,t,r){"use strict";var n=e("inherits"),s=e("./event");function i(){s.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}n(i,s),t.exports=i},{"./event":4,inherits:57}],3:[function(e,t,r){"use strict";var n=e("inherits"),s=e("./eventtarget");function i(){s.call(this)}n(i,s),i.prototype.removeAllListeners=function(e){e?delete this._listeners[e]:this._listeners={}},i.prototype.once=function(e,t){var r=this,n=!1;function s(){r.removeListener(e,s),n||(n=!0,t.apply(this,arguments))}this.on(e,s)},i.prototype.emit=function(){var e=arguments[0],t=this._listeners[e];if(t){for(var r=arguments.length,n=new Array(r-1),s=1;s<r;s++)n[s-1]=arguments[s];for(var i=0;i<t.length;i++)t[i].apply(this,n)}},i.prototype.on=i.prototype.addListener=s.prototype.addEventListener,i.prototype.removeListener=s.prototype.removeEventListener,t.exports.EventEmitter=i},{"./eventtarget":5,inherits:57}],4:[function(e,t,r){"use strict";function n(e){this.type=e}n.prototype.initEvent=function(e,t,r){return this.type=e,this.bubbles=t,this.cancelable=r,this.timeStamp=+new Date,this},n.prototype.stopPropagation=function(){},n.prototype.preventDefault=function(){},n.CAPTURING_PHASE=1,n.AT_TARGET=2,n.BUBBLING_PHASE=3,t.exports=n},{}],5:[function(e,t,r){"use strict";function n(){this._listeners={}}n.prototype.addEventListener=function(e,t){e in this._listeners||(this._listeners[e]=[]);var r=this._listeners[e];-1===r.indexOf(t)&&(r=r.concat([t])),this._listeners[e]=r},n.prototype.removeEventListener=function(e,t){var r=this._listeners[e];if(r){var n=r.indexOf(t);-1===n||(r.length>1?this._listeners[e]=r.slice(0,n).concat(r.slice(n+1)):delete this._listeners[e])}},n.prototype.dispatchEvent=function(){var e=arguments[0],t=e.type,r=1===arguments.length?[e]:Array.apply(null,arguments);if(this["on"+t]&&this["on"+t].apply(this,r),t in this._listeners)for(var n=this._listeners[t],s=0;s<n.length;s++)n[s].apply(this,r)},t.exports=n},{}],6:[function(e,t,r){"use strict";var n=e("inherits"),s=e("./event");function i(e){s.call(this),this.initEvent("message",!1,!1),this.data=e}n(i,s),t.exports=i},{"./event":4,inherits:57}],7:[function(e,t,r){"use strict";var n=e("json3"),s=e("./utils/iframe");function i(e){this._transport=e,e.on("message",this._transportMessage.bind(this)),e.on("close",this._transportClose.bind(this))}i.prototype._transportClose=function(e,t){s.postMessage("c",n.stringify([e,t]))},i.prototype._transportMessage=function(e){s.postMessage("t",e)},i.prototype._send=function(e){this._transport.send(e)},i.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},t.exports=i},{"./utils/iframe":47,json3:58}],8:[function(e,t,r){(function(r){"use strict";var n=e("./utils/url"),s=e("./utils/event"),i=e("json3"),o=e("./facade"),a=e("./info-iframe-receiver"),l=e("./utils/iframe"),u=e("./location"),h=function(){};"production"!==r.env.NODE_ENV&&(h=e("debug")("sockjs-client:iframe-bootstrap")),t.exports=function(e,t){var r,c={};t.forEach((function(e){e.facadeTransport&&(c[e.facadeTransport.transportName]=e.facadeTransport)})),c[a.transportName]=a,e.bootstrap_iframe=function(){var t;l.currentWindowId=u.hash.slice(1);var a=function(s){if(s.source===parent&&(void 0===r&&(r=s.origin),s.origin===r)){var a;try{a=i.parse(s.data)}catch(e){return void h("bad json",s.data)}if(a.windowId===l.currentWindowId)switch(a.type){case"s":var d;try{d=i.parse(a.data)}catch(e){h("bad json",a.data);break}var p=d[0],f=d[1],m=d[2],g=d[3];if(h(p,f,m,g),p!==e.version)throw new Error('Incompatible SockJS! Main site uses: "'+p+'", the iframe: "'+e.version+'".');if(!n.isOriginEqual(m,u.href)||!n.isOriginEqual(g,u.href))throw new Error("Can't connect to different domain from within an iframe. ("+u.href+", "+m+", "+g+")");t=new o(new c[f](m,g));break;case"m":t._send(a.data);break;case"c":t&&t._close(),t=null}}};s.attachEvent("message",a),l.postMessage("s")}}}).call(this,{env:{}})},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,debug:55,json3:58}],9:[function(e,t,r){(function(r){"use strict";var n=e("events").EventEmitter,s=e("inherits"),i=e("json3"),o=e("./utils/object"),a=function(){};function l(e,t){n.call(this);var r=this,s=+new Date;this.xo=new t("GET",e),this.xo.once("finish",(function(e,t){var n,l;if(200===e){if(l=+new Date-s,t)try{n=i.parse(t)}catch(e){a("bad json",t)}o.isObject(n)||(n={})}r.emit("finish",n,l),r.removeAllListeners()}))}"production"!==r.env.NODE_ENV&&(a=e("debug")("sockjs-client:info-ajax")),s(l,n),l.prototype.close=function(){this.removeAllListeners(),this.xo.close()},t.exports=l}).call(this,{env:{}})},{"./utils/object":49,debug:55,events:3,inherits:57,json3:58}],10:[function(e,t,r){"use strict";var n=e("inherits"),s=e("events").EventEmitter,i=e("json3"),o=e("./transport/sender/xhr-local"),a=e("./info-ajax");function l(e){var t=this;s.call(this),this.ir=new a(e,o),this.ir.once("finish",(function(e,r){t.ir=null,t.emit("message",i.stringify([e,r]))}))}n(l,s),l.transportName="iframe-info-receiver",l.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},t.exports=l},{"./info-ajax":9,"./transport/sender/xhr-local":37,events:3,inherits:57,json3:58}],11:[function(e,t,n){(function(r,n){"use strict";var s=e("events").EventEmitter,i=e("inherits"),o=e("json3"),a=e("./utils/event"),l=e("./transport/iframe"),u=e("./info-iframe-receiver"),h=function(){};function c(e,t){var r=this;s.call(this);var i=function(){var n=r.ifr=new l(u.transportName,t,e);n.once("message",(function(e){if(e){var t;try{t=o.parse(e)}catch(t){return h("bad json",e),r.emit("finish"),void r.close()}var n=t[0],s=t[1];r.emit("finish",n,s)}r.close()})),n.once("close",(function(){r.emit("finish"),r.close()}))};n.document.body?i():a.attachEvent("load",i)}"production"!==r.env.NODE_ENV&&(h=e("debug")("sockjs-client:info-iframe")),i(c,s),c.enabled=function(){return l.enabled()},c.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},t.exports=c}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,debug:55,events:3,inherits:57,json3:58}],12:[function(e,t,r){(function(r){"use strict";var n=e("events").EventEmitter,s=e("inherits"),i=e("./utils/url"),o=e("./transport/sender/xdr"),a=e("./transport/sender/xhr-cors"),l=e("./transport/sender/xhr-local"),u=e("./transport/sender/xhr-fake"),h=e("./info-iframe"),c=e("./info-ajax"),d=function(){};function p(e,t){d(e);var r=this;n.call(this),setTimeout((function(){r.doXhr(e,t)}),0)}"production"!==r.env.NODE_ENV&&(d=e("debug")("sockjs-client:info-receiver")),s(p,n),p._getReceiver=function(e,t,r){return r.sameOrigin?new c(t,l):a.enabled?new c(t,a):o.enabled&&r.sameScheme?new c(t,o):h.enabled()?new h(e,t):new c(t,u)},p.prototype.doXhr=function(e,t){var r=this,n=i.addPath(e,"/info");d("doXhr",n),this.xo=p._getReceiver(e,n,t),this.timeoutRef=setTimeout((function(){d("timeout"),r._cleanup(!1),r.emit("finish")}),p.timeout),this.xo.once("finish",(function(e,t){d("finish",e,t),r._cleanup(!0),r.emit("finish",e,t)}))},p.prototype._cleanup=function(e){d("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!e&&this.xo&&this.xo.close(),this.xo=null},p.prototype.close=function(){d("close"),this.removeAllListeners(),this._cleanup(!1)},p.timeout=8e3,t.exports=p}).call(this,{env:{}})},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,debug:55,events:3,inherits:57}],13:[function(e,t,n){(function(e){"use strict";t.exports=e.location||{origin:"http://localhost:80",protocol:"http:",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(e,t,n){(function(r,n){"use strict";e("./shims");var s,i=e("url-parse"),o=e("inherits"),a=e("json3"),l=e("./utils/random"),u=e("./utils/escape"),h=e("./utils/url"),c=e("./utils/event"),d=e("./utils/transport"),p=e("./utils/object"),f=e("./utils/browser"),m=e("./utils/log"),g=e("./event/event"),v=e("./event/eventtarget"),_=e("./location"),y=e("./event/close"),b=e("./event/trans-message"),w=e("./info-receiver"),x=function(){};function j(e,t,r){if(!(this instanceof j))return new j(e,t,r);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");v.call(this),this.readyState=j.CONNECTING,this.extensions="",this.protocol="",(r=r||{}).protocols_whitelist&&m.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=r.transports,this._transportOptions=r.transportOptions||{},this._timeout=r.timeout||0;var n=r.sessionId||8;if("function"==typeof n)this._generateSessionId=n;else{if("number"!=typeof n)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return l.string(n)}}this._server=r.server||l.numberString(1e3);var s=new i(e);if(!s.host||!s.protocol)throw new SyntaxError("The URL '"+e+"' is invalid");if(s.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==s.protocol&&"https:"!==s.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+s.protocol+"' is not allowed.");var o="https:"===s.protocol;if("https:"===_.protocol&&!o&&!h.isLoopbackAddr(s.hostname))throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");t?Array.isArray(t)||(t=[t]):t=[];var a=t.sort();a.forEach((function(e,t){if(!e)throw new SyntaxError("The protocols entry '"+e+"' is invalid.");if(t<a.length-1&&e===a[t+1])throw new SyntaxError("The protocols entry '"+e+"' is duplicated.")}));var u=h.getOrigin(_.href);this._origin=u?u.toLowerCase():null,s.set("pathname",s.pathname.replace(/\/+$/,"")),this.url=s.href,x("using url",this.url),this._urlInfo={nullOrigin:!f.hasDomain(),sameOrigin:h.isOriginEqual(this.url,_.href),sameScheme:h.isSchemeEqual(this.url,_.href)},this._ir=new w(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function E(e){return 1e3===e||e>=3e3&&e<=4999}"production"!==r.env.NODE_ENV&&(x=e("debug")("sockjs-client:main")),o(j,v),j.prototype.close=function(e,t){if(e&&!E(e))throw new Error("InvalidAccessError: Invalid code");if(t&&t.length>123)throw new SyntaxError("reason argument has an invalid length");if(this.readyState!==j.CLOSING&&this.readyState!==j.CLOSED){var r=!0;this._close(e||1e3,t||"Normal closure",r)}},j.prototype.send=function(e){if("string"!=typeof e&&(e=""+e),this.readyState===j.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===j.OPEN&&this._transport.send(u.quote(e))},j.version=e("./version"),j.CONNECTING=0,j.OPEN=1,j.CLOSING=2,j.CLOSED=3,j.prototype._receiveInfo=function(e,t){if(x("_receiveInfo",t),this._ir=null,e){this._rto=this.countRTO(t),this._transUrl=e.base_url?e.base_url:this.url,e=p.extend(e,this._urlInfo),x("info",e);var r=s.filterToEnabled(this._transportsWhitelist,e);this._transports=r.main,x(this._transports.length+" enabled transports"),this._connect()}else this._close(1002,"Cannot connect to server")},j.prototype._connect=function(){for(var e=this._transports.shift();e;e=this._transports.shift()){if(x("attempt",e.transportName),e.needBody&&(!n.document.body||void 0!==n.document.readyState&&"complete"!==n.document.readyState&&"interactive"!==n.document.readyState))return x("waiting for body"),this._transports.unshift(e),void c.attachEvent("load",this._connect.bind(this));var t=Math.max(this._timeout,this._rto*e.roundTrips||5e3);this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),t),x("using timeout",t);var r=h.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),s=this._transportOptions[e.transportName];x("transport url",r);var i=new e(r,this._transUrl,s);return i.on("message",this._transportMessage.bind(this)),i.once("close",this._transportClose.bind(this)),i.transportName=e.transportName,void(this._transport=i)}this._close(2e3,"All transports failed",!1)},j.prototype._transportTimeout=function(){x("_transportTimeout"),this.readyState===j.CONNECTING&&(this._transport&&this._transport.close(),this._transportClose(2007,"Transport timed out"))},j.prototype._transportMessage=function(e){x("_transportMessage",e);var t,r=this,n=e.slice(0,1),s=e.slice(1);switch(n){case"o":return void this._open();case"h":return this.dispatchEvent(new g("heartbeat")),void x("heartbeat",this.transport)}if(s)try{t=a.parse(s)}catch(e){x("bad json",s)}if(void 0!==t)switch(n){case"a":Array.isArray(t)&&t.forEach((function(e){x("message",r.transport,e),r.dispatchEvent(new b(e))}));break;case"m":x("message",this.transport,t),this.dispatchEvent(new b(t));break;case"c":Array.isArray(t)&&2===t.length&&this._close(t[0],t[1],!0)}else x("empty payload",s)},j.prototype._transportClose=function(e,t){x("_transportClose",this.transport,e,t),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),E(e)||2e3===e||this.readyState!==j.CONNECTING?this._close(e,t):this._connect()},j.prototype._open=function(){x("_open",this._transport&&this._transport.transportName,this.readyState),this.readyState===j.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=j.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new g("open")),x("connected",this.transport)):this._close(1006,"Server lost session")},j.prototype._close=function(e,t,r){x("_close",this.transport,e,t,r,this.readyState);var n=!1;if(this._ir&&(n=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===j.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=j.CLOSING,setTimeout(function(){this.readyState=j.CLOSED,n&&this.dispatchEvent(new g("error"));var s=new y("close");s.wasClean=r||!1,s.code=e||1e3,s.reason=t,this.dispatchEvent(s),this.onmessage=this.onclose=this.onerror=null,x("disconnected")}.bind(this),0)},j.prototype.countRTO=function(e){return e>100?4*e:300+e},t.exports=function(t){return s=d(t),e("./iframe-bootstrap")(j,t),j}}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,debug:55,inherits:57,json3:58,"url-parse":61}],15:[function(e,t,r){"use strict";var n,s=Array.prototype,i=Object.prototype,o=Function.prototype,a=String.prototype,l=s.slice,u=i.toString,h=function(e){return"[object Function]"===i.toString.call(e)},c=function(e){return"[object Array]"===u.call(e)},d=function(e){return"[object String]"===u.call(e)},p=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(e){return!1}}();n=p?function(e,t,r,n){!n&&t in e||Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:!0,value:r})}:function(e,t,r,n){!n&&t in e||(e[t]=r)};var f=function(e,t,r){for(var s in t)i.hasOwnProperty.call(t,s)&&n(e,s,t[s],r)},m=function(e){if(null==e)throw new TypeError("can't convert "+e+" to object");return Object(e)};function g(e){var t=+e;return t!=t?t=0:0!==t&&t!==1/0&&t!==-1/0&&(t=(t>0||-1)*Math.floor(Math.abs(t))),t}function v(e){return e>>>0}function _(){}f(o,{bind:function(e){var t=this;if(!h(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var r=l.call(arguments,1),n=function(){if(this instanceof a){var n=t.apply(this,r.concat(l.call(arguments)));return Object(n)===n?n:this}return t.apply(e,r.concat(l.call(arguments)))},s=Math.max(0,t.length-r.length),i=[],o=0;o<s;o++)i.push("$"+o);var a=Function("binder","return function ("+i.join(",")+"){ return binder.apply(this, arguments); }")(n);return t.prototype&&(_.prototype=t.prototype,a.prototype=new _,_.prototype=null),a}}),f(Array,{isArray:c});var y,b,w,x=Object("a"),j="a"!==x[0]||!(0 in x);f(s,{forEach:function(e){var t=m(this),r=j&&d(this)?this.split(""):t,n=arguments[1],s=-1,i=r.length>>>0;if(!h(e))throw new TypeError;for(;++s<i;)s in r&&e.call(n,r[s],s,t)}},(y=s.forEach,b=!0,w=!0,y&&(y.call("foo",(function(e,t,r){"object"!=typeof r&&(b=!1)})),y.call([1],(function(){w="string"==typeof this}),"x")),!(y&&b&&w)));var E=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);f(s,{indexOf:function(e){var t=j&&d(this)?this.split(""):m(this),r=t.length>>>0;if(!r)return-1;var n=0;for(arguments.length>1&&(n=g(arguments[1])),n=n>=0?n:Math.max(0,r+n);n<r;n++)if(n in t&&t[n]===e)return n;return-1}},E);var C,A=a.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(C=void 0===/()??/.exec("")[1],a.split=function(e,t){var r=this;if(void 0===e&&0===t)return[];if("[object RegExp]"!==u.call(e))return A.call(this,e,t);var n,i,o,a,l=[],h=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.extended?"x":"")+(e.sticky?"y":""),c=0;for(e=new RegExp(e.source,h+"g"),r+="",C||(n=new RegExp("^"+e.source+"$(?!\\s)",h)),t=void 0===t?-1>>>0:v(t);(i=e.exec(r))&&!((o=i.index+i[0].length)>c&&(l.push(r.slice(c,i.index)),!C&&i.length>1&&i[0].replace(n,(function(){for(var e=1;e<arguments.length-2;e++)void 0===arguments[e]&&(i[e]=void 0)})),i.length>1&&i.index<r.length&&s.push.apply(l,i.slice(1)),a=i[0].length,c=o,l.length>=t));)e.lastIndex===i.index&&e.lastIndex++;return c===r.length?!a&&e.test("")||l.push(""):l.push(r.slice(c)),l.length>t?l.slice(0,t):l}):"0".split(void 0,0).length&&(a.split=function(e,t){return void 0===e&&0===t?[]:A.call(this,e,t)});var T=a.substr,S="".substr&&"b"!=="0b".substr(-1);f(a,{substr:function(e,t){return T.call(this,e<0&&(e=this.length+e)<0?0:e,t)}},S)},{}],16:[function(e,t,r){"use strict";t.exports=[e("./transport/websocket"),e("./transport/xhr-streaming"),e("./transport/xdr-streaming"),e("./transport/eventsource"),e("./transport/lib/iframe-wrap")(e("./transport/eventsource")),e("./transport/htmlfile"),e("./transport/lib/iframe-wrap")(e("./transport/htmlfile")),e("./transport/xhr-polling"),e("./transport/xdr-polling"),e("./transport/lib/iframe-wrap")(e("./transport/xhr-polling")),e("./transport/jsonp-polling")]},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(e,t,n){(function(r,n){"use strict";var s=e("events").EventEmitter,i=e("inherits"),o=e("../../utils/event"),a=e("../../utils/url"),l=n.XMLHttpRequest,u=function(){};function h(e,t,r,n){u(e,t);var i=this;s.call(this),setTimeout((function(){i._start(e,t,r,n)}),0)}"production"!==r.env.NODE_ENV&&(u=e("debug")("sockjs-client:browser:xhr")),i(h,s),h.prototype._start=function(e,t,r,n){var s=this;try{this.xhr=new l}catch(e){}if(!this.xhr)return u("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();t=a.addQuery(t,"t="+ +new Date),this.unloadRef=o.unloadAdd((function(){u("unload cleanup"),s._cleanup(!0)}));try{this.xhr.open(e,t,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){u("xhr timeout"),s.emit("finish",0,""),s._cleanup(!1)})}catch(e){return u("exception",e),this.emit("finish",0,""),void this._cleanup(!1)}if(n&&n.noCredentials||!h.supportsCORS||(u("withCredentials"),this.xhr.withCredentials=!0),n&&n.headers)for(var i in n.headers)this.xhr.setRequestHeader(i,n.headers[i]);this.xhr.onreadystatechange=function(){if(s.xhr){var e,t,r=s.xhr;switch(u("readyState",r.readyState),r.readyState){case 3:try{t=r.status,e=r.responseText}catch(e){}u("status",t),1223===t&&(t=204),200===t&&e&&e.length>0&&(u("chunk"),s.emit("chunk",t,e));break;case 4:t=r.status,u("status",t),1223===t&&(t=204),12005!==t&&12029!==t||(t=0),u("finish",t,r.responseText),s.emit("finish",t,r.responseText),s._cleanup(!1)}}};try{s.xhr.send(r)}catch(e){s.emit("finish",0,""),s._cleanup(!1)}},h.prototype._cleanup=function(e){if(u("cleanup"),this.xhr){if(this.removeAllListeners(),o.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),e)try{this.xhr.abort()}catch(e){}this.unloadRef=this.xhr=null}},h.prototype.close=function(){u("close"),this._cleanup(!0)},h.enabled=!!l;var c=["Active"].concat("Object").join("X");!h.enabled&&c in n&&(u("overriding xmlhttprequest"),l=function(){try{return new n[c]("Microsoft.XMLHTTP")}catch(e){return null}},h.enabled=!!new l);var d=!1;try{d="withCredentials"in new l}catch(e){}h.supportsCORS=d,t.exports=h}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],18:[function(e,t,n){(function(e){t.exports=e.EventSource}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(e,t,n){(function(e){"use strict";var r=e.WebSocket||e.MozWebSocket;t.exports=r?function(e){return new r(e)}:void 0}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],20:[function(e,t,r){"use strict";var n=e("inherits"),s=e("./lib/ajax-based"),i=e("./receiver/eventsource"),o=e("./sender/xhr-cors"),a=e("eventsource");function l(e){if(!l.enabled())throw new Error("Transport created when disabled");s.call(this,e,"/eventsource",i,o)}n(l,s),l.enabled=function(){return!!a},l.transportName="eventsource",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,eventsource:18,inherits:57}],21:[function(e,t,r){"use strict";var n=e("inherits"),s=e("./receiver/htmlfile"),i=e("./sender/xhr-local"),o=e("./lib/ajax-based");function a(e){if(!s.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/htmlfile",s,i)}n(a,o),a.enabled=function(e){return s.enabled&&e.sameOrigin},a.transportName="htmlfile",a.roundTrips=2,t.exports=a},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,inherits:57}],22:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),s=e("json3"),i=e("events").EventEmitter,o=e("../version"),a=e("../utils/url"),l=e("../utils/iframe"),u=e("../utils/event"),h=e("../utils/random"),c=function(){};function d(e,t,r){if(!d.enabled())throw new Error("Transport created when disabled");i.call(this);var n=this;this.origin=a.getOrigin(r),this.baseUrl=r,this.transUrl=t,this.transport=e,this.windowId=h.string(8);var s=a.addPath(r,"/iframe.html")+"#"+this.windowId;c(e,t,s),this.iframeObj=l.createIframe(s,(function(e){c("err callback"),n.emit("close",1006,"Unable to load an iframe ("+e+")"),n.close()})),this.onmessageCallback=this._message.bind(this),u.attachEvent("message",this.onmessageCallback)}"production"!==r.env.NODE_ENV&&(c=e("debug")("sockjs-client:transport:iframe")),n(d,i),d.prototype.close=function(){if(c("close"),this.removeAllListeners(),this.iframeObj){u.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(e){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},d.prototype._message=function(e){if(c("message",e.data),a.isOriginEqual(e.origin,this.origin)){var t;try{t=s.parse(e.data)}catch(t){return void c("bad json",e.data)}if(t.windowId===this.windowId)switch(t.type){case"s":this.iframeObj.loaded(),this.postMessage("s",s.stringify([o,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",t.data);break;case"c":var r;try{r=s.parse(t.data)}catch(e){return void c("bad json",t.data)}this.emit("close",r[0],r[1]),this.close()}else c("mismatched window id",t.windowId,this.windowId)}else c("not same origin",e.origin,this.origin)},d.prototype.postMessage=function(e,t){c("postMessage",e,t),this.iframeObj.post(s.stringify({windowId:this.windowId,type:e,data:t||""}),this.origin)},d.prototype.send=function(e){c("send",e),this.postMessage("m",e)},d.enabled=function(){return l.iframeEnabled},d.transportName="iframe",d.roundTrips=2,t.exports=d}).call(this,{env:{}})},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,debug:55,events:3,inherits:57,json3:58}],23:[function(e,t,n){(function(r){"use strict";var n=e("inherits"),s=e("./lib/sender-receiver"),i=e("./receiver/jsonp"),o=e("./sender/jsonp");function a(e){if(!a.enabled())throw new Error("Transport created when disabled");s.call(this,e,"/jsonp",o,i)}n(a,s),a.enabled=function(){return!!r.document},a.transportName="jsonp-polling",a.roundTrips=1,a.needBody=!0,t.exports=a}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,inherits:57}],24:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),s=e("../../utils/url"),i=e("./sender-receiver"),o=function(){};function a(e){return function(t,r,n){o("create ajax sender",t,r);var i={};"string"==typeof r&&(i.headers={"Content-type":"text/plain"});var a=s.addPath(t,"/xhr_send"),l=new e("POST",a,r,i);return l.once("finish",(function(e){if(o("finish",e),l=null,200!==e&&204!==e)return n(new Error("http status "+e));n()})),function(){o("abort"),l.close(),l=null;var e=new Error("Aborted");e.code=1e3,n(e)}}}function l(e,t,r,n){i.call(this,e,t,a(n),r,n)}"production"!==r.env.NODE_ENV&&(o=e("debug")("sockjs-client:ajax-based")),n(l,i),t.exports=l}).call(this,{env:{}})},{"../../utils/url":52,"./sender-receiver":28,debug:55,inherits:57}],25:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),s=e("events").EventEmitter,i=function(){};function o(e,t){i(e),s.call(this),this.sendBuffer=[],this.sender=t,this.url=e}"production"!==r.env.NODE_ENV&&(i=e("debug")("sockjs-client:buffered-sender")),n(o,s),o.prototype.send=function(e){i("send",e),this.sendBuffer.push(e),this.sendStop||this.sendSchedule()},o.prototype.sendScheduleWait=function(){i("sendScheduleWait");var e,t=this;this.sendStop=function(){i("sendStop"),t.sendStop=null,clearTimeout(e)},e=setTimeout((function(){i("timeout"),t.sendStop=null,t.sendSchedule()}),25)},o.prototype.sendSchedule=function(){i("sendSchedule",this.sendBuffer.length);var e=this;if(this.sendBuffer.length>0){var t="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,t,(function(t){e.sendStop=null,t?(i("error",t),e.emit("close",t.code||1006,"Sending error: "+t),e.close()):e.sendScheduleWait()})),this.sendBuffer=[]}},o.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},o.prototype.close=function(){i("close"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},t.exports=o}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],26:[function(e,t,n){(function(r){"use strict";var n=e("inherits"),s=e("../iframe"),i=e("../../utils/object");t.exports=function(e){function t(t,r){s.call(this,e.transportName,t,r)}return n(t,s),t.enabled=function(t,n){if(!r.document)return!1;var o=i.extend({},n);return o.sameOrigin=!0,e.enabled(o)&&s.enabled()},t.transportName="iframe-"+e.transportName,t.needBody=!0,t.roundTrips=s.roundTrips+e.roundTrips-1,t.facadeTransport=e,t}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/object":49,"../iframe":22,inherits:57}],27:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),s=e("events").EventEmitter,i=function(){};function o(e,t,r){i(t),s.call(this),this.Receiver=e,this.receiveUrl=t,this.AjaxObject=r,this._scheduleReceiver()}"production"!==r.env.NODE_ENV&&(i=e("debug")("sockjs-client:polling")),n(o,s),o.prototype._scheduleReceiver=function(){i("_scheduleReceiver");var e=this,t=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);t.on("message",(function(t){i("message",t),e.emit("message",t)})),t.once("close",(function(r,n){i("close",r,n,e.pollIsClosing),e.poll=t=null,e.pollIsClosing||("network"===n?e._scheduleReceiver():(e.emit("close",r||1006,n),e.removeAllListeners()))}))},o.prototype.abort=function(){i("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},t.exports=o}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],28:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),s=e("../../utils/url"),i=e("./buffered-sender"),o=e("./polling"),a=function(){};function l(e,t,r,n,l){var u=s.addPath(e,t);a(u);var h=this;i.call(this,e,r),this.poll=new o(n,u,l),this.poll.on("message",(function(e){a("poll message",e),h.emit("message",e)})),this.poll.once("close",(function(e,t){a("poll close",e,t),h.poll=null,h.emit("close",e,t),h.close()}))}"production"!==r.env.NODE_ENV&&(a=e("debug")("sockjs-client:sender-receiver")),n(l,i),l.prototype.close=function(){i.prototype.close.call(this),a("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null)},t.exports=l}).call(this,{env:{}})},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,debug:55,inherits:57}],29:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),s=e("events").EventEmitter,i=e("eventsource"),o=function(){};function a(e){o(e),s.call(this);var t=this,r=this.es=new i(e);r.onmessage=function(e){o("message",e.data),t.emit("message",decodeURI(e.data))},r.onerror=function(e){o("error",r.readyState,e);var n=2!==r.readyState?"network":"permanent";t._cleanup(),t._close(n)}}"production"!==r.env.NODE_ENV&&(o=e("debug")("sockjs-client:receiver:eventsource")),n(a,s),a.prototype.abort=function(){o("abort"),this._cleanup(),this._close("user")},a.prototype._cleanup=function(){o("cleanup");var e=this.es;e&&(e.onmessage=e.onerror=null,e.close(),this.es=null)},a.prototype._close=function(e){o("close",e);var t=this;setTimeout((function(){t.emit("close",null,e),t.removeAllListeners()}),200)},t.exports=a}).call(this,{env:{}})},{debug:55,events:3,eventsource:18,inherits:57}],30:[function(e,t,n){(function(r,n){"use strict";var s=e("inherits"),i=e("../../utils/iframe"),o=e("../../utils/url"),a=e("events").EventEmitter,l=e("../../utils/random"),u=function(){};function h(e){u(e),a.call(this);var t=this;i.polluteGlobalNamespace(),this.id="a"+l.string(6),e=o.addQuery(e,"c="+decodeURIComponent(i.WPrefix+"."+this.id)),u("using htmlfile",h.htmlfileEnabled);var r=h.htmlfileEnabled?i.createHtmlfile:i.createIframe;n[i.WPrefix][this.id]={start:function(){u("start"),t.iframeObj.loaded()},message:function(e){u("message",e),t.emit("message",e)},stop:function(){u("stop"),t._cleanup(),t._close("network")}},this.iframeObj=r(e,(function(){u("callback"),t._cleanup(),t._close("permanent")}))}"production"!==r.env.NODE_ENV&&(u=e("debug")("sockjs-client:receiver:htmlfile")),s(h,a),h.prototype.abort=function(){u("abort"),this._cleanup(),this._close("user")},h.prototype._cleanup=function(){u("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete n[i.WPrefix][this.id]},h.prototype._close=function(e){u("_close",e),this.emit("close",null,e),this.removeAllListeners()},h.htmlfileEnabled=!1;var c=["Active"].concat("Object").join("X");if(c in n)try{h.htmlfileEnabled=!!new n[c]("htmlfile")}catch(e){}h.enabled=h.htmlfileEnabled||i.iframeEnabled,t.exports=h}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],31:[function(e,t,n){(function(r,n){"use strict";var s=e("../../utils/iframe"),i=e("../../utils/random"),o=e("../../utils/browser"),a=e("../../utils/url"),l=e("inherits"),u=e("events").EventEmitter,h=function(){};function c(e){h(e);var t=this;u.call(this),s.polluteGlobalNamespace(),this.id="a"+i.string(6);var r=a.addQuery(e,"c="+encodeURIComponent(s.WPrefix+"."+this.id));n[s.WPrefix][this.id]=this._callback.bind(this),this._createScript(r),this.timeoutId=setTimeout((function(){h("timeout"),t._abort(new Error("JSONP script loaded abnormally (timeout)"))}),c.timeout)}"production"!==r.env.NODE_ENV&&(h=e("debug")("sockjs-client:receiver:jsonp")),l(c,u),c.prototype.abort=function(){if(h("abort"),n[s.WPrefix][this.id]){var e=new Error("JSONP user aborted read");e.code=1e3,this._abort(e)}},c.timeout=35e3,c.scriptErrorTimeout=1e3,c.prototype._callback=function(e){h("_callback",e),this._cleanup(),this.aborting||(e&&(h("message",e),this.emit("message",e)),this.emit("close",null,"network"),this.removeAllListeners())},c.prototype._abort=function(e){h("_abort",e),this._cleanup(),this.aborting=!0,this.emit("close",e.code,e.message),this.removeAllListeners()},c.prototype._cleanup=function(){if(h("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var e=this.script;e.parentNode.removeChild(e),e.onreadystatechange=e.onerror=e.onload=e.onclick=null,this.script=null}delete n[s.WPrefix][this.id]},c.prototype._scriptError=function(){h("_scriptError");var e=this;this.errorTimer||(this.errorTimer=setTimeout((function(){e.loadedOkay||e._abort(new Error("JSONP script loaded abnormally (onerror)"))}),c.scriptErrorTimeout))},c.prototype._createScript=function(e){h("_createScript",e);var t,r=this,s=this.script=n.document.createElement("script");if(s.id="a"+i.string(8),s.src=e,s.type="text/javascript",s.charset="UTF-8",s.onerror=this._scriptError.bind(this),s.onload=function(){h("onload"),r._abort(new Error("JSONP script loaded abnormally (onload)"))},s.onreadystatechange=function(){if(h("onreadystatechange",s.readyState),/loaded|closed/.test(s.readyState)){if(s&&s.htmlFor&&s.onclick){r.loadedOkay=!0;try{s.onclick()}catch(e){}}s&&r._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},void 0===s.async&&n.document.attachEvent)if(o.isOpera())(t=this.script2=n.document.createElement("script")).text="try{var a = document.getElementById('"+s.id+"'); if(a)a.onerror();}catch(x){};",s.async=t.async=!1;else{try{s.htmlFor=s.id,s.event="onclick"}catch(e){}s.async=!0}void 0!==s.async&&(s.async=!0);var a=n.document.getElementsByTagName("head")[0];a.insertBefore(s,a.firstChild),t&&a.insertBefore(t,a.firstChild)},t.exports=c}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],32:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),s=e("events").EventEmitter,i=function(){};function o(e,t){i(e),s.call(this);var r=this;this.bufferPosition=0,this.xo=new t("POST",e,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",(function(e,t){i("finish",e,t),r._chunkHandler(e,t),r.xo=null;var n=200===e?"network":"permanent";i("close",n),r.emit("close",null,n),r._cleanup()}))}"production"!==r.env.NODE_ENV&&(i=e("debug")("sockjs-client:receiver:xhr")),n(o,s),o.prototype._chunkHandler=function(e,t){if(i("_chunkHandler",e),200===e&&t)for(var r=-1;;this.bufferPosition+=r+1){var n=t.slice(this.bufferPosition);if(-1===(r=n.indexOf("\n")))break;var s=n.slice(0,r);s&&(i("message",s),this.emit("message",s))}},o.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},o.prototype.abort=function(){i("abort"),this.xo&&(this.xo.close(),i("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},t.exports=o}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],33:[function(e,t,n){(function(r,n){"use strict";var s,i,o=e("../../utils/random"),a=e("../../utils/url"),l=function(){};function u(e){l("createIframe",e);try{return n.document.createElement('<iframe name="'+e+'">')}catch(r){var t=n.document.createElement("iframe");return t.name=e,t}}function h(){l("createForm"),(s=n.document.createElement("form")).style.display="none",s.style.position="absolute",s.method="POST",s.enctype="application/x-www-form-urlencoded",s.acceptCharset="UTF-8",(i=n.document.createElement("textarea")).name="d",s.appendChild(i),n.document.body.appendChild(s)}"production"!==r.env.NODE_ENV&&(l=e("debug")("sockjs-client:sender:jsonp")),t.exports=function(e,t,r){l(e,t),s||h();var n="a"+o.string(8);s.target=n,s.action=a.addQuery(a.addPath(e,"/jsonp_send"),"i="+n);var c=u(n);c.id=n,c.style.display="none",s.appendChild(c);try{i.value=t}catch(e){}s.submit();var d=function(e){l("completed",n,e),c.onerror&&(c.onreadystatechange=c.onerror=c.onload=null,setTimeout((function(){l("cleaning up",n),c.parentNode.removeChild(c),c=null}),500),i.value="",r(e))};return c.onerror=function(){l("onerror",n),d()},c.onload=function(){l("onload",n),d()},c.onreadystatechange=function(e){l("onreadystatechange",n,c.readyState,e),"complete"===c.readyState&&d()},function(){l("aborted",n),d(new Error("Aborted"))}}}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/random":50,"../../utils/url":52,debug:55}],34:[function(e,t,n){(function(r,n){"use strict";var s=e("events").EventEmitter,i=e("inherits"),o=e("../../utils/event"),a=e("../../utils/browser"),l=e("../../utils/url"),u=function(){};function h(e,t,r){u(e,t);var n=this;s.call(this),setTimeout((function(){n._start(e,t,r)}),0)}"production"!==r.env.NODE_ENV&&(u=e("debug")("sockjs-client:sender:xdr")),i(h,s),h.prototype._start=function(e,t,r){u("_start");var s=this,i=new n.XDomainRequest;t=l.addQuery(t,"t="+ +new Date),i.onerror=function(){u("onerror"),s._error()},i.ontimeout=function(){u("ontimeout"),s._error()},i.onprogress=function(){u("progress",i.responseText),s.emit("chunk",200,i.responseText)},i.onload=function(){u("load"),s.emit("finish",200,i.responseText),s._cleanup(!1)},this.xdr=i,this.unloadRef=o.unloadAdd((function(){s._cleanup(!0)}));try{this.xdr.open(e,t),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(r)}catch(e){this._error()}},h.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},h.prototype._cleanup=function(e){if(u("cleanup",e),this.xdr){if(this.removeAllListeners(),o.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,e)try{this.xdr.abort()}catch(e){}this.unloadRef=this.xdr=null}},h.prototype.close=function(){u("close"),this._cleanup(!0)},h.enabled=!(!n.XDomainRequest||!a.hasDomain()),t.exports=h}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],35:[function(e,t,r){"use strict";var n=e("inherits"),s=e("../driver/xhr");function i(e,t,r,n){s.call(this,e,t,r,n)}n(i,s),i.enabled=s.enabled&&s.supportsCORS,t.exports=i},{"../driver/xhr":17,inherits:57}],36:[function(e,t,r){"use strict";var n=e("events").EventEmitter;function s(){var e=this;n.call(this),this.to=setTimeout((function(){e.emit("finish",200,"{}")}),s.timeout)}e("inherits")(s,n),s.prototype.close=function(){clearTimeout(this.to)},s.timeout=2e3,t.exports=s},{events:3,inherits:57}],37:[function(e,t,r){"use strict";var n=e("inherits"),s=e("../driver/xhr");function i(e,t,r){s.call(this,e,t,r,{noCredentials:!0})}n(i,s),i.enabled=s.enabled,t.exports=i},{"../driver/xhr":17,inherits:57}],38:[function(e,t,r){(function(r){"use strict";var n=e("../utils/event"),s=e("../utils/url"),i=e("inherits"),o=e("events").EventEmitter,a=e("./driver/websocket"),l=function(){};function u(e,t,r){if(!u.enabled())throw new Error("Transport created when disabled");o.call(this),l("constructor",e);var i=this,h=s.addPath(e,"/websocket");h="https"===h.slice(0,5)?"wss"+h.slice(5):"ws"+h.slice(4),this.url=h,this.ws=new a(this.url,[],r),this.ws.onmessage=function(e){l("message event",e.data),i.emit("message",e.data)},this.unloadRef=n.unloadAdd((function(){l("unload"),i.ws.close()})),this.ws.onclose=function(e){l("close event",e.code,e.reason),i.emit("close",e.code,e.reason),i._cleanup()},this.ws.onerror=function(e){l("error event",e),i.emit("close",1006,"WebSocket connection broken"),i._cleanup()}}"production"!==r.env.NODE_ENV&&(l=e("debug")("sockjs-client:websocket")),i(u,o),u.prototype.send=function(e){var t="["+e+"]";l("send",t),this.ws.send(t)},u.prototype.close=function(){l("close");var e=this.ws;this._cleanup(),e&&e.close()},u.prototype._cleanup=function(){l("_cleanup");var e=this.ws;e&&(e.onmessage=e.onclose=e.onerror=null),n.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},u.enabled=function(){return l("enabled"),!!a},u.transportName="websocket",u.roundTrips=2,t.exports=u}).call(this,{env:{}})},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,debug:55,events:3,inherits:57}],39:[function(e,t,r){"use strict";var n=e("inherits"),s=e("./lib/ajax-based"),i=e("./xdr-streaming"),o=e("./receiver/xhr"),a=e("./sender/xdr");function l(e){if(!a.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/xhr",o,a)}n(l,s),l.enabled=i.enabled,l.transportName="xdr-polling",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,inherits:57}],40:[function(e,t,r){"use strict";var n=e("inherits"),s=e("./lib/ajax-based"),i=e("./receiver/xhr"),o=e("./sender/xdr");function a(e){if(!o.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/xhr_streaming",i,o)}n(a,s),a.enabled=function(e){return!e.cookie_needed&&!e.nullOrigin&&o.enabled&&e.sameScheme},a.transportName="xdr-streaming",a.roundTrips=2,t.exports=a},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,inherits:57}],41:[function(e,t,r){"use strict";var n=e("inherits"),s=e("./lib/ajax-based"),i=e("./receiver/xhr"),o=e("./sender/xhr-cors"),a=e("./sender/xhr-local");function l(e){if(!a.enabled&&!o.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/xhr",i,o)}n(l,s),l.enabled=function(e){return!e.nullOrigin&&(!(!a.enabled||!e.sameOrigin)||o.enabled)},l.transportName="xhr-polling",l.roundTrips=2,t.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],42:[function(e,t,n){(function(r){"use strict";var n=e("inherits"),s=e("./lib/ajax-based"),i=e("./receiver/xhr"),o=e("./sender/xhr-cors"),a=e("./sender/xhr-local"),l=e("../utils/browser");function u(e){if(!a.enabled&&!o.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/xhr_streaming",i,o)}n(u,s),u.enabled=function(e){return!e.nullOrigin&&!l.isOpera()&&o.enabled},u.transportName="xhr-streaming",u.roundTrips=2,u.needBody=!!r.document,t.exports=u}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],43:[function(e,t,n){(function(e){"use strict";e.crypto&&e.crypto.getRandomValues?t.exports.randomBytes=function(t){var r=new Uint8Array(t);return e.crypto.getRandomValues(r),r}:t.exports.randomBytes=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=Math.floor(256*Math.random());return t}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],44:[function(e,t,n){(function(e){"use strict";t.exports={isOpera:function(){return e.navigator&&/opera/i.test(e.navigator.userAgent)},isKonqueror:function(){return e.navigator&&/konqueror/i.test(e.navigator.userAgent)},hasDomain:function(){if(!e.document)return!0;try{return!!e.document.domain}catch(e){return!1}}}}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(e,t,r){"use strict";var n,s=e("json3"),i=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,o=function(e){var t,r={},n=[];for(t=0;t<65536;t++)n.push(String.fromCharCode(t));return e.lastIndex=0,n.join("").replace(e,(function(e){return r[e]="\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4),""})),e.lastIndex=0,r};t.exports={quote:function(e){var t=s.stringify(e);return i.lastIndex=0,i.test(t)?(n||(n=o(i)),t.replace(i,(function(e){return n[e]}))):t}}},{json3:58}],46:[function(e,t,n){(function(r){"use strict";var n=e("./random"),s={},i=!1,o=r.chrome&&r.chrome.app&&r.chrome.app.runtime;t.exports={attachEvent:function(e,t){void 0!==r.addEventListener?r.addEventListener(e,t,!1):r.document&&r.attachEvent&&(r.document.attachEvent("on"+e,t),r.attachEvent("on"+e,t))},detachEvent:function(e,t){void 0!==r.addEventListener?r.removeEventListener(e,t,!1):r.document&&r.detachEvent&&(r.document.detachEvent("on"+e,t),r.detachEvent("on"+e,t))},unloadAdd:function(e){if(o)return null;var t=n.string(8);return s[t]=e,i&&setTimeout(this.triggerUnloadCallbacks,0),t},unloadDel:function(e){e in s&&delete s[e]},triggerUnloadCallbacks:function(){for(var e in s)s[e](),delete s[e]}};var a=function(){i||(i=!0,t.exports.triggerUnloadCallbacks())};o||t.exports.attachEvent("unload",a)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./random":50}],47:[function(e,t,n){(function(r,n){"use strict";var s=e("./event"),i=e("json3"),o=e("./browser"),a=function(){};"production"!==r.env.NODE_ENV&&(a=e("debug")("sockjs-client:utils:iframe")),t.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){t.exports.WPrefix in n||(n[t.exports.WPrefix]={})},postMessage:function(e,r){n.parent!==n?n.parent.postMessage(i.stringify({windowId:t.exports.currentWindowId,type:e,data:r||""}),"*"):a("Cannot postMessage, no parent window.",e,r)},createIframe:function(e,t){var r,i,o=n.document.createElement("iframe"),l=function(){a("unattach"),clearTimeout(r);try{o.onload=null}catch(e){}o.onerror=null},u=function(){a("cleanup"),o&&(l(),setTimeout((function(){o&&o.parentNode.removeChild(o),o=null}),0),s.unloadDel(i))},h=function(e){a("onerror",e),o&&(u(),t(e))},c=function(e,t){a("post",e,t),setTimeout((function(){try{o&&o.contentWindow&&o.contentWindow.postMessage(e,t)}catch(e){}}),0)};return o.src=e,o.style.display="none",o.style.position="absolute",o.onerror=function(){h("onerror")},o.onload=function(){a("onload"),clearTimeout(r),r=setTimeout((function(){h("onload timeout")}),2e3)},n.document.body.appendChild(o),r=setTimeout((function(){h("timeout")}),15e3),i=s.unloadAdd(u),{post:c,cleanup:u,loaded:l}},createHtmlfile:function(e,r){var i,o,l,u=["Active"].concat("Object").join("X"),h=new n[u]("htmlfile"),c=function(){clearTimeout(i),l.onerror=null},d=function(){h&&(c(),s.unloadDel(o),l.parentNode.removeChild(l),l=h=null,CollectGarbage())},p=function(e){a("onerror",e),h&&(d(),r(e))},f=function(e,t){try{setTimeout((function(){l&&l.contentWindow&&l.contentWindow.postMessage(e,t)}),0)}catch(e){}};h.open(),h.write('<html><script>document.domain="'+n.document.domain+'";<\/script></html>'),h.close(),h.parentWindow[t.exports.WPrefix]=n[t.exports.WPrefix];var m=h.createElement("div");return h.body.appendChild(m),l=h.createElement("iframe"),m.appendChild(l),l.src=e,l.onerror=function(){p("onerror")},i=setTimeout((function(){p("timeout")}),15e3),o=s.unloadAdd(d),{post:f,cleanup:d,loaded:c}}},t.exports.iframeEnabled=!1,n.document&&(t.exports.iframeEnabled=("function"==typeof n.postMessage||"object"==typeof n.postMessage)&&!o.isKonqueror())}).call(this,{env:{}},void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./browser":44,"./event":46,debug:55,json3:58}],48:[function(e,t,n){(function(e){"use strict";var r={};["log","debug","warn"].forEach((function(t){var n;try{n=e.console&&e.console[t]&&e.console[t].apply}catch(e){}r[t]=n?function(){return e.console[t].apply(e.console,arguments)}:"log"===t?function(){}:r.log})),t.exports=r}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],49:[function(e,t,r){"use strict";t.exports={isObject:function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},extend:function(e){if(!this.isObject(e))return e;for(var t,r,n=1,s=arguments.length;n<s;n++)for(r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}}},{}],50:[function(e,t,r){"use strict";var n=e("crypto"),s="abcdefghijklmnopqrstuvwxyz012345";t.exports={string:function(e){for(var t=s.length,r=n.randomBytes(e),i=[],o=0;o<e;o++)i.push(s.substr(r[o]%t,1));return i.join("")},number:function(e){return Math.floor(Math.random()*e)},numberString:function(e){var t=(""+(e-1)).length;return(new Array(t+1).join("0")+this.number(e)).slice(-t)}}},{crypto:43}],51:[function(e,t,r){(function(r){"use strict";var n=function(){};"production"!==r.env.NODE_ENV&&(n=e("debug")("sockjs-client:utils:transport")),t.exports=function(e){return{filterToEnabled:function(t,r){var s={main:[],facade:[]};return t?"string"==typeof t&&(t=[t]):t=[],e.forEach((function(e){e&&("websocket"!==e.transportName||!1!==r.websocket?t.length&&-1===t.indexOf(e.transportName)?n("not in whitelist",e.transportName):e.enabled(r)?(n("enabled",e.transportName),s.main.push(e),e.facadeTransport&&s.facade.push(e.facadeTransport)):n("disabled",e.transportName):n("disabled from server","websocket"))})),s}}}}).call(this,{env:{}})},{debug:55}],52:[function(e,t,r){(function(r){"use strict";var n=e("url-parse"),s=function(){};"production"!==r.env.NODE_ENV&&(s=e("debug")("sockjs-client:utils:url")),t.exports={getOrigin:function(e){if(!e)return null;var t=new n(e);if("file:"===t.protocol)return null;var r=t.port;return r||(r="https:"===t.protocol?"443":"80"),t.protocol+"//"+t.hostname+":"+r},isOriginEqual:function(e,t){var r=this.getOrigin(e)===this.getOrigin(t);return s("same",e,t,r),r},isSchemeEqual:function(e,t){return e.split(":")[0]===t.split(":")[0]},addPath:function(e,t){var r=e.split("?");return r[0]+t+(r[1]?"?"+r[1]:"")},addQuery:function(e,t){return e+(-1===e.indexOf("?")?"?"+t:"&"+t)},isLoopbackAddr:function(e){return/^127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(e)||/^\[::1\]$/.test(e)}}}).call(this,{env:{}})},{debug:55,"url-parse":61}],53:[function(e,t,r){t.exports="1.5.1"},{}],54:[function(e,t,r){var n=1e3,s=60*n,i=60*s,o=24*i,a=7*o,l=365.25*o;function u(e){if(!((e=String(e)).length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(t){var r=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*l;case"weeks":case"week":case"w":return r*a;case"days":case"day":case"d":return r*o;case"hours":case"hour":case"hrs":case"hr":case"h":return r*i;case"minutes":case"minute":case"mins":case"min":case"m":return r*s;case"seconds":case"second":case"secs":case"sec":case"s":return r*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function h(e){var t=Math.abs(e);return t>=o?Math.round(e/o)+"d":t>=i?Math.round(e/i)+"h":t>=s?Math.round(e/s)+"m":t>=n?Math.round(e/n)+"s":e+"ms"}function c(e){var t=Math.abs(e);return t>=o?d(e,t,o,"day"):t>=i?d(e,t,i,"hour"):t>=s?d(e,t,s,"minute"):t>=n?d(e,t,n,"second"):e+" ms"}function d(e,t,r,n){var s=t>=1.5*r;return Math.round(e/r)+" "+n+(s?"s":"")}t.exports=function(e,t){t=t||{};var r=typeof e;if("string"===r&&e.length>0)return u(e);if("number"===r&&isFinite(e))return t.long?c(e):h(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},{}],55:[function(e,t,r){(function(n){"use strict";function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))}function o(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),this.useColors){var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var n=0,s=0;e[0].replace(/%[a-zA-Z%]/g,(function(e){"%%"!==e&&(n++,"%c"===e&&(s=n))})),e.splice(s,0,r)}}function a(){var e;return"object"===("undefined"==typeof console?"undefined":s(console))&&console.log&&(e=console).log.apply(e,arguments)}function l(e){try{e?r.storage.setItem("debug",e):r.storage.removeItem("debug")}catch(e){}}function u(){var e;try{e=r.storage.getItem("debug")}catch(e){}return!e&&void 0!==n&&"env"in n&&(e=n.env.DEBUG),e}function h(){try{return localStorage}catch(e){}}r.log=a,r.formatArgs=o,r.save=l,r.load=u,r.useColors=i,r.storage=h(),r.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=e("./common")(r),t.exports.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}}).call(this,{env:{}})},{"./common":56}],56:[function(e,t,r){"use strict";function n(t){function r(e){for(var t=0,r=0;r<e.length;r++)t=(t<<5)-t+e.charCodeAt(r),t|=0;return n.colors[Math.abs(t)%n.colors.length]}function n(e){var t;function o(){if(o.enabled){for(var e=arguments.length,r=new Array(e),s=0;s<e;s++)r[s]=arguments[s];var i=o,a=Number(new Date),l=a-(t||a);i.diff=l,i.prev=t,i.curr=a,t=a,r[0]=n.coerce(r[0]),"string"!=typeof r[0]&&r.unshift("%O");var u=0;r[0]=r[0].replace(/%([a-zA-Z%])/g,(function(e,t){if("%%"===e)return e;u++;var s=n.formatters[t];if("function"==typeof s){var o=r[u];e=s.call(i,o),r.splice(u,1),u--}return e})),n.formatArgs.call(i,r),(i.log||n.log).apply(i,r)}}return o.namespace=e,o.enabled=n.enabled(e),o.useColors=n.useColors(),o.color=r(e),o.destroy=s,o.extend=i,"function"==typeof n.init&&n.init(o),n.instances.push(o),o}function s(){var e=n.instances.indexOf(this);return-1!==e&&(n.instances.splice(e,1),!0)}function i(e,t){return n(this.namespace+(void 0===t?":":t)+e)}function o(e){var t;n.save(e),n.names=[],n.skips=[];var r=("string"==typeof e?e:"").split(/[\s,]+/),s=r.length;for(t=0;t<s;t++)r[t]&&("-"===(e=r[t].replace(/\*/g,".*?"))[0]?n.skips.push(new RegExp("^"+e.substr(1)+"$")):n.names.push(new RegExp("^"+e+"$")));for(t=0;t<n.instances.length;t++){var i=n.instances[t];i.enabled=n.enabled(i.namespace)}}function a(){n.enable("")}function l(e){if("*"===e[e.length-1])return!0;var t,r;for(t=0,r=n.skips.length;t<r;t++)if(n.skips[t].test(e))return!1;for(t=0,r=n.names.length;t<r;t++)if(n.names[t].test(e))return!0;return!1}function u(e){return e instanceof Error?e.stack||e.message:e}return n.debug=n,n.default=n,n.coerce=u,n.disable=a,n.enable=o,n.enabled=l,n.humanize=e("ms"),Object.keys(t).forEach((function(e){n[e]=t[e]})),n.instances=[],n.names=[],n.skips=[],n.formatters={},n.selectColor=r,n.enable(n.load()),n}t.exports=n},{ms:54}],57:[function(e,t,r){"function"==typeof Object.create?t.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},{}],58:[function(e,t,s){(function(e){(function(){var r="function"==typeof n&&n.amd,i={function:!0,object:!0},o=i[typeof s]&&s&&!s.nodeType&&s,a=i[typeof window]&&window||this,l=o&&i[typeof t]&&t&&!t.nodeType&&"object"==typeof e&&e;function u(e,t){e||(e=a.Object()),t||(t=a.Object());var r=e.Number||a.Number,n=e.String||a.String,s=e.Object||a.Object,o=e.Date||a.Date,l=e.SyntaxError||a.SyntaxError,h=e.TypeError||a.TypeError,c=e.Math||a.Math,d=e.JSON||a.JSON;"object"==typeof d&&d&&(t.stringify=d.stringify,t.parse=d.parse);var p,f=s.prototype,m=f.toString,g=f.hasOwnProperty;function v(e,t){try{e()}catch(e){t&&t()}}var _=new o(-0xc782b5b800cec);function y(e){if(null!=y[e])return y[e];var s;if("bug-string-char-index"==e)s="a"!="a"[0];else if("json"==e)s=y("json-stringify")&&y("date-serialization")&&y("json-parse");else if("date-serialization"==e){if(s=y("json-stringify")&&_){var i=t.stringify;v((function(){s='"-271821-04-20T00:00:00.000Z"'==i(new o(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==i(new o(864e13))&&'"-000001-01-01T00:00:00.000Z"'==i(new o(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==i(new o(-1))}))}}else{var a,l='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==e){var u="function"==typeof(i=t.stringify);u&&((a=function(){return 1}).toJSON=a,v((function(){u="0"===i(0)&&"0"===i(new r)&&'""'==i(new n)&&i(m)===p&&i(p)===p&&i()===p&&"1"===i(a)&&"[1]"==i([a])&&"[null]"==i([p])&&"null"==i(null)&&"[null,null,null]"==i([p,m,null])&&i({a:[a,!0,!1,null,"\0\b\n\f\r\t"]})==l&&"1"===i(null,a)&&"[\n 1,\n 2\n]"==i([1,2],null,1)}),(function(){u=!1}))),s=u}if("json-parse"==e){var h,c=t.parse;"function"==typeof c&&v((function(){0!==c("0")||c(!1)||(a=c(l),(h=5==a.a.length&&1===a.a[0])&&(v((function(){h=!c('"\t"')})),h&&v((function(){h=1!==c("01")})),h&&v((function(){h=1!==c("1.")}))))}),(function(){h=!1})),s=h}}return y[e]=!!s}if(v((function(){_=-109252==_.getUTCFullYear()&&0===_.getUTCMonth()&&1===_.getUTCDate()&&10==_.getUTCHours()&&37==_.getUTCMinutes()&&6==_.getUTCSeconds()&&708==_.getUTCMilliseconds()})),y["bug-string-char-index"]=y["date-serialization"]=y.json=y["json-stringify"]=y["json-parse"]=null,!y("json")){var b="[object Function]",w="[object Date]",x="[object Number]",j="[object String]",E="[object Array]",C="[object Boolean]",A=y("bug-string-char-index"),T=function(e,t){var r,n,s,o=0;for(s in(r=function(){this.valueOf=0}).prototype.valueOf=0,n=new r)g.call(n,s)&&o++;return r=n=null,o?T=function(e,t){var r,n,s=m.call(e)==b;for(r in e)s&&"prototype"==r||!g.call(e,r)||(n="constructor"===r)||t(r);(n||g.call(e,r="constructor"))&&t(r)}:(n=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],T=function(e,t){var r,s,o=m.call(e)==b,a=!o&&"function"!=typeof e.constructor&&i[typeof e.hasOwnProperty]&&e.hasOwnProperty||g;for(r in e)o&&"prototype"==r||!a.call(e,r)||t(r);for(s=n.length;r=n[--s];)a.call(e,r)&&t(r)}),T(e,t)};if(!y("json-stringify")&&!y("date-serialization")){var S={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},M="000000",O=function(e,t){return(M+(t||0)).slice(-e)},L=function(e){var t,r,n,s,i,o,a,l,u;if(_)t=function(e){r=e.getUTCFullYear(),n=e.getUTCMonth(),s=e.getUTCDate(),o=e.getUTCHours(),a=e.getUTCMinutes(),l=e.getUTCSeconds(),u=e.getUTCMilliseconds()};else{var h=c.floor,d=[0,31,59,90,120,151,181,212,243,273,304,334],p=function(e,t){return d[t]+365*(e-1970)+h((e-1969+(t=+(t>1)))/4)-h((e-1901+t)/100)+h((e-1601+t)/400)};t=function(e){for(s=h(e/864e5),r=h(s/365.2425)+1970-1;p(r+1,0)<=s;r++);for(n=h((s-p(r,0))/30.42);p(r,n+1)<=s;n++);s=1+s-p(r,n),o=h((i=(e%864e5+864e5)%864e5)/36e5)%24,a=h(i/6e4)%60,l=h(i/1e3)%60,u=i%1e3}}return(L=function(e){return e>-1/0&&e<1/0?(t(e),e=(r<=0||r>=1e4?(r<0?"-":"+")+O(6,r<0?-r:r):O(4,r))+"-"+O(2,n+1)+"-"+O(2,s)+"T"+O(2,o)+":"+O(2,a)+":"+O(2,l)+"."+O(3,u)+"Z",r=n=s=o=a=l=u=null):e=null,e})(e)};if(y("json-stringify")&&!y("date-serialization")){function k(e){return L(this)}var P=t.stringify;t.stringify=function(e,t,r){var n=o.prototype.toJSON;o.prototype.toJSON=k;var s=P(e,t,r);return o.prototype.toJSON=n,s}}else{var R="\\u00",N=function(e){var t=e.charCodeAt(0),r=S[t];return r||R+O(2,t.toString(16))},q=/[\x00-\x1f\x22\x5c]/g,F=function(e){return q.lastIndex=0,'"'+(q.test(e)?e.replace(q,N):e)+'"'},D=function(e,t,r,n,s,i,a){var l,u,c,d,f,g,_,y,b;if(v((function(){l=t[e]})),"object"==typeof l&&l&&(l.getUTCFullYear&&m.call(l)==w&&l.toJSON===o.prototype.toJSON?l=L(l):"function"==typeof l.toJSON&&(l=l.toJSON(e))),r&&(l=r.call(t,e,l)),l==p)return l===p?l:"null";switch("object"==(u=typeof l)&&(c=m.call(l)),c||u){case"boolean":case C:return""+l;case"number":case x:return l>-1/0&&l<1/0?""+l:"null";case"string":case j:return F(""+l)}if("object"==typeof l){for(_=a.length;_--;)if(a[_]===l)throw h();if(a.push(l),d=[],y=i,i+=s,c==E){for(g=0,_=l.length;g<_;g++)f=D(g,l,r,n,s,i,a),d.push(f===p?"null":f);b=d.length?s?"[\n"+i+d.join(",\n"+i)+"\n"+y+"]":"["+d.join(",")+"]":"[]"}else T(n||l,(function(e){var t=D(e,l,r,n,s,i,a);t!==p&&d.push(F(e)+":"+(s?" ":"")+t)})),b=d.length?s?"{\n"+i+d.join(",\n"+i)+"\n"+y+"}":"{"+d.join(",")+"}":"{}";return a.pop(),b}};t.stringify=function(e,t,r){var n,s,o,a;if(i[typeof t]&&t)if((a=m.call(t))==b)s=t;else if(a==E){o={};for(var l,u=0,h=t.length;u<h;)l=t[u++],"[object String]"!=(a=m.call(l))&&"[object Number]"!=a||(o[l]=1)}if(r)if((a=m.call(r))==x){if((r-=r%1)>0)for(r>10&&(r=10),n="";n.length<r;)n+=" "}else a==j&&(n=r.length<=10?r:r.slice(0,10));return D("",((l={})[""]=e,l),s,o,n,"",[])}}}if(!y("json-parse")){var I,z,U=n.fromCharCode,B={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},V=function(){throw I=z=null,l()},G=function(){for(var e,t,r,n,s,i=z,o=i.length;I<o;)switch(s=i.charCodeAt(I)){case 9:case 10:case 13:case 32:I++;break;case 123:case 125:case 91:case 93:case 58:case 44:return e=A?i.charAt(I):i[I],I++,e;case 34:for(e="@",I++;I<o;)if((s=i.charCodeAt(I))<32)V();else if(92==s)switch(s=i.charCodeAt(++I)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:e+=B[s],I++;break;case 117:for(t=++I,r=I+4;I<r;I++)(s=i.charCodeAt(I))>=48&&s<=57||s>=97&&s<=102||s>=65&&s<=70||V();e+=U("0x"+i.slice(t,I));break;default:V()}else{if(34==s)break;for(s=i.charCodeAt(I),t=I;s>=32&&92!=s&&34!=s;)s=i.charCodeAt(++I);e+=i.slice(t,I)}if(34==i.charCodeAt(I))return I++,e;V();default:if(t=I,45==s&&(n=!0,s=i.charCodeAt(++I)),s>=48&&s<=57){for(48==s&&(s=i.charCodeAt(I+1))>=48&&s<=57&&V(),n=!1;I<o&&(s=i.charCodeAt(I))>=48&&s<=57;I++);if(46==i.charCodeAt(I)){for(r=++I;r<o&&!((s=i.charCodeAt(r))<48||s>57);r++);r==I&&V(),I=r}if(101==(s=i.charCodeAt(I))||69==s){for(43!=(s=i.charCodeAt(++I))&&45!=s||I++,r=I;r<o&&!((s=i.charCodeAt(r))<48||s>57);r++);r==I&&V(),I=r}return+i.slice(t,I)}n&&V();var a=i.slice(I,I+4);if("true"==a)return I+=4,!0;if("fals"==a&&101==i.charCodeAt(I+4))return I+=5,!1;if("null"==a)return I+=4,null;V()}return"$"},H=function(e){var t,r;if("$"==e&&V(),"string"==typeof e){if("@"==(A?e.charAt(0):e[0]))return e.slice(1);if("["==e){for(t=[];"]"!=(e=G());)r?","==e?"]"==(e=G())&&V():V():r=!0,","==e&&V(),t.push(H(e));return t}if("{"==e){for(t={};"}"!=(e=G());)r?","==e?"}"==(e=G())&&V():V():r=!0,","!=e&&"string"==typeof e&&"@"==(A?e.charAt(0):e[0])&&":"==G()||V(),t[e.slice(1)]=H(G());return t}V()}return e},W=function(e,t,r){var n=X(e,t,r);n===p?delete e[t]:e[t]=n},X=function(e,t,r){var n,s=e[t];if("object"==typeof s&&s)if(m.call(s)==E)for(n=s.length;n--;)W(m,T,s,n,r);else T(s,(function(e){W(s,e,r)}));return r.call(e,t,s)};t.parse=function(e,t){var r,n;return I=0,z=""+e,r=H(G()),"$"!=G()&&V(),I=z=null,t&&m.call(t)==b?X(((n={})[""]=r,n),"",t):r}}}return t.runInContext=u,t}if(!l||l.global!==l&&l.window!==l&&l.self!==l||(a=l),o&&!r)u(a,o);else{var h=a.JSON,c=a.JSON3,d=!1,p=u(a,a.JSON3={noConflict:function(){return d||(d=!0,a.JSON=h,a.JSON3=c,h=c=null),p}});a.JSON={parse:p.parse,stringify:p.stringify}}r&&n((function(){return p}))}).call(this)}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],59:[function(e,t,r){"use strict";var n,s=Object.prototype.hasOwnProperty;function i(e){try{return decodeURIComponent(e.replace(/\+/g," "))}catch(e){return null}}function o(e){for(var t,r=/([^=?&]+)=?([^&]*)/g,n={};t=r.exec(e);){var s=i(t[1]),o=i(t[2]);null===s||null===o||s in n||(n[s]=o)}return n}function a(e,t){t=t||"";var r,i,o=[];for(i in"string"!=typeof t&&(t="?"),e)if(s.call(e,i)){if((r=e[i])||null!==r&&r!==n&&!isNaN(r)||(r=""),i=encodeURIComponent(i),r=encodeURIComponent(r),null===i||null===r)continue;o.push(i+"="+r)}return o.length?t+o.join("&"):""}r.stringify=a,r.parse=o},{}],60:[function(e,t,r){"use strict";t.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},{}],61:[function(e,t,n){(function(r){"use strict";var n=e("requires-port"),s=e("querystringify"),i=/^[A-Za-z][A-Za-z0-9+-.]*:[\\/]+/,o=/^([a-z][a-z0-9.+-]*:)?([\\/]{1,})?([\S\s]*)/i,a=new RegExp("^[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]+");function l(e){return(e||"").toString().replace(a,"")}var u=[["#","hash"],["?","query"],function(e){return e.replace("\\","/")},["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]],h={hash:1,query:1};function c(e){var t,n=("undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:{}).location||{},s={},o=typeof(e=e||n);if("blob:"===e.protocol)s=new f(unescape(e.pathname),{});else if("string"===o)for(t in s=new f(e,{}),h)delete s[t];else if("object"===o){for(t in e)t in h||(s[t]=e[t]);void 0===s.slashes&&(s.slashes=i.test(e.href))}return s}function d(e){e=l(e);var t=o.exec(e);return{protocol:t[1]?t[1].toLowerCase():"",slashes:!!(t[2]&&t[2].length>=2),rest:t[2]&&1===t[2].length?"/"+t[3]:t[3]}}function p(e,t){if(""===e)return t;for(var r=(t||"/").split("/").slice(0,-1).concat(e.split("/")),n=r.length,s=r[n-1],i=!1,o=0;n--;)"."===r[n]?r.splice(n,1):".."===r[n]?(r.splice(n,1),o++):o&&(0===n&&(i=!0),r.splice(n,1),o--);return i&&r.unshift(""),"."!==s&&".."!==s||r.push(""),r.join("/")}function f(e,t,r){if(e=l(e),!(this instanceof f))return new f(e,t,r);var i,o,a,h,m,g,v=u.slice(),_=typeof t,y=this,b=0;for("object"!==_&&"string"!==_&&(r=t,t=null),r&&"function"!=typeof r&&(r=s.parse),t=c(t),i=!(o=d(e||"")).protocol&&!o.slashes,y.slashes=o.slashes||i&&t.slashes,y.protocol=o.protocol||t.protocol||"",e=o.rest,o.slashes||(v[3]=[/(.*)/,"pathname"]);b<v.length;b++)"function"!=typeof(h=v[b])?(a=h[0],g=h[1],a!=a?y[g]=e:"string"==typeof a?~(m=e.indexOf(a))&&("number"==typeof h[2]?(y[g]=e.slice(0,m),e=e.slice(m+h[2])):(y[g]=e.slice(m),e=e.slice(0,m))):(m=a.exec(e))&&(y[g]=m[1],e=e.slice(0,m.index)),y[g]=y[g]||i&&h[3]&&t[g]||"",h[4]&&(y[g]=y[g].toLowerCase())):e=h(e);r&&(y.query=r(y.query)),i&&t.slashes&&"/"!==y.pathname.charAt(0)&&(""!==y.pathname||""!==t.pathname)&&(y.pathname=p(y.pathname,t.pathname)),"/"!==y.pathname.charAt(0)&&y.hostname&&(y.pathname="/"+y.pathname),n(y.port,y.protocol)||(y.host=y.hostname,y.port=""),y.username=y.password="",y.auth&&(h=y.auth.split(":"),y.username=h[0]||"",y.password=h[1]||""),y.origin=y.protocol&&y.host&&"file:"!==y.protocol?y.protocol+"//"+y.host:"null",y.href=y.toString()}function m(e,t,r){var i=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(r||s.parse)(t)),i[e]=t;break;case"port":i[e]=t,n(t,i.protocol)?t&&(i.host=i.hostname+":"+t):(i.host=i.hostname,i[e]="");break;case"hostname":i[e]=t,i.port&&(t+=":"+i.port),i.host=t;break;case"host":i[e]=t,/:\d+$/.test(t)?(t=t.split(":"),i.port=t.pop(),i.hostname=t.join(":")):(i.hostname=t,i.port="");break;case"protocol":i.protocol=t.toLowerCase(),i.slashes=!r;break;case"pathname":case"hash":if(t){var o="pathname"===e?"/":"#";i[e]=t.charAt(0)!==o?o+t:t}else i[e]=t;break;default:i[e]=t}for(var a=0;a<u.length;a++){var l=u[a];l[4]&&(i[l[1]]=i[l[1]].toLowerCase())}return i.origin=i.protocol&&i.host&&"file:"!==i.protocol?i.protocol+"//"+i.host:"null",i.href=i.toString(),i}function g(e){e&&"function"==typeof e||(e=s.stringify);var t,r=this,n=r.protocol;n&&":"!==n.charAt(n.length-1)&&(n+=":");var i=n+(r.slashes?"//":"");return r.username&&(i+=r.username,r.password&&(i+=":"+r.password),i+="@"),i+=r.host+r.pathname,(t="object"==typeof r.query?e(r.query):r.query)&&(i+="?"!==t.charAt(0)?"?"+t:t),r.hash&&(i+=r.hash),i}f.prototype={set:m,toString:g},f.extractProtocol=d,f.location=c,f.trimLeft=l,f.qs=s,t.exports=f}).call(this,void 0!==r.g?r.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{querystringify:59,"requires-port":60}]},{},[1])(1)},"./node_modules/strip-ansi/index.js":(e,t,r)=>{"use strict";var n=r("./node_modules/ansi-regex/index.js")();e.exports=function(e){return"string"==typeof e?e.replace(n,""):e}},"./node_modules/url/node_modules/punycode/punycode.js":function(e,t,r){var n;e=r.nmd(e),function(s){t&&t.nodeType,e&&e.nodeType;var i="object"==typeof r.g&&r.g;i.global!==i&&i.window!==i&&i.self;var o,a=2147483647,l=36,u=/^xn--/,h=/[^\x20-\x7E]/,c=/[\x2E\u3002\uFF0E\uFF61]/g,d={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},p=Math.floor,f=String.fromCharCode;function m(e){throw RangeError(d[e])}function g(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function v(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+g((e=e.replace(c,".")).split("."),t).join(".")}function _(e){for(var t,r,n=[],s=0,i=e.length;s<i;)(t=e.charCodeAt(s++))>=55296&&t<=56319&&s<i?56320==(64512&(r=e.charCodeAt(s++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),s--):n.push(t);return n}function y(e){return g(e,(function(e){var t="";return e>65535&&(t+=f((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=f(e)})).join("")}function b(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function w(e,t,r){var n=0;for(e=r?p(e/700):e>>1,e+=p(e/t);e>455;n+=l)e=p(e/35);return p(n+36*e/(e+38))}function x(e){var t,r,n,s,i,o,u,h,c,d,f,g=[],v=e.length,_=0,b=128,x=72;for((r=e.lastIndexOf("-"))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&m("not-basic"),g.push(e.charCodeAt(n));for(s=r>0?r+1:0;s<v;){for(i=_,o=1,u=l;s>=v&&m("invalid-input"),((h=(f=e.charCodeAt(s++))-48<10?f-22:f-65<26?f-65:f-97<26?f-97:l)>=l||h>p((a-_)/o))&&m("overflow"),_+=h*o,!(h<(c=u<=x?1:u>=x+26?26:u-x));u+=l)o>p(a/(d=l-c))&&m("overflow"),o*=d;x=w(_-i,t=g.length+1,0==i),p(_/t)>a-b&&m("overflow"),b+=p(_/t),_%=t,g.splice(_++,0,b)}return y(g)}function j(e){var t,r,n,s,i,o,u,h,c,d,g,v,y,x,j,E=[];for(v=(e=_(e)).length,t=128,r=0,i=72,o=0;o<v;++o)(g=e[o])<128&&E.push(f(g));for(n=s=E.length,s&&E.push("-");n<v;){for(u=a,o=0;o<v;++o)(g=e[o])>=t&&g<u&&(u=g);for(u-t>p((a-r)/(y=n+1))&&m("overflow"),r+=(u-t)*y,t=u,o=0;o<v;++o)if((g=e[o])<t&&++r>a&&m("overflow"),g==t){for(h=r,c=l;!(h<(d=c<=i?1:c>=i+26?26:c-i));c+=l)j=h-d,x=l-d,E.push(f(b(d+j%x,0))),h=p(j/x);E.push(f(b(h,0))),i=w(r,y,n==s),r=0,++n}++r,++t}return E.join("")}o={version:"1.3.2",ucs2:{decode:_,encode:y},decode:x,encode:j,toASCII:function(e){return v(e,(function(e){return h.test(e)?"xn--"+j(e):e}))},toUnicode:function(e){return v(e,(function(e){return u.test(e)?x(e.slice(4).toLowerCase()):e}))}},void 0===(n=function(){return o}.call(t,r,t,e))||(e.exports=n)}()},"./node_modules/url/url.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/node_modules/punycode/punycode.js"),s=r("./node_modules/url/util.js");function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=y,t.resolve=function(e,t){return y(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?y(e,!1,!0).resolveObject(t):t},t.format=function(e){s.isString(e)&&(e=y(e));return e instanceof i?e.format():i.prototype.format.call(e)},t.Url=i;var o=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,l=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),h=["'"].concat(u),c=["%","/","?",";","#"].concat(h),d=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,f=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},v={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},_=r("./node_modules/querystring/index.js");function y(e,t,r){if(e&&s.isObject(e)&&e instanceof i)return e;var n=new i;return n.parse(e,t,r),n}i.prototype.parse=function(e,t,r){if(!s.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var i=e.indexOf("?"),a=-1!==i&&i<e.indexOf("#")?"?":"#",u=e.split(a);u[0]=u[0].replace(/\\/g,"/");var y=e=u.join(a);if(y=y.trim(),!r&&1===e.split("#").length){var b=l.exec(y);if(b)return this.path=y,this.href=y,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?_.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var w=o.exec(y);if(w){var x=(w=w[0]).toLowerCase();this.protocol=x,y=y.substr(w.length)}if(r||w||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var j="//"===y.substr(0,2);!j||w&&g[w]||(y=y.substr(2),this.slashes=!0)}if(!g[w]&&(j||w&&!v[w])){for(var E,C,A=-1,T=0;T<d.length;T++){-1!==(S=y.indexOf(d[T]))&&(-1===A||S<A)&&(A=S)}-1!==(C=-1===A?y.lastIndexOf("@"):y.lastIndexOf("@",A))&&(E=y.slice(0,C),y=y.slice(C+1),this.auth=decodeURIComponent(E)),A=-1;for(T=0;T<c.length;T++){var S;-1!==(S=y.indexOf(c[T]))&&(-1===A||S<A)&&(A=S)}-1===A&&(A=y.length),this.host=y.slice(0,A),y=y.slice(A),this.parseHost(),this.hostname=this.hostname||"";var M="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!M)for(var O=this.hostname.split(/\./),L=(T=0,O.length);T<L;T++){var k=O[T];if(k&&!k.match(p)){for(var P="",R=0,N=k.length;R<N;R++)k.charCodeAt(R)>127?P+="x":P+=k[R];if(!P.match(p)){var q=O.slice(0,T),F=O.slice(T+1),D=k.match(f);D&&(q.push(D[1]),F.unshift(D[2])),F.length&&(y="/"+F.join(".")+y),this.hostname=q.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),M||(this.hostname=n.toASCII(this.hostname));var I=this.port?":"+this.port:"",z=this.hostname||"";this.host=z+I,this.href+=this.host,M&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!m[x])for(T=0,L=h.length;T<L;T++){var U=h[T];if(-1!==y.indexOf(U)){var B=encodeURIComponent(U);B===U&&(B=escape(U)),y=y.split(U).join(B)}}var V=y.indexOf("#");-1!==V&&(this.hash=y.substr(V),y=y.slice(0,V));var G=y.indexOf("?");if(-1!==G?(this.search=y.substr(G),this.query=y.substr(G+1),t&&(this.query=_.parse(this.query)),y=y.slice(0,G)):t&&(this.search="",this.query={}),y&&(this.pathname=y),v[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){I=this.pathname||"";var H=this.search||"";this.path=I+H}return this.href=this.format(),this},i.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",i=!1,o="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&s.isObject(this.query)&&Object.keys(this.query).length&&(o=_.stringify(this.query));var a=this.search||o&&"?"+o||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||v[t])&&!1!==i?(i="//"+(i||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):i||(i=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+i+(r=r.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(a=a.replace("#","%23"))+n},i.prototype.resolve=function(e){return this.resolveObject(y(e,!1,!0)).format()},i.prototype.resolveObject=function(e){if(s.isString(e)){var t=new i;t.parse(e,!1,!0),e=t}for(var r=new i,n=Object.keys(this),o=0;o<n.length;o++){var a=n[o];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var l=Object.keys(e),u=0;u<l.length;u++){var h=l[u];"protocol"!==h&&(r[h]=e[h])}return v[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!v[e.protocol]){for(var c=Object.keys(e),d=0;d<c.length;d++){var p=c[d];r[p]=e[p]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||g[e.protocol])r.pathname=e.pathname;else{for(var f=(e.pathname||"").split("/");f.length&&!(e.host=f.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==f[0]&&f.unshift(""),f.length<2&&f.unshift(""),r.pathname=f.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var m=r.pathname||"",_=r.search||"";r.path=m+_}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var y=r.pathname&&"/"===r.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),w=b||y||r.host&&e.pathname,x=w,j=r.pathname&&r.pathname.split("/")||[],E=(f=e.pathname&&e.pathname.split("/")||[],r.protocol&&!v[r.protocol]);if(E&&(r.hostname="",r.port=null,r.host&&(""===j[0]?j[0]=r.host:j.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===f[0]?f[0]=e.host:f.unshift(e.host)),e.host=null),w=w&&(""===f[0]||""===j[0])),b)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,j=f;else if(f.length)j||(j=[]),j.pop(),j=j.concat(f),r.search=e.search,r.query=e.query;else if(!s.isNullOrUndefined(e.search)){if(E)r.hostname=r.host=j.shift(),(M=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=M.shift(),r.host=r.hostname=M.shift());return r.search=e.search,r.query=e.query,s.isNull(r.pathname)&&s.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!j.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var C=j.slice(-1)[0],A=(r.host||e.host||j.length>1)&&("."===C||".."===C)||""===C,T=0,S=j.length;S>=0;S--)"."===(C=j[S])?j.splice(S,1):".."===C?(j.splice(S,1),T++):T&&(j.splice(S,1),T--);if(!w&&!x)for(;T--;T)j.unshift("..");!w||""===j[0]||j[0]&&"/"===j[0].charAt(0)||j.unshift(""),A&&"/"!==j.join("/").substr(-1)&&j.push("");var M,O=""===j[0]||j[0]&&"/"===j[0].charAt(0);E&&(r.hostname=r.host=O?"":j.length?j.shift():"",(M=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=M.shift(),r.host=r.hostname=M.shift()));return(w=w||r.host&&j.length)&&!O&&j.unshift(""),j.length?r.pathname=j.join("/"):(r.pathname=null,r.path=null),s.isNull(r.pathname)&&s.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},i.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},"./node_modules/url/util.js":e=>{"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},"./node_modules/webpack-dev-server/client/clients/BaseClient.js":e=>{"use strict";function t(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var r,n,s;return r=e,s=[{key:"getClientPath",value:function(e){throw new Error("Client needs implementation")}}],(n=null)&&t(r.prototype,n),s&&t(r,s),e}()},"./node_modules/webpack-dev-server/client/clients/SockJSClient.js":(e,t,r)=>{"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=l(e);if(t){var s=l(this).constructor;r=Reflect.construct(n,arguments,s)}else r=n.apply(this,arguments);return a(this,r)}}function a(e,t){return!t||"object"!==n(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var u=r("./node_modules/sockjs-client/dist/sockjs.js"),h=r("./node_modules/webpack-dev-server/client/clients/BaseClient.js");e.exports=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}(l,e);var t,r,n,a=o(l);function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this)).sock=new u(e),t.sock.onerror=function(e){},t}return t=l,n=[{key:"getClientPath",value:function(e){return"./node_modules/webpack-dev-server/client/clients/SockJSClient.js"}}],(r=[{key:"onOpen",value:function(e){this.sock.onopen=e}},{key:"onClose",value:function(e){this.sock.onclose=e}},{key:"onMessage",value:function(e){this.sock.onmessage=function(t){e(t.data)}}}])&&s(t.prototype,r),n&&s(t,n),l}(h)},"./node_modules/webpack-dev-server/client/overlay.js":(e,t,r)=>{"use strict";var n=r("./node_modules/ansi-html/index.js"),s=new(0,r("./node_modules/html-entities/lib/index.js").AllHtmlEntities),i={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"},o=null,a=null,l=null;function u(e){var t,r;a?e(a):(l=e,o||(t=function(){var e,t;(t=(e=o).contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",t.style.position="fixed",t.style.boxSizing="border-box",t.style.left=0,t.style.top=0,t.style.right=0,t.style.bottom=0,t.style.width="100vw",t.style.height="100vh",t.style.backgroundColor="rgba(0, 0, 0, 0.85)",t.style.color="#E8E8E8",t.style.fontFamily="Menlo, Consolas, monospace",t.style.fontSize="large",t.style.padding="2rem",t.style.lineHeight="1.2",t.style.whiteSpace="pre-wrap",t.style.overflow="auto",e.contentDocument.body.appendChild(t),l(a=t)},(r=document.createElement("iframe")).id="webpack-dev-server-client-overlay",r.src="about:blank",r.style.position="fixed",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.border="none",r.style.zIndex=9999999999,r.onload=t,o=r,document.body.appendChild(o)))}n.setColors(i),e.exports={clear:function(){a&&(document.body.removeChild(o),a=null,o=null,l=null)},showMessage:function(e){u((function(t){t.innerHTML='<span style="color: #'.concat(i.red,'">Failed to compile.</span><br><br>').concat(n(s.encode(e[0])))}))}}},"./node_modules/webpack-dev-server/client/socket.js":(e,t,r)=>{"use strict";var n=r("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),s=void 0!==n?n:r("./node_modules/webpack-dev-server/client/clients/SockJSClient.js"),i=0,o=null,a=function(e,t){(o=new s(e)).onOpen((function(){i=0})),o.onClose((function(){if(0===i&&t.close(),o=null,i<=10){var r=1e3*Math.pow(2,i)+100*Math.random();i+=1,setTimeout((function(){a(e,t)}),r)}})),o.onMessage((function(e){var r=JSON.parse(e);t[r.type]&&t[r.type](r.data)}))};e.exports=a},"./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":(e,t,r)=>{"use strict";var n=r("./node_modules/url/url.js"),s=r("./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");e.exports=function(e,t){var r;if("string"==typeof e&&""!==e)r=n.parse(e.substr(1).replace("&","?"),!0);else{var i=s();r=n.parse(i||"/",!0,!0)}return function(e,t){var r=e.auth,s=e.query,i=e.hostname,o=e.protocol,a=e.port;a&&"0"!==a||(a=t.port);"0.0.0.0"!==i&&"::"!==i||!t.hostname||0!==t.protocol.indexOf("http")||(i=t.hostname);!i||"127.0.0.1"===i||"https:"!==t.protocol&&"0.0.0.0"!==e.hostname||(o=t.protocol);var l=s.sockHost||i,u=s.sockPath||"/sockjs-node",h=s.sockPort||a;"location"===h&&(h=t.port);return n.format({protocol:o,auth:r,hostname:l,port:h,pathname:u})}(r,t="string"==typeof t&&""!==t?n.parse(t):self.location)}},"./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":e=>{"use strict";e.exports=function(){if(document.currentScript)return document.currentScript.getAttribute("src");var e=document.scripts||[],t=e[e.length-1];if(t)return t.getAttribute("src");throw new Error("[WDS] Failed to get current script source.")}},"./node_modules/webpack-dev-server/client/utils/log.js":(e,t,r)=>{"use strict";var n=r("./node_modules/loglevel/lib/loglevel.js").getLogger("webpack-dev-server"),s="info";n.setDefaultLevel(s),e.exports={log:n,setLogLevel:function(e){switch(e){case s:case"warn":case"error":case"debug":case"trace":n.setLevel(e);break;case"warning":n.setLevel("warn");break;case"none":case"silent":n.disableAll();break;default:n.error("[WDS] Unknown clientLogLevel '".concat(e,"'"))}}}},"./node_modules/webpack-dev-server/client/utils/reloadApp.js":(e,t,r)=>{"use strict";var n=r("./node_modules/webpack-dev-server/client/utils/log.js").log;e.exports=function(e,t){var s=e.hotReload,i=e.hot,o=e.liveReload,a=t.isUnloading,l=t.currentHash;if(!a&&s)if(i)n.info("[WDS] App hot update..."),r("./node_modules/webpack/hot/emitter.js").emit("webpackHotUpdate",l),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate".concat(l),"*");else if(o)var u=self,h=self.setInterval((function(){("about:"!==u.location.protocol||(u=u.parent).parent===u)&&c(u,h)}));function c(e,t){clearInterval(t),n.info("[WDS] App updated. Reloading..."),e.location.reload()}}},"./node_modules/webpack-dev-server/client/utils/sendMessage.js":e=>{"use strict";e.exports=function(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack".concat(e),data:t},"*")}},"./node_modules/webpack/hot/emitter.js":(e,t,r)=>{var n=r("./node_modules/events/events.js");e.exports=new n},"./node_modules/webpack/hot/log.js":e=>{var t="info";function r(){}function n(e){return"info"===t&&"info"===e||["info","warning"].indexOf(t)>=0&&"warning"===e||["info","warning","error"].indexOf(t)>=0&&"error"===e}function s(e){return function(t,r){n(t)&&e(r)}}e.exports=function(e,t){n(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var i=console.group||r,o=console.groupCollapsed||r,a=console.groupEnd||r;e.exports.group=s(i),e.exports.groupCollapsed=s(o),e.exports.groupEnd=s(a),e.exports.setLogLevel=function(e){t=e},e.exports.formatError=function(e){var t=e.message,r=e.stack;return r?r.indexOf(t)<0?t+"\n"+r:r:t}},"./app/shaders/plane-fragments.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="precision highp float;\n#define GLSLIFY 1\n\nuniform float uAlpha;\nuniform sampler2D tMap;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 texture = texture2D(tMap, vUv);\n  gl_FragColor = texture;\n  gl_FragColor.a = uAlpha;\n}\n"},"./app/shaders/plane-vertex.glsl":(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n="#define GLSLIFY 1\nattribute vec2 uv;\nattribute vec3 position;\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"},"./node_modules/webpack/hot sync ^\\.\\/log$":(e,t,r)=>{var n={"./log":"./node_modules/webpack/hot/log.js"};function s(e){var t=i(e);return r(t)}function i(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}s.keys=function(){return Object.keys(n)},s.resolve=i,e.exports=s,s.id="./node_modules/webpack/hot sync ^\\.\\/log$"}},t={};function r(n){var s=t[n];if(void 0!==s)return s.exports;var i=t[n]={id:n,loaded:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";r.r({});var e=r("./node_modules/normalize-wheel/index.js"),t=r.n(e),n=r("./node_modules/lodash/each.js"),s=r.n(n),i=r("./app/components/Canvas/index.js"),o=r("./app/components/Navigation.js"),a=r("./app/components/Preloader.js"),l=r("./app/pages/Home/index.js"),u=r("./app/pages/About/index.js"),h=r("./app/pages/Collections/index.js"),c=r("./app/pages/Detail/index.js");new class{constructor(){this.createContent(),this.createPreloader(),this.createNavigation(),this.createCanvas(),this.createPages(),this.addEventListeners(),this.addLinkListeners(),this.update()}createNavigation(){this.navigation=new o.default({template:this.template})}createPreloader(){this.preloader=new a.default,this.preloader.once("completed",this.onPreloaded.bind(this))}createCanvas(){this.canvas=new i.default({template:this.template})}createContent(){this.content=document.querySelector(".content"),this.template=this.content.getAttribute("data-template")}createPages(){this.pages={home:new l.default,about:new u.default,collections:new h.default,detail:new c.default},this.page=this.pages[this.template],this.page.create()}onPreloaded(){this.preloader.destroy(),this.onResize(),this.page.show()}async onChange(e){this.canvas.onChangeStart(this.template),await this.page.hide();const t=await window.fetch(e);if(200===t.status){const e=await t.text(),r=document.createElement("div");r.innerHTML=e;const n=r.querySelector(".content");this.template=n.getAttribute("data-template"),this.navigation.onChange(this.template),this.content.setAttribute("data-template",this.template),this.content.innerHTML=n.innerHTML,this.canvas.onChangeEnd(this.template),this.page=this.pages[this.template],this.page.create(),this.onResize(),this.page.show(),this.addLinkListeners()}else console.log("Error")}onResize(){this.page&&this.page.onResize&&this.page.onResize(),window.requestAnimationFrame((()=>{this.canvas&&this.canvas.onResize&&this.canvas.onResize()}))}onTouchDown(e){this.canvas&&this.canvas.onTouchDown&&this.canvas.onTouchDown(e)}onTouchMove(e){this.canvas&&this.canvas.onTouchMove&&this.canvas.onTouchMove(e)}onTouchUp(e){this.canvas&&this.canvas.onTouchUp&&this.canvas.onTouchUp(e)}onWheel(e){const r=t()(e);this.canvas&&this.canvas.onWheel&&this.canvas.onWheel(r),this.page&&this.page.onWheel&&this.page.onWheel(r)}update(){this.page&&this.page.update&&this.page.update(),this.canvas&&this.canvas.update&&this.canvas.update(this.page.scroll),this.frame=window.requestAnimationFrame(this.update.bind(this))}addEventListeners(){window.addEventListener("mousewheel",this.onWheel.bind(this)),window.addEventListener("mousedown",this.onTouchDown.bind(this)),window.addEventListener("mousemove",this.onTouchMove.bind(this)),window.addEventListener("mouseup",this.onTouchUp.bind(this)),window.addEventListener("touchdown",this.onTouchDown.bind(this)),window.addEventListener("touchmove",this.onTouchMove.bind(this)),window.addEventListener("touchend",this.onTouchUp.bind(this)),window.addEventListener("resize",this.onResize.bind(this))}addLinkListeners(){const e=document.querySelectorAll("a");s()(e,(e=>{e.onclick=t=>{t.preventDefault();const{href:r}=e;this.onChange(r)}}))}}})(),(()=>{"use strict";r.r({})})(),(()=>{"use strict";var e=r("./node_modules/strip-ansi/index.js"),t=r("./node_modules/webpack-dev-server/client/socket.js"),n=r("./node_modules/webpack-dev-server/client/overlay.js"),s=r("./node_modules/webpack-dev-server/client/utils/log.js"),i=s.log,o=s.setLogLevel,a=r("./node_modules/webpack-dev-server/client/utils/sendMessage.js"),l=r("./node_modules/webpack-dev-server/client/utils/reloadApp.js"),u=r("./node_modules/webpack-dev-server/client/utils/createSocketUrl.js"),h={isUnloading:!1,currentHash:""},c={hot:!1,hotReload:!0,liveReload:!1,initial:!0,useWarningOverlay:!1,useErrorOverlay:!1,useProgress:!1},d=u("?http://localhost:8080");if(self.addEventListener("beforeunload",(function(){h.isUnloading=!0})),"undefined"!=typeof window){var p=window.location.search.toLowerCase();c.hotReload=-1===p.indexOf("hotreload=false")}t(d,{hot:function(){c.hot=!0,i.info("[WDS] Hot Module Replacement enabled.")},liveReload:function(){c.liveReload=!0,i.info("[WDS] Live Reloading enabled.")},invalid:function(){i.info("[WDS] App updated. Recompiling..."),(c.useWarningOverlay||c.useErrorOverlay)&&n.clear(),a("Invalid")},hash:function(e){h.currentHash=e},"still-ok":function(){i.info("[WDS] Nothing changed."),(c.useWarningOverlay||c.useErrorOverlay)&&n.clear(),a("StillOk")},"log-level":function(e){var t=r("./node_modules/webpack/hot sync ^\\.\\/log$");-1!==t.keys().indexOf("./log")&&t("./log").setLogLevel(e),o(e)},overlay:function(e){"undefined"!=typeof document&&("boolean"==typeof e?(c.useWarningOverlay=!1,c.useErrorOverlay=e):e&&(c.useWarningOverlay=e.warnings,c.useErrorOverlay=e.errors))},progress:function(e){"undefined"!=typeof document&&(c.useProgress=e)},"progress-update":function(e){c.useProgress&&i.info("[WDS] ".concat(e.percent,"% - ").concat(e.msg,".")),a("Progress",e)},ok:function(){if(a("Ok"),(c.useWarningOverlay||c.useErrorOverlay)&&n.clear(),c.initial)return c.initial=!1;l(c,h)},"content-changed":function(){i.info("[WDS] Content base changed. Reloading..."),self.location.reload()},warnings:function(t){i.warn("[WDS] Warnings while compiling.");var r=t.map((function(t){return e(t)}));a("Warnings",r);for(var s=0;s<r.length;s++)i.warn(r[s]);if(c.useWarningOverlay&&n.showMessage(t),c.initial)return c.initial=!1;l(c,h)},errors:function(t){i.error("[WDS] Errors while compiling. Reload prevented.");var r=t.map((function(t){return e(t)}));a("Errors",r);for(var s=0;s<r.length;s++)i.error(r[s]);c.useErrorOverlay&&n.showMessage(t),c.initial=!1},error:function(e){i.error(e)},close:function(){i.error("[WDS] Disconnected!"),a("Close")}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,